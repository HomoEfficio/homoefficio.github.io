<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>뒤태지존의 끄적거림</title>
  
  <subtitle>개발</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://homoefficio.github.io/"/>
  <updated>2019-05-09T11:30:32.488Z</updated>
  <id>http://homoefficio.github.io/</id>
  
  <author>
    <name>HomoEfficio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>재미로 보는 언어별 스트림 처리 비교</title>
    <link href="http://homoefficio.github.io/2019/05/08/%EC%9E%AC%EB%AF%B8%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%96%B8%EC%96%B4%EB%B3%84-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%B2%98%EB%A6%AC-%EB%B9%84%EA%B5%90/"/>
    <id>http://homoefficio.github.io/2019/05/08/재미로-보는-언어별-스트림-처리-비교/</id>
    <published>2019-05-08T13:32:35.000Z</published>
    <updated>2019-05-09T11:30:32.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="재미로-보는-언어별-스트림-처리-비교"><a href="#재미로-보는-언어별-스트림-처리-비교" class="headerlink" title="재미로 보는 언어별 스트림 처리 비교"></a>재미로 보는 언어별 스트림 처리 비교</h1><p>NBA를 즐겨보는데 갑자기 역대 MVP가 궁금해서 찾아보니 <a href="https://www.nba.com/history/awards/mvp" target="_blank" rel="noopener">https://www.nba.com/history/awards/mvp</a> 여기에서 볼 수 있었다. 연도별로 주욱 나열되어 있는데 <strong>수상횟수 기준으로 집계해서 내림차순</strong>으로 보고 싶었다.</p><p>그래서 연습도 할 겸 자바로 먼저 짜봤는데 다른 언어로 짜주신 분들도 계셔서 <strong>재미로 비교</strong>를 해보려 한다. 언어의 전반적인 우열을 가리는 목적이 전혀 아니므로 구경하는 재미로만 참고하면 좋겠다.</p><p>자바 외에 다른 언어에 대한 지식이 많지 않으므로 잘못된 정보가 포함될 수도 있으며 이 부분은 댓글로 바로잡아주시면 정말 감사드리며 바로 반영하겠다.</p><p>자 이제 시작해보자. 연도별 NBA MVP 명단 데이터는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">String MVPS = <span class="string">""</span> +</span><br><span class="line">            <span class="string">"2017-18     James Harden, Houston Rockets (Voting)\n"</span> +</span><br><span class="line">            <span class="string">"2016-17     Russell Westbrook, Oklahoma City Thunder (Voting)\n"</span> +</span><br><span class="line">            <span class="string">"2015-16     Stephen Curry, Golden State Warriors (Voting)\n"</span> +</span><br><span class="line">            <span class="string">"2014-15     Stephen Curry, Golden State Warriors\n"</span> +</span><br><span class="line">            <span class="string">"2013-14     Kevin Durant, Oklahoma City Thunder\n"</span> +</span><br><span class="line">            <span class="string">"2012-13     LeBron James, Miami Heat\n"</span> +</span><br><span class="line">            <span class="string">"2011-12     LeBron James, Miami Heat\n"</span> +</span><br><span class="line">            <span class="string">"2010-11     Derrick Rose, Chicago Bulls\n"</span> +</span><br><span class="line">            <span class="string">"2009-10     LeBron James, Cleveland Cavaliers\n"</span> +</span><br><span class="line">            <span class="string">"2008-09     LeBron James, Cleveland Cavaliers\n"</span> +</span><br><span class="line">            <span class="string">"2007-08     Kobe Bryant, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"2006-07     Dirk Nowitzki, Dallas Mavericks\n"</span> +</span><br><span class="line">            <span class="string">"2005-06     Steve Nash, Phoenix Suns\n"</span> +</span><br><span class="line">            <span class="string">"2004-05     Steve Nash, Phoenix Suns\n"</span> +</span><br><span class="line">            <span class="string">"2003-04     Kevin Garnett, Minnesota Timberwolves\n"</span> +</span><br><span class="line">            <span class="string">"2002-03     Tim Duncan, San Antonio Spurs\n"</span> +</span><br><span class="line">            <span class="string">"2001-02     Tim Duncan, San Antonio Spurs\n"</span> +</span><br><span class="line">            <span class="string">"2000-01     Allen Iverson, Philadelphia 76ers\n"</span> +</span><br><span class="line">            <span class="string">"1999-00     Shaquille O'Neal, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1998-99     Karl Malone, Utah Jazz\n"</span> +</span><br><span class="line">            <span class="string">"1997-98     Michael Jordan, Chicago Bulls\n"</span> +</span><br><span class="line">            <span class="string">"1996-97     Karl Malone, Utah Jazz\n"</span> +</span><br><span class="line">            <span class="string">"1995-96     Michael Jordan, Chicago Bulls\n"</span> +</span><br><span class="line">            <span class="string">"1994-95     David Robinson, San Antonio Spurs\n"</span> +</span><br><span class="line">            <span class="string">"1993-94     Hakeem Olajuwon, Houston Rockets\n"</span> +</span><br><span class="line">            <span class="string">"1992-93     Charles Barkley, Phoenix Suns\n"</span> +</span><br><span class="line">            <span class="string">"1991-92     Michael Jordan, Chicago Bulls\n"</span> +</span><br><span class="line">            <span class="string">"1990-91     Michael Jordan, Chicago Bulls\n"</span> +</span><br><span class="line">            <span class="string">"1989-90     Magic Johnson, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1988-89     Magic Johnson, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1987-88     Michael Jordan, Chicago Bulls\n"</span> +</span><br><span class="line">            <span class="string">"1986-87     Magic Johnson, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1985-86     Larry Bird, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1984-85     Larry Bird, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1983-84     Larry Bird, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1982-83     Moses Malone, Philadelphia 76ers\n"</span> +</span><br><span class="line">            <span class="string">"1981-82     Moses Malone, Houston Rockets\n"</span> +</span><br><span class="line">            <span class="string">"1980-81     Julius Erving, Philadelphia 76ers\n"</span> +</span><br><span class="line">            <span class="string">"1979-80     Kareem Abdul-Jabbar, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1978-79     Moses Malone, Houston Rockets\n"</span> +</span><br><span class="line">            <span class="string">"1977-78     Bill Walton, Portland Trail Blazers\n"</span> +</span><br><span class="line">            <span class="string">"1976-77     Kareem Abdul-Jabbar, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1975-76     Kareem Abdul-Jabbar, Los Angeles Lakers\n"</span> +</span><br><span class="line">            <span class="string">"1974-75     Bob McAdoo, Buffalo Braves\n"</span> +</span><br><span class="line">            <span class="string">"1973-74     Kareem Abdul-Jabbar, Milwaukee Bucks\n"</span> +</span><br><span class="line">            <span class="string">"1972-73     Dave Cowens, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1971-72     Kareem Abdul-Jabbar, Milwaukee Bucks\n"</span> +</span><br><span class="line">            <span class="string">"1970-71     Kareem Abdul-Jabbar, Milwaukee Bucks\n"</span> +</span><br><span class="line">            <span class="string">"1969-70     Willis Reed, New York Knicks\n"</span> +</span><br><span class="line">            <span class="string">"1968-69     Wes Unseld, Baltimore Bullets\n"</span> +</span><br><span class="line">            <span class="string">"1967-68     Wilt Chamberlain, Philadelphia 76ers\n"</span> +</span><br><span class="line">            <span class="string">"1966-67     Wilt Chamberlain, Philadelphia 76ers\n"</span> +</span><br><span class="line">            <span class="string">"1965-66     Wilt Chamberlain, Philadelphia 76ers\n"</span> +</span><br><span class="line">            <span class="string">"1964-65     Bill Russell, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1963-64     Oscar Robertson, Cincinnati Royals\n"</span> +</span><br><span class="line">            <span class="string">"1962-63     Bill Russell, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1961-62     Bill Russell, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1960-61     Bill Russell, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1959-60     Wilt Chamberlain, Philadelphia Warriors\n"</span> +</span><br><span class="line">            <span class="string">"1958-59     Bob Pettit, St. Louis Hawks\n"</span> +</span><br><span class="line">            <span class="string">"1957-58     Bill Russell, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1956-57     Bob Cousy, Boston Celtics\n"</span> +</span><br><span class="line">            <span class="string">"1955-56     Bob Pettit, St. Louis Hawks"</span>;</span><br></pre></td></tr></table></figure><h1 id="구현-비교"><a href="#구현-비교" class="headerlink" title="구현 비교"></a>구현 비교</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java 8의 Stream API를 활용해서 작성한 코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] lines = MVPS.split(<span class="string">"\\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> mvpCount = Stream.of(lines)</span><br><span class="line">            .collect(groupingBy(line -&gt; line.substring(<span class="number">12</span>, line.indexOf(<span class="string">','</span>)), counting()))</span><br><span class="line">            .entrySet().stream()</span><br><span class="line">            .sorted(comparingByValue(reverseOrder()))</span><br><span class="line">            .peek(e -&gt; out.println(e.getKey() + <span class="string">": "</span> + e.getValue()))</span><br><span class="line">            .mapToLong(Map.Entry::getValue)</span><br><span class="line">            .sum();</span><br><span class="line"></span><br><span class="line">    out.println(lines.length == mvpCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>큰 흐름은 <code>키(선수 이름) 추출</code>, <code>groupBy</code>, <code>수상횟수 집계</code>, <code>정렬</code>, <code>출력</code>, <code>전체 합계</code>로 구성된다.</p><p><strong>자바에는 튜플이 없다.</strong> 그래서 <code>groupingBy()</code>의 결과는 Map으로 collect되고 이 과정에서 최초의 스트림이 종결된다. 그리고 Map에서 <code>entrySet().stream()</code>을 통해 새 스트림을 만들고 정렬, 출력, 합계 등을 처리해야 한다. 따라서 <code>수상횟수 집계</code>와 <code>정렬</code> 사이에 스트림 생성이 하나 추가된다고 볼 수 있다.</p><p>값(MVP 수상횟수) 기준 내림차순 정렬은 <code>.sorted(comparingByValue(reverseOrder()))</code>로 깔끔하게 처리할 수는 있지만 조금 장황해보이기도 하다. 앞으로 살펴볼 다른 언어 구현체와 비교하면 실제로도 좀 길긴 하다.</p><p><code>peek()</code>이 있어서 스트림의 데이터를 완전 소비(consume)하지 않으면서도 출력할 수 있어서, 출력과 합계를 하나의 스트림으로 처리할 수 있다.</p><blockquote><p>한 줄 평: Stream API 덕에 깔끔한 구조로 작성할 수 있음에도 불구하고 메서드 이름이 길어서 전반적으로 장황해보인다.</p></blockquote><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><p>스칼라 버전은 <strong>Kevin Lee 님</strong>께서 작성해주신 걸 살짝 다듬었다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lines = <span class="type">MVPS</span>.split(<span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">val</span> mvpList = lines</span><br><span class="line">  .groupBy(_.drop(<span class="number">12</span>).takeWhile(_ != ','))  </span><br><span class="line">  .mapValues(_.size)</span><br><span class="line">  .toList</span><br><span class="line">  .sortBy(_._2)(<span class="type">Ordering</span>.<span class="type">Int</span>.reverse)</span><br><span class="line"></span><br><span class="line">println(mvpList.map &#123; <span class="keyword">case</span> (name, count) =&gt; <span class="string">s"<span class="subst">$name</span>: <span class="subst">$count</span>"</span> &#125;.mkString(<span class="string">"\n"</span>))</span><br><span class="line">println(lines.size == mvpList.map(_._2).sum)</span><br></pre></td></tr></table></figure><p>스칼라에서도 큰 흐름은 <code>키(선수 이름) 추출</code>, <code>groupBy</code>, <code>수상횟수 집계</code>, <code>정렬</code>, <code>출력</code>, <code>전체 합계</code>로 달라진 것은 없다. </p><p>키 추출이 자바와 조금 다르게 구현되었지만 장황한 점은 비슷해 보이고, 자바의 <code>groupingBy()</code>에서 키 별 분류와 수상횟수 집계를 함께 처리할 수 있었지만, 스칼라의 <code>groupBy()</code>는 키 별 분류만 가능하고 수상횟수의 집계는 <code>mapValues(_.size)</code>를 통해 따로 처리하는 점이 다르다.</p><p>정렬하기 전에 리스트로 만드는 과정(<code>toList</code>)이 하나 추가되는 것도 절차상으로는 <code>entrySet().stream()</code>으로 스트림을 새로 만드는 자바와 비슷하고, 정렬 과정도 자바와 비슷하다. </p><p><strong><code>(_.drop(12))</code>, <code>(_.size)</code>, <code>(_._2)</code> 같은 표현법으로 <code>-&gt;</code> 없이도 람다식을 표현할 수 있고, <code>getKey()</code>, <code>getValue()</code> 대신 <code>._1</code>, <code>._2</code>로 짧게 표현할 수 있어서 비슷한 구조임에도 자바보다 훨씬 간결해보인다.</strong> 하지만 <code>_</code>를 쓰지 않는다면 <code>map { case (name, count) =&gt; ... }</code>에서처럼 <code>=&gt;</code>뿐 아니라 <code>case</code>도 나오면서 조금 복잡해진다.</p><p>자바의 <code>peek()</code> 같은 메서드가 없어서인지 출력과 전체 합계를 하나의 스트림으로 처리하지 못하고 별도로 처리하는 것도 다르다.</p><blockquote><p>한 줄 평: <code>_</code>를 잘 쓰면 자바보다 훨씬 간결하게 짤 수 있다.</p></blockquote><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>코틀린 버전은 <strong>부종민 님</strong>께서 짜주신 걸 살짝 개선해봤다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> lines = MVPS.split(<span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">val</span> totalCount = lines</span><br><span class="line">        .groupingBy &#123; it.substring(<span class="number">12</span>, it.indexOf(<span class="string">','</span>)) &#125;</span><br><span class="line">        .eachCount()</span><br><span class="line">        .toList()</span><br><span class="line">        .sortedByDescending &#123; it.second &#125;</span><br><span class="line">        .onEach &#123; println(it) &#125;</span><br><span class="line">        .map &#123; it.second &#125;</span><br><span class="line">        .sum()</span><br><span class="line"></span><br><span class="line">    println(lines.size == totalCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코틀린은 흐름이 스칼라와 거의 동일하다.</p><p><code>substring()</code>은 자바와 동일하고 원한다면 스칼라처럼 <code>drop()</code>, <code>takeWhile()</code>을 쓸 수도 있다.</p><p><code>groupingBy {}</code> 에서는 스칼라와 마찬가지로 키 기준 분류만 가능하고 집계는 <code>eachCount()</code>로 따로 해줘야 한다. 정렬하기 전에 <code>toList()</code>로 리스트를 만드는 것도 동일하다. </p><p>스칼라에 튜플이 있다면 <strong>코틀린에는 <code>Pair</code>가 있다. 그래서 자바처럼 <code>getKey()</code>, <code>getValue()</code> 같은 메서드를 쓰지 않고 <code>it.first</code>, <code>it.second</code>와 같은 형식으로 짧게 표현 가능하다.</strong> 그래도 <code>first</code>나 <code>second</code>보다는 <code>_1</code>, <code>_2</code>처럼 더 짧게 표현 가능한 스칼라 쪽이 더 나아 보인다.</p><p>람다식을 <code>{ }</code>를 써서 인자로 받는 것에서 약간의 이질감이 느껴지지만, <strong><code>it</code>라는 built-in 키워드를 써서 <code>-&gt;</code> 없이도 람다식을 짧게 표현할 수 있는 점</strong>도 스칼라와 비슷하다.</p><p>자바의 <code>peek()</code>과 동일한 역할을 하는 <code>onEach()</code>가 있어서 출력과 전체 합계를 하나의 스트림에서 모두 처리할 수 있다는 점은 스칼라와 다르다.</p><blockquote><p>한 줄 평: 스칼라와 거의 비슷한 작성 방식과 간결함을 보여주면서도, 스칼라에 없는 <code>onEach()</code>를 가지고 있어서 자바의 장점도 가지고 있다.</p></blockquote><h2 id="뽕-맞은-자바-feat-jooL"><a href="#뽕-맞은-자바-feat-jooL" class="headerlink" title="뽕 맞은 자바(feat. jooL)"></a>뽕 맞은 자바(feat. jooL)</h2><p><strong>박성철 님</strong>께서 바닐라 자바는 쓰는 게 아니라고 하시면서 <code>jooL 라이브러리</code>(<a href="https://github.com/jOOQ/jOOL" target="_blank" rel="noopener">https://github.com/jOOQ/jOOL</a>) 를 사용해서 작성해주신 버전을 보면 ‘오~~ 이게 정녕 자바란 말씀입니까?’란 소리가 나올 정도로 감동적이다. 스칼라나 코틀린보다 더 간결하다!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] lines = MVPS.split(<span class="string">"\\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> mvpCount = Seq.of(lines)</span><br><span class="line">            .grouped(line -&gt; line.substring(<span class="number">12</span>, line.indexOf(<span class="string">','</span>)), counting()))</span><br><span class="line">            .sorted(t -&gt; - t.v2)</span><br><span class="line">            .peek(t -&gt; out.println(t.v1 + <span class="string">": "</span> + t.v2))</span><br><span class="line">            .sumLong(t -&gt; t.v2);</span><br><span class="line"></span><br><span class="line">    out.println(lines.length == mvpCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스칼라나 코틀린처럼 <strong>튜플이 있어서 <code>t.v2</code>같은 간략한 표현이 가능</strong>해졌고, 특히 <strong>값 기준 내림차순 정렬을 <code>sorted(t -&gt; - t.v2)</code>로 간단 명료하게 표현할 수 있는 점이 눈에 띈다.</strong> 그리고 groupBy 후에 <code>entrySet().stream()</code>이나 <code>toList</code> 없이도 클로저처럼 바로 정렬할 수 있다.</p><blockquote><p>한 줄 평: 바닐라 자바는 쓰는 게 아니다.</p></blockquote><h2 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h2><p>클로저는 버전이 두 개인데 <code>-&gt;&gt;</code> 매크로를 사용한 버전은 <strong>박상규 님</strong>께서 만들어주셨다.</p><p><strong>짧을 줄은 알았지만 생각보다 더 짧다..</strong></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">run!</span> prn </span><br><span class="line">    (<span class="name"><span class="builtin-name">sort-by</span></span> val &gt; </span><br><span class="line">        (<span class="name">frequencies</span> (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">subs</span> % <span class="number">12</span> (<span class="name">index-of</span> % <span class="string">","</span>)) lines))))</span><br></pre></td></tr></table></figure><p>클로저는 앞에서 다룬 언어와는 좀 다르게 Lisp 계열의 언어이며, 함수의 chaining이 아니라 nesting을 사용하므로 <strong>코드의 흐름이 의식의 흐름에 역행하는 것으로 보여서 이질감이 매우 크다.</strong> 하지만 이를 보완할 수 있는 방법이 있으니 바로 <strong><code>-&gt;&gt;</code> 매크로</strong>다.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> lines</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">subs</span> % <span class="number">12</span> (<span class="name">index-of</span> % <span class="string">","</span>)))</span><br><span class="line">  frequencies </span><br><span class="line">  (<span class="name"><span class="builtin-name">sort-by</span></span> val &gt;)</span><br><span class="line">  (<span class="name">run!</span> prn))</span><br></pre></td></tr></table></figure><p>이렇게 <strong><code>-&gt;&gt;</code> 매크로를 사용하면 클로저 특유의 간결함을 유지하면서도 의식의 흐름과 코드 흐름의 불일치를 극복할 수도 있다.</strong></p><p><code>map</code>은 다른 언어와 다를 게 없다. <code>#()</code>를 써서 익명 함수를 만들 수 있고, <code>%</code>로 익명 함수의 인자를 표현할 수 있는데 <code>%1</code>, <code>%2</code>와 같이 두 개 이상의 인자도 표현 가능하다.</p><p><code>frequencies</code><br><code>groupingBy(key, counting())</code><br><code>groupBy(key).mapValues(_.size)</code><br><code>groupingBy { key }.eachCount()</code></p><p>위 네 가지는 모두 동일한 역할을 담당하는데, 코드의 양으로 보나 의미 전달력으로 보나 클로저의 <code>frequencies</code>에 가장 높은 점수를 줄 수 있겠다.</p><p>코드에 나타나지 않은 가장 큰 차이점이 하나 있다. 자바, 스칼라, 코틀린에서는 groupBy를 한 후 다시 리스트로 만들어줘야 정렬을 할 수가 있는데, 클로저에서는 <code>frequencies</code>가 반환하는 <strong>맵 자체를 대상으로 값 기준 정렬이 가능하다.</strong></p><p><code>sort-by val &gt;</code><br><code>sorted(comparingByValue(reverseOrder()))</code><br><code>sortBy(_._2)(Ordering.Int.reverse)</code><br><code>sortedByDescending { it.second }</code></p><p>위 네 가지도 모두 동일한 역할을 하는데, 이번에도 클로저의 <code>sort-by val &gt;</code>에 가장 높은 점수를 줄 수 있겠다. <strong>값(val) 기준 내림차순(&gt;)으로 정렬하라(sort-by)는 의미를 <code>sort-by val &gt;</code>로 정말 간단 명료하게 표현</strong>하고 있다.</p><p>다만 클로저도 스칼라와 마찬가지로 자바의 <code>peek()</code>이나 코틀린의 <code>onEach()</code> 같은 기능의 함수가 없어서 출력과 합계를 하나의 스트림에서 처리하지 못하는 것은 단점이다. 스칼라처럼 Lazy Sequence를 변수에 담아두고 출력에 사용하고, 합계 계산에 사용하면 될텐데 그 부분은 아예 작성을 못 했다. ㅋㅋ</p><blockquote><p>한 줄 평: 간결함으로는 타의 추종을 불허하지만, Lisp에 익숙해지기는 쉽지 않다.</p></blockquote><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>스택오버플로우 기준 올해까지 4년 연속 가장 사랑받는 언어 러스트도 한 번 시도해봤다.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mvps_count = MVPS.lines()</span><br><span class="line">        .map(|line| &amp;line[<span class="number">12</span>..line.find(<span class="string">','</span>).unwrap_or(line.len())])</span><br><span class="line">        .into_iter()</span><br><span class="line">        .sorted()</span><br><span class="line">        .group_by(|name| *name)</span><br><span class="line">        .into_iter()</span><br><span class="line">        .map(|(key, group)| (key, group.count()))</span><br><span class="line">        .sorted_by(|a, b| (b.<span class="number">1</span>).cmp(&amp;a.<span class="number">1</span>))</span><br><span class="line">        .inspect(|(key, count)| <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, key, count))</span><br><span class="line">        .map(|(_key, count)| count)</span><br><span class="line">        .fold(<span class="number">0</span> <span class="keyword">as</span> <span class="built_in">usize</span>, |a, b| a + b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, MVPS.lines().count() == mvps_count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>러스트는.. 자세한 설명은 생략.. 하고 싶지만..</p><p>다른 언어와 가장 크게 다른 점은 <strong><code>group_by</code>전에 반드시 <code>sorted()</code>를 해줘야 제대로 키 기준 분류가 작동</strong>한다는 점이다. 예를 들어 <code>[a, a, b, a, c, a]</code>에 <code>group_by</code>와 <code>map</code>으로 키 별 분류와 집계를 적용하면 <code>[(a, 4), (b, 1), (c, 1)]</code>이 나올 것이 예상되고 다른 언어는 모두 예상대로 동작하지만, 러스트는 <code>[(a, 2), (b, 1), (a, 1), (c, 1), (a, 1)]</code>라는 결과를 반환한다. 따라서 키 기준으로 먼저 정렬을 해줘야 예상대로 동작하게 된다.</p><p>자바의 <code>peek()</code>, 코틀린의 <code>onEach()</code>처럼 러스트에도 <code>inspect()</code>가 있어서 출력과 전체 합계를 하나의 스트림에서 처리할 수 있다.</p><blockquote><p>한 줄 평: 러스트는 사랑스러울지언정 어렵고 어지럽다.</p></blockquote><h1 id="문서-비교"><a href="#문서-비교" class="headerlink" title="문서 비교"></a>문서 비교</h1><p>사실 다른 언어는 잘 모르는 채로 시도해봤던 거라 검색과 문서에 크게 의존할 수 밖에 없었다. 개인 취향에 따라 모두 다를테지만, 이왕 비교한 거 구현 말고 문서도 구경하기 수준으로 비교해보자. 그래도 공정한 비교를 위해 <code>groupBy</code>를 설명하는 문서로 비교한다.</p><h2 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h2><p><img src="https://i.imgur.com/NyfU0Gq.png" alt="Imgur"></p><p>무시무시한 저 메서드 시그너처로 시작해서 구구절절 설명을 이어간다. 그래도 이 <code>groupingBy</code>는 고맙게도 실제 사용 예제를 하나 던져주셨는데 모든 메서드에 대해 이런 예제가 제공되는 것은 아니다. 그래서 예제가 풍부하게 제공되는 <a href="http://www.baeldung.com" target="_blank" rel="noopener">www.baeldung.com</a> 같은 사이트를 많이 참고하게 된다.</p><h2 id="Scala-1"><a href="#Scala-1" class="headerlink" title="Scala"></a>Scala</h2><p><img src="https://i.imgur.com/iBoGbKT.png" alt="Imgur"></p><p>스칼라는 문서도 간결하다. 너무 간결해서 예제도 없다..</p><h2 id="Kotlin-1"><a href="#Kotlin-1" class="headerlink" title="Kotlin"></a>Kotlin</h2><p><img src="https://i.imgur.com/WVi56uS.png" alt="Imgur"></p><p>코틀린은 <strong>예제를 단순한 텍스트가 아니라 실행 가능한 환경과 함께 제공</strong>한다!! 그래서 요리조리 직접 바꿔가며 실행 결과를 바로 확인해 볼 수 있다!! 이런 참신함에는 높은 점수를 주고 싶다. 그런데 예제가 풍부하지는 않다.</p><p>위에 작성한 코드에는 <code>groupBy</code>가 키 분류만 가능하게 되어 있는데 문서를 보니 키 분류뿐 아니라 항목 집계도 가능한 걸로 보인다. 하지만 관련 예제가 없어서 어떻게 하면 원하는 대로 바꿀 수 있을지 바로 알 수는 없었다.</p><h2 id="Clojure-1"><a href="#Clojure-1" class="headerlink" title="Clojure"></a>Clojure</h2><p><img src="https://i.imgur.com/VWlC5NZ.png" alt="Imgur"></p><p>클로저는 문서도 가장 간결하다. </p><p>그런데 그보다 더 중요한 것은 <strong>다른 언어 문서들과 달리 공식 문서가 오픈 방식</strong>이라는 것이다. 로그인만 하면 사용자가 직접 다양한 예제를 추가할 수 있게 되어 있을뿐 아니라 화면에는 안 나왔지만 질의 응답도 가능하게 완전히 열려있다. </p><p>덕분에 클로저를 거의 모르는 나같은 문외한도 MVP 수상횟수 집계 예제 정도는 클로저 문서 사이트만으로도 그럭저럭 짤 수 있었다. 실용성 면에서는 가장 높은 점수를 줄 만하다.</p><h2 id="Rust-1"><a href="#Rust-1" class="headerlink" title="Rust"></a>Rust</h2><p><img src="https://i.imgur.com/W1rg6ZV.png" alt="Imgur"></p><p>일단 위 예제에서 사용한 <code>group_by</code>는 러스트 자체에 포함된 것은 아니고, <code>itertools</code>라는 크레이트(crate, 그냥 라이브러리 라고 이해해도 크게 틀리지 않음)에서 제공하는 것인데, 문서의 포맷은 러스트의 공식 문서 사이트와 동일하다.</p><p>적절한 설명과 함께 예제가 제공된다. 예제에 주석으로 고마운 설명이 달려있긴 하지만 클로저처럼 오픈 방식이 아니라서 예제가 다양하지는 않다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;재미로-보는-언어별-스트림-처리-비교&quot;&gt;&lt;a href=&quot;#재미로-보는-언어별-스트림-처리-비교&quot; class=&quot;headerlink&quot; title=&quot;재미로 보는 언어별 스트림 처리 비교&quot;&gt;&lt;/a&gt;재미로 보는 언어별 스트림 처리 비교&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Language" scheme="http://homoefficio.github.io/categories/Language/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="자바" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="Stream" scheme="http://homoefficio.github.io/tags/Stream/"/>
    
      <category term="스트림" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%ED%8A%B8%EB%A6%BC/"/>
    
      <category term="Scala" scheme="http://homoefficio.github.io/tags/Scala/"/>
    
      <category term="Kotlin" scheme="http://homoefficio.github.io/tags/Kotlin/"/>
    
      <category term="Clojure" scheme="http://homoefficio.github.io/tags/Clojure/"/>
    
      <category term="Rust" scheme="http://homoefficio.github.io/tags/Rust/"/>
    
      <category term="groupBy" scheme="http://homoefficio.github.io/tags/groupBy/"/>
    
      <category term="groupingBy" scheme="http://homoefficio.github.io/tags/groupingBy/"/>
    
      <category term="sort by value" scheme="http://homoefficio.github.io/tags/sort-by-value/"/>
    
      <category term="map" scheme="http://homoefficio.github.io/tags/map/"/>
    
      <category term="reduce" scheme="http://homoefficio.github.io/tags/reduce/"/>
    
      <category term="fold" scheme="http://homoefficio.github.io/tags/fold/"/>
    
      <category term="peek" scheme="http://homoefficio.github.io/tags/peek/"/>
    
      <category term="onEach" scheme="http://homoefficio.github.io/tags/onEach/"/>
    
      <category term="inspect" scheme="http://homoefficio.github.io/tags/inspect/"/>
    
      <category term="Tuple" scheme="http://homoefficio.github.io/tags/Tuple/"/>
    
      <category term="Pair" scheme="http://homoefficio.github.io/tags/Pair/"/>
    
      <category term="it" scheme="http://homoefficio.github.io/tags/it/"/>
    
      <category term="_" scheme="http://homoefficio.github.io/tags//"/>
    
      <category term="jooL" scheme="http://homoefficio.github.io/tags/jooL/"/>
    
      <category term="reference doc" scheme="http://homoefficio.github.io/tags/reference-doc/"/>
    
      <category term="스칼라" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%EC%B9%BC%EB%9D%BC/"/>
    
      <category term="코틀린" scheme="http://homoefficio.github.io/tags/%EC%BD%94%ED%8B%80%EB%A6%B0/"/>
    
      <category term="클로저" scheme="http://homoefficio.github.io/tags/%ED%81%B4%EB%A1%9C%EC%A0%80/"/>
    
      <category term="러스트" scheme="http://homoefficio.github.io/tags/%EB%9F%AC%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="변환" scheme="http://homoefficio.github.io/tags/%EB%B3%80%ED%99%98/"/>
    
      <category term="집계" scheme="http://homoefficio.github.io/tags/%EC%A7%91%EA%B3%84/"/>
    
      <category term="튜플" scheme="http://homoefficio.github.io/tags/%ED%8A%9C%ED%94%8C/"/>
    
      <category term="페어" scheme="http://homoefficio.github.io/tags/%ED%8E%98%EC%96%B4/"/>
    
      <category term="값으로 정렬" scheme="http://homoefficio.github.io/tags/%EA%B0%92%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A0%AC/"/>
    
      <category term="값 기준 정렬" scheme="http://homoefficio.github.io/tags/%EA%B0%92-%EA%B8%B0%EC%A4%80-%EC%A0%95%EB%A0%AC/"/>
    
  </entry>
  
  <entry>
    <title>JPA 일대다 단방향 매핑 잘못 사용하면 벌어지는 일</title>
    <link href="http://homoefficio.github.io/2019/04/28/JPA-%EC%9D%BC%EB%8C%80%EB%8B%A4-%EB%8B%A8%EB%B0%A9%ED%96%A5-%EB%A7%A4%ED%95%91-%EC%9E%98%EB%AA%BB-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EB%B2%8C%EC%96%B4%EC%A7%80%EB%8A%94-%EC%9D%BC/"/>
    <id>http://homoefficio.github.io/2019/04/28/JPA-일대다-단방향-매핑-잘못-사용하면-벌어지는-일/</id>
    <published>2019-04-28T01:30:35.000Z</published>
    <updated>2019-05-09T13:03:14.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JPA-일대다-단방향-매핑-잘못-사용하면-벌어지는-일"><a href="#JPA-일대다-단방향-매핑-잘못-사용하면-벌어지는-일" class="headerlink" title="JPA 일대다 단방향 매핑 잘못 사용하면 벌어지는 일"></a>JPA 일대다 단방향 매핑 잘못 사용하면 벌어지는 일</h1><p><code>Parent : Child = 1 : N</code> 의 관계가 있으면 일대다 단방향으로 매핑하는 것보다 일대다 양방향으로 매핑하는 것이 좋다. 왜 그런지 구체적으로 살펴보자.</p><h1 id="조인테이블-방식의-일대다-단방향-매핑"><a href="#조인테이블-방식의-일대다-단방향-매핑" class="headerlink" title="조인테이블 방식의 일대다 단방향 매핑"></a>조인테이블 방식의 일대다 단방향 매핑</h1><p>그런데 어떤 특별한 이유가 있을 수도 있고, 그냥 별 생각없이 작성된 레거시 일 수도 있고, 아니면 JPA에 살짝 서툴러서도 있고, 여튼 다음과 같이 직관적으로 단순하게 <strong><code>@OneToMany</code>만 달랑 붙여서 매핑하면 조인테이블 방식의 일대다 단방향 방식으로 매핑된다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String name, List&lt;Child&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.children.addAll(children);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Child</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 작성하면 조인테이블인 <code>parent_children</code>라는 테이블이 새로 생긴다. 뭐 테이블 하나 생기면 어때.. 큰일 나겠어? 라고 생각할 수도 있지만, <strong><code>children</code>이 많지 않을 때만 큰 일이 안 나고, 많으면 제법 큰 일이 난다.</strong></p><h1 id="시나리오"><a href="#시나리오" class="headerlink" title="시나리오"></a>시나리오</h1><p>위와 같이 매핑된 상태에서 다음과 같은 간단한 시나리오를 생각해보자.</p><ol><li><code>parent</code>가 10개의 Child를 포함하는 <code>children</code>을 가진다.</li><li><code>parent.children</code>에서 Child의 id가 1, 2인 것 2개만 삭제한다.</li></ol><p>1번은 뭐 처음 생성이니 <code>parent</code> 1개에 대해 <code>parent</code> 테이블에 insert 1회, <code>children</code> 10개에 대해 <code>child</code> 테이블에 insert 10회 실행된다. 그리고 조인테이블 방식으로 동작하므로 <code>parent_children</code> 테이블에도 insert 10회 실행된다.</p><p>2번에서 <code>children</code> 중에서 2개를 지우므로 <code>parent_children</code> 테이블에서 delete 2회 실행되고, <code>orphanRemoval = true</code>로 설정되어 있으므로 <code>child</code> 테이블에서 delete 2회 실행될 것이다.</p><p>하지만 직접 실행해보면 2번은 예상과 완전히 다르게 동작한다!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToManyRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> ParentRepository parentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Parent parent1 = <span class="keyword">new</span> Parent(<span class="string">"parent 1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            parent1.getChildren().add(</span><br><span class="line">                    <span class="keyword">new</span> Child(<span class="string">"child "</span> + i)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Parent dbParent = <span class="keyword">this</span>.parentRepository.saveAndFlush(parent1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Child&gt; children = dbParent.getChildren();</span><br><span class="line">        children.removeIf(child -&gt; </span><br><span class="line">                child.getId() == <span class="number">1L</span> || child.getId() == <span class="number">2L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h1><p><code>parent_children</code> 테이블에서 delete 2회, <code>orphanRemoval = true</code>로 설정되어 있으므로 <code>child</code> 테이블에서 delete 2회 실행될 것으로 예상했지만 실제로는,</p><ul><li><strong><code>parent.children</code> 10개 모두 delete 되면서 <code>parent_children</code> 테이블에서 <code>children_id</code>가 1, 2인 것을 제외한 8개의 레코드에 대해 모두 8회의 insert가 실행</strong>되고, </li><li>마지막에 <code>child</code> 테이블에서 2회의 delete가 실행된다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">parent</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">parent</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">2</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">3</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">4</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">5</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">6</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">7</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">8</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">9</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">10</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">3</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">5</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">6</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">7</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">8</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">9</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">10</span>]</span><br><span class="line">*****************************</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> parent_children <span class="keyword">where</span> parent_id=?  &lt;== 헉!! 형이 왜 여기서 나와!!</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">3</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">5</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">6</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">7</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">8</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">9</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> parent_children (parent_id, children_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">10</span>]</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">child</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">child</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>앞에서 <code>children</code>의 갯수가 많지 않을 때만 큰 일이 안 생긴다고 한 이유가 여기에 있다. 위의 사례에서는 <code>children</code>이 10개 밖에 되지 않으므로 insert를 10개 쯤 한다고 해도 사실 거의 티가 나지 않는다. 하지만 10개가 아니라 1000개, 10000개 그 이상이라면? <strong>고작 레코드 2개 삭제하려는 것 뿐인데 1000회, 10000회의 insert가 실행된다.</strong> ㄷㄷㄷ</p><p>그런데 왜 이렇게 동작하는 걸까?</p><h1 id="나름의-사연"><a href="#나름의-사연" class="headerlink" title="나름의 사연"></a>나름의 사연</h1><p>실행한 후 <code>parent_children</code> 테이블을 보면 다음과 같다.</p><table><thead><tr><th>parent_id</th><th>children_id</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>1</td><td>4</td></tr><tr><td>1</td><td>5</td></tr><tr><td>1</td><td>6</td></tr><tr><td>1</td><td>7</td></tr><tr><td>1</td><td>8</td></tr><tr><td>1</td><td>9</td></tr><tr><td>1</td><td>10</td></tr></tbody></table><p>나: 뭐야, <code>1 | 1</code>인 행이랑 <code>1 | 2</code>인 행 2개만 지울 수 있었을 것 같은데, 왜 <code>parent_id</code>가 1인 걸 몽땅 지워?</p><p>Hibernate: 허허.. 그게 말이야.. 허허.. 테이블로 보기엔 저런데.. 허허.. <strong>일대다 단방향이잖아.. 허허.. 그래서.. 허허.. <code>parent_id</code>가 1이라는 것을 개별 행에 대한 조건으로 줄 수가 없어..</strong> 허허.. 그래서 <code>parent_id</code>가 1인 걸 몽땅 지우고 다시 채웠어.. 허허..</p><p>나: 뭐래냐..</p><p>이것도 말보다 코드가 더 쉽고 명확한 케이스다. id가 1, 2인 <code>child</code>를 삭제하는 코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Child&gt; children = dbParent.getChildren();</span><br><span class="line">children.removeIf(child -&gt; </span><br><span class="line">        child.getId() == <span class="number">1L</span> || child.getId() == <span class="number">2L</span>);  <span class="comment">// &lt;-- 여기!!</span></span><br></pre></td></tr></table></figure><p>위에 <code>여기</code>로 표시한 부분에서 <code>parent_id</code>에 대한 조건을 줄 수가 없다. 왜냐고? 위에 Hibernate가 얘기해 준대로 <strong>일대일 단방향이라서 <code>child</code>는 <code>parent</code>를 모른다. 따라서 <code>parent_id</code>를 <code>children</code>의 개별 행에 대한 삭제 조건으로 지정할 수가 없다.</strong></p><p>대신에 <code>dbParent.getChildren()</code>의 <code>dbParent</code>에는 <code>parent_id</code>가 1이라는 정보가 있다. 그래서 <strong><code>children</code>를 개별 행 단위로 삭제할 수는 없지만 <code>parent_children</code> 테이블에서는 <code>parent_id</code>가 1인 행을 모두 삭제할 수는 있다.</strong> 그래서 <code>parent_id</code>가 1인 레코드를 모두 delete 한 후에 다시 insert를 반복하는 노가다를 한 것이다.</p><p>결국 Hibernate는 주어진 환경에서 최선을 다한 셈이고 아무 죄가 없다. 모두 delete 후 다시 모두 insert 반복으로만 해결할 수 있게 코드를 짠 사람이 잘못이다.</p><h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>이제 문제를 바로잡아보자. 조인테이블 방식의 일대다 단방향 매핑때문에 <code>children</code> 쪽에서 행 단위로 <code>parent_id</code>를 알 수 없다는 게 원인이었으므로, <strong>어떻게든 <code>children</code> 쪽에서 행 단위로 <code>parent_id</code>를 알 수 있게 해주면 된다. 즉 테이블 상에서 <code>children</code> 쪽에 <code>parent_id</code> 컬럼이 추가되도록 매핑하면 된다.</strong></p><p>방법은 두 가지가 있다. 조인테이블이 아닌 조인컬럼 방식의 일대다 단방향 매핑과 일대다 양방향 매핑이다.</p><p>먼저 조인컬럼 방식의 일대다 단방향 매핑부터 알아보자.</p><h2 id="조인컬럼-방식의-일대다-단방향-매핑"><a href="#조인컬럼-방식의-일대다-단방향-매핑" class="headerlink" title="조인컬럼 방식의 일대다 단방향 매핑"></a>조인컬럼 방식의 일대다 단방향 매핑</h2><p>이 방식은 Parent에 단 한 줄의 코드만 추가하면 된다. 물론 예제 코드에서만..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name = <span class="string">"parent_id"</span>)  <span class="comment">// &lt;-- 여기!!</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>위와 같이 Parent 엔티티에 <code>@JoinColumn(name = &quot;parent_id&quot;)</code>만 추가해주면 된다.</p><p>이제 조인테이블 방식이 아니므로 <code>parent_children</code> 테이블은 필요 없고, <code>child</code> 테이블에 <code>parent_id</code> 컬럼이 추가되고, <code>child</code> 테이블의 행 단위로 <code>parent_id</code>를 알 수 있으므로 몽창 delete 후 몽창 insert 하는 노가다는 발생하지 않고 id가 1, 2인 <code>child</code>만 삭제할 수 있을 것이다.</p><p>실행해보면 다음과 같다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">parent</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">parent</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">2</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">3</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">4</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">5</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">6</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">7</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">8</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">9</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">10</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">3</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">5</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">6</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">7</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">8</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">9</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">10</span>]</span><br><span class="line">*****************************</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=<span class="literal">null</span> <span class="keyword">where</span> parent_id=? <span class="keyword">and</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> <span class="keyword">set</span> parent_id=<span class="literal">null</span> <span class="keyword">where</span> parent_id=? <span class="keyword">and</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">child</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">child</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>오 역시나 <code>*****</code> 아래에 10번의 불필요한 insert 가 모두 사라지고 맨 아래 delete 2회만 실행된 것을 확인할 수 있다.</p><p>그런데 <code>*****</code> 바로 위에 10번의 update는 또 왜 실행된거지?</p><p>이유는 이번에도 단방향이기 때문이다. <strong>조인컬럼 방식으로 변환하면서 <code>child</code> 테이블에 <code>parent_id</code> 컬럼이 추가되기는 했지만, 단방향이라서 <code>child</code>는 <code>parent</code>의 존재를 모르므로 <code>parent_id</code>의 값을 알 수는 없다.</strong> 뭐랄까 냉장고는 사놨는데 뭘로 채워야할지 모르는..</p><p>그래서 <strong>개별 행 단위로는 <code>parent_id</code> 컬럼에 값이 없는 채로 insert 되고, insert 된 10개의 행의 <code>parent_id</code> 컬럼에는 <code>dbParent.getChildren()</code>에서 알아낼 수 있는 <code>parent_id</code> 값을 update 를 통해 설정</strong>한다. 하지만 이건 최초에 데이터가 세팅될 때 1회만 그런거고, 이렇게 <code>parent_id</code> 값이 저장된 후에는 삭제를 원하는 레코드만 삭제할 수 있게 되므로 조인테이블 방식의 문제는 해결했다고 볼 수 있다.</p><p>이제 <code>*****</code> 아래에 실행된 쿼리를 살펴보자. update가 2회, delete가 2회 실행됐다. delete 2회만 실행되기를 예상했지만 update 2회가 먼저 실행됐다. 이 부분은 자세히 살펴볼 필요가 있다.</p><p><strong>신동민 님의 도움</strong>으로 정확히 알게 되었는데, 일대다 조인컬럼 방식에서 <code>children.remove(child)</code>를 실행해서 <code>children</code> 쪽의 레코드 삭제를 시도하면 실제 쿼리는 delete가 아니라 해당 레코드의 <code>parent_id</code>에 null을 저장하는 update가 실행된다. 의도와 다르게 동작한 것 같아서 이상해보이지만, 일대다 단방향 매핑에서 <strong><code>children.remove(child)</code>는 사실 <code>child</code> 자체를 삭제하라는 게 아니라 <code>child</code>가 <code>parent</code>의 <code>children</code>의 하나로 존재하는 관계를 remove 하라는 것이다. 따라서 <code>child</code> 자체를 delete 하는 게 아니라 <code>parent_id</code>에 null 값을 넣는 update를 실행하는 게 정확히 맞다.</strong> 이 부분의 코드도 신동민 님이 알려주셨는데 <a href="https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java" target="_blank" rel="noopener">여기</a>에서 확인할 수 있다. </p><p>결국 이번에도 Hibernate는 정확히 동작한다. 관계의 remove를 레코드의 delete로 넘겨짚은 사람이 문제지..</p><p><strong>그럼 마지막에 실행된 2회의 delete는 뭘까? 이건 <code>orphanRemoval = true</code>로 설정되어 있기 때문에 2개의 <code>child</code> 자체를 delete 한 것</strong>이다.</p><p>그런데 사실 Hibernate가 어찌 동작하든 간에, 데이터 처리 관점에서 보자면 원했던 것은 2개의 레코드를 delete 하는 것이었는데, 2회의 update와 2회의 delete가 실행되는 것은 여전히 불필요한 작업이 추가된 것 같다. 하지만 <strong>이를 불필요한 오버헤드라고 부르는 것은 적합하지 않아 보인다.</strong> </p><p><strong>RDB 관점에서 보면 테이블 사이의 관계는 언제나 양방향이지만 JPA의 엔티티 사이의 관계는 단방향과 양방향이 분명히 다르다.</strong> 따라서 RDB 관점에서야 이걸 오버헤드라고 부를 수도 있겠지만, <strong>단방향으로 매핑된 JPA에서는 레코드의 delete가 아니라 관계의 remove로 동작하는 것이 정확하고 따라서 delete가 아니라 update로 실행되는 것이 맞으므로 불필요한 오버헤드라고 부르는 것은 적합하지 않다.</strong></p><p>그래도 여전히 2회의 delete만으로 끝날 일을 2회의 update와 <code>orphanRemoval</code>을 동원해서 2회의 delete로 실행하는 것이 마음에 안 든다면, <strong>RDB 처럼 양방향으로 만들어 주면 JPA도 RDB 처럼 2회의 delete만으로 끝낸다.</strong> 그럼 이제 일대다 양방향 매핑을 살펴보자.</p><p>그 전에, 앞에서 조인커럼 방식으로의 전환을 단 한 줄로 적용가능 한 것은 예제 코드라서 가능하다고 했는데, 구체적으로 말하면 <code>*****</code> 위에서 update로 값을 자동 세팅해주는 것도 예제 코드라서, <strong><code>spring.jpa.properties.hibernate.hbm2ddl.auto</code> 옵션을 <code>create</code> 등 마음대로 줄 수 있기 때문에 가능한 것이고, 실 운영 환경에서는 저렇게 수행할 수 없다.</strong></p><p>운영 환경에서는 <code>child</code> 테이블에 <code>parent_id</code> 컬럼도 직접 추가해줘야 하고 다음과 같이 update 쿼리를 만들어서 <strong>기존에 <code>parent_children</code> 테이블에 있던 값을 기준으로 <code>child</code> 테이블의 <code>parent_id</code> 컬럼에 수동으로 입력해줘야 한다.</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">child</span> a</span><br><span class="line"><span class="keyword">set</span> a.parent_id = (</span><br><span class="line">    <span class="keyword">select</span> b.parent_id </span><br><span class="line">    <span class="keyword">from</span> parent_children b</span><br><span class="line">    <span class="keyword">where</span> a.id = b.children_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="일대다-양방향-매핑"><a href="#일대다-양방향-매핑" class="headerlink" title="일대다 양방향 매핑"></a>일대다 양방향 매핑</h2><p>앞에서 살펴본 것처럼 RDB와 똑같이 동작하기를 원한다면 JPA에서도 양방향으로 매핑을 해줘야 한다. 조인컬럼 방식으로 전환할 때보다는 조금 손이 더 가지만 작업량은 그리 많지 않다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mappedBy 추가</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"parent"</span>, cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String name, List&lt;Child&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.children.addAll(children);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent 필드 추가</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"parent_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Parent parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Child</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 생성자에 Parent 추가</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String name, Parent parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToManyRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> ParentRepository parentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Parent parent1 = <span class="keyword">new</span> Parent(<span class="string">"parent 1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            parent1.getChildren().add(</span><br><span class="line">                    <span class="keyword">new</span> Child(<span class="string">"child "</span> + i, parent1)  <span class="comment">// 생성 시 parent1 추가</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        Parent dbParent = <span class="keyword">this</span>.parentRepository.saveAndFlush(parent1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Child&gt; children = dbParent.getChildren();</span><br><span class="line">        children.removeIf(child -&gt; </span><br><span class="line">                child.getId() == <span class="number">1L</span> || child.getId() == <span class="number">2L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행 결과는 다음과 같다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">parent</span> (<span class="keyword">name</span>) <span class="keyword">values</span> (?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">parent</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">1</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">2</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">3</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">4</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">5</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">6</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">7</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">8</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">9</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">child</span> (<span class="keyword">name</span>, parent_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">VARCHAR</span>] - [<span class="keyword">child</span> <span class="number">10</span>]</span><br><span class="line">binding parameter [<span class="number">2</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line">*****************************</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">child</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">child</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br><span class="line">binding parameter [<span class="number">1</span>] <span class="keyword">as</span> [<span class="built_in">BIGINT</span>] - [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>오! 처음에 원했던 그대로 delete 만 2회 실행될 뿐 아무런 오버헤드도 발생하지 않는다!</p><p><strong>일대다 양방향 매핑과 일대다 단방향 조인컬럼 매핑의 결과로 나타나는 테이블 구조는 두 방식에서 모두 동일</strong>하다. <strong>두 방식 모두 <code>child</code>에 <code>parent_id</code> FK 컬럼</strong>을 두게 된다. </p><p>일대다 양방향 매핑과 일대다 단방향 조인컬럼 매핑의 차이점은 다음과 같다.</p><ul><li>조인컬럼 일대다 단방향 매핑은 <code>child</code>가 <code>parent</code>를 모르기 때문에, 앞에서 설명한 것처럼 1회성이긴 하지만 <code>parent_id</code> 값을 저장하기 위해 update 오버헤드가 발생한다.</li><li>일대다 양방향 매핑은 <code>child</code>가 <code>parent</code>를 알기 때문에 불필요한 오버헤드가 발생하지 않는다.</li></ul><p>다만 <strong>일대다 양방향 매핑은 도메인 로직 상에서 <code>parent</code>를 몰라도 되는 <code>child</code>에게 굳이 <code>parent</code>를 강제로 알게 만드는 것이 단점</strong>인데, 이 단점은 <strong><code>parent</code>에 대한 public getter 메서드를 만들지 않거나 또는 극단적으로 아예 <code>parent</code>에 대한 getter 메서드를 만들지 않는 방식으로 보완할 수 있다.</strong></p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><blockquote><p>일대다 단방향 매핑은 직관적으로는 단순해서 좋지만,<br>조인테이블 방식은 insert가, 조인컬럼 방식은 1회성이긴 하지만 update가 오버헤드로 작용한다.</p><p>따라서 1:N에서 N이 큰 상황에서는,</p><ul><li>오버헤드가 없는 일대다 양방향 매핑을 사용하는 것이 가장 좋고,  </li><li>그 다음은 일대다 단방향 조인컬럼 방식,  </li><li>그리고 parent 쪽에 <code>@OneToMany</code>만 달랑 붙이는 일대다 단방향 조인테이블 방식은 사용하지 않는 것이 좋다.</li></ul><p>더 축약하자면, <strong>1:N에서 N이 클 때는 웬만하면 일대다 양방향 매핑을 사용하자.</strong></p></blockquote><h1 id="부록-응용편"><a href="#부록-응용편" class="headerlink" title="부록 - 응용편"></a>부록 - 응용편</h1><p>다음과 같이 하나의 Parent에서 2개의 Child에 대해 1:1, 1:N 연관관계 매핑이 필요하면 어떻게 할까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 이게 추가된다면?</span></span><br><span class="line">    <span class="keyword">private</span> Child singleChild;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String name, Child singleChild)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.singleChild = singleChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String name, Child singleChild, List&lt;Child&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.singleChild = singleChild;</span><br><span class="line">        <span class="keyword">this</span>.children.addAll(children);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우에는 일대일 단방향 매핑을 위해 다음과 같이 Parent 에 <code>@JoinColumn</code>을 지정해서 Child를 위한 FK 컬럼을 추가하면, 일대일 단방향 + 일대다 양방향을 함께 쓸 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이게 추가된다면?</span></span><br><span class="line"><span class="comment">//// 일대일 단방향을 쓰되 Child를 가리키는 FK 컬럼을 Parent에 둔다</span></span><br><span class="line"><span class="meta">@OneToOne</span></span><br><span class="line"><span class="meta">@JoinColumn</span>(name = <span class="string">"single_child_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Child singleChild;</span><br></pre></td></tr></table></figure><p>그럼 <code>parent</code> 테이블은 다음과 같이 되고,</p><p><code>id | name | single_child_id</code></p><p><code>child</code> 테이블은 다음과 같이 되고, <code>single_child</code>와 <code>children</code>에 해당하는 데이터가 모두 <code>child</code> 테이블에 저장된다.</p><p><code>id | name | parent_id</code></p><p>그런데 이렇게 한 테이블에 저장되면 혼동이 될 수도 있을 것 같아 걱정이 된다.</p><p>하지만, <strong>일대일 단방향에 의해 저장된 레코드에만 <code>parent_id</code> 값이 <code>NULL</code>인 상태가 되고,</strong><br><strong>일대다 양방향에 의해 저장된 레코드에는 <code>parent_id</code>에 정상적인 값이 들어가므로 구분 가능</strong>하며 혼동 없이 사용할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JPA-일대다-단방향-매핑-잘못-사용하면-벌어지는-일&quot;&gt;&lt;a href=&quot;#JPA-일대다-단방향-매핑-잘못-사용하면-벌어지는-일&quot; class=&quot;headerlink&quot; title=&quot;JPA 일대다 단방향 매핑 잘못 사용하면 벌어지는 일&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="JPA" scheme="http://homoefficio.github.io/tags/JPA/"/>
    
      <category term="Spring Data JPA" scheme="http://homoefficio.github.io/tags/Spring-Data-JPA/"/>
    
      <category term="Java Persistence API" scheme="http://homoefficio.github.io/tags/Java-Persistence-API/"/>
    
      <category term="ORM" scheme="http://homoefficio.github.io/tags/ORM/"/>
    
      <category term="Object Relation Mapping" scheme="http://homoefficio.github.io/tags/Object-Relation-Mapping/"/>
    
      <category term="Hibernate" scheme="http://homoefficio.github.io/tags/Hibernate/"/>
    
      <category term="하이버네이트" scheme="http://homoefficio.github.io/tags/%ED%95%98%EC%9D%B4%EB%B2%84%EB%84%A4%EC%9D%B4%ED%8A%B8/"/>
    
      <category term="1:N" scheme="http://homoefficio.github.io/tags/1-N/"/>
    
      <category term="OneToMany" scheme="http://homoefficio.github.io/tags/OneToMany/"/>
    
      <category term="ManyToOne" scheme="http://homoefficio.github.io/tags/ManyToOne/"/>
    
      <category term="일대다" scheme="http://homoefficio.github.io/tags/%EC%9D%BC%EB%8C%80%EB%8B%A4/"/>
    
      <category term="unidirectional" scheme="http://homoefficio.github.io/tags/unidirectional/"/>
    
      <category term="단방향" scheme="http://homoefficio.github.io/tags/%EB%8B%A8%EB%B0%A9%ED%96%A5/"/>
    
      <category term="bidirectional" scheme="http://homoefficio.github.io/tags/bidirectional/"/>
    
      <category term="양방향" scheme="http://homoefficio.github.io/tags/%EC%96%91%EB%B0%A9%ED%96%A5/"/>
    
      <category term="association" scheme="http://homoefficio.github.io/tags/association/"/>
    
      <category term="연관관계" scheme="http://homoefficio.github.io/tags/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84/"/>
    
      <category term="매핑" scheme="http://homoefficio.github.io/tags/%EB%A7%A4%ED%95%91/"/>
    
      <category term="엔티티" scheme="http://homoefficio.github.io/tags/%EC%97%94%ED%8B%B0%ED%8B%B0/"/>
    
      <category term="Entity" scheme="http://homoefficio.github.io/tags/Entity/"/>
    
      <category term="JoinColumn" scheme="http://homoefficio.github.io/tags/JoinColumn/"/>
    
      <category term="JoinTable" scheme="http://homoefficio.github.io/tags/JoinTable/"/>
    
      <category term="mappedBy" scheme="http://homoefficio.github.io/tags/mappedBy/"/>
    
      <category term="cascade" scheme="http://homoefficio.github.io/tags/cascade/"/>
    
      <category term="orphanRemoval" scheme="http://homoefficio.github.io/tags/orphanRemoval/"/>
    
      <category term="스프링 데이터 JPA" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA/"/>
    
      <category term="Overhead" scheme="http://homoefficio.github.io/tags/Overhead/"/>
    
      <category term="오버헤드" scheme="http://homoefficio.github.io/tags/%EC%98%A4%EB%B2%84%ED%97%A4%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO Direct Buffer를 이용해서 대용량 파일 행 기준으로 쪼개기</title>
    <link href="http://homoefficio.github.io/2019/02/27/Java-NIO-Direct-Buffer%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EB%8C%80%EC%9A%A9%EB%9F%89-%ED%8C%8C%EC%9D%BC-%ED%96%89-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%AA%BC%EA%B0%9C%EA%B8%B0/"/>
    <id>http://homoefficio.github.io/2019/02/27/Java-NIO-Direct-Buffer를-이용해서-대용량-파일-행-기준으로-쪼개기/</id>
    <published>2019-02-26T15:23:43.000Z</published>
    <updated>2019-04-28T17:03:55.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-NIO-Direct-Buffer를-이용해서-대용량-파일-행-기준으로-쪼개기"><a href="#Java-NIO-Direct-Buffer를-이용해서-대용량-파일-행-기준으로-쪼개기" class="headerlink" title="Java NIO Direct Buffer를 이용해서 대용량 파일 행 기준으로 쪼개기"></a>Java NIO Direct Buffer를 이용해서 대용량 파일 행 기준으로 쪼개기</h1><p>기가 단위의 파일을 외부에 전송할 일이 생겼다. </p><p>한 방에 보내기엔 너무 커서 파일을 쪼개서(split) 보내려고 하는데, 그마저도 쉽지 않다. 쪼개기 위해 대용량 파일을 읽을 때 이미 수십분 동안 CPU를 너무 잡아 먹어서 이 쪼개는 배치 작업을 스케줄링하는 스케줄러(Quartz)에 문제를 일으킨다.</p><p>DMA(Direct Memory Access)를 사용하는 것이 좋겠다.</p><h1 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h1><p><img src="https://i.imgur.com/LNHHp8h.png" alt="Imgur"></p><p>(그림 출처: <a href="https://howtodoinjava.com/java/io/how-java-io-works-internally-at-lower-level/" target="_blank" rel="noopener">https://howtodoinjava.com/java/io/how-java-io-works-internally-at-lower-level/</a>)</p><p>디스크 컨트롤러는 DMA를 통해 CPU를 건드리지 않고 직접 운영체제 메모리에 접근할 수 있고, 응용 프로그램은 Direct Buffer를 활용해서 JVM 메모리가 아닌 운영체제 메모리에 직접 접근할 수 있다.</p><p>장점은 다음과 같다.</p><ol><li>디스크에 있는 파일을 운영체제 메모리로 읽어들일 때 CPU를 건드리지 않는다.</li><li>운영체제 메모리에 있는 파일 내용을 JVM 내 메모리로 다시 복사할 필요가 없다.</li><li>JVM 내 힙 메모리를 쓰지 않으므로 GC를 유발하지 않는다.(물론 일정 크기를 가진 버퍼가 운영체제 메모리에 생성되는 것이고, 이 버퍼에 대한 참조 자체는 JVM 메모리 내에 생성된다)</li></ol><p>단점은 다음과 같다.</p><ol><li>DMA에 사용할 버퍼 생성 시 시간이 더 소요될 수 있다.</li><li>바이트 단위로 데이터를 취급하므로, <strong>데이터를 행 단위로 취급하기 불편하다.</strong></li></ol><p>Aㅏ.. 파일 쪼개기 할 때 행 기준으로 쪼개야 하는데.. 일단 불편한 것일 뿐 아예 안 되는 것은 아니므로 시도해보자.</p><p>종합해보면 <strong>파일의 크기가 대단히 클 때 DMA의 장점을 누릴 수 있고 단점을 피할 수 있다.</strong></p><h1 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h1><p>Java 1.4 부터 도입된 NIO에 <code>FileChannel</code>이 포함되어 있는데, <code>ByteBuffer</code>를 통해 File I/O를 수행할 수 있다.</p><p>대략 다음과 같은 방식으로 사용할 수 있다.</p><h2 id="파일-읽기-용-FileChannel"><a href="#파일-읽기-용-FileChannel" class="headerlink" title="파일 읽기 용 FileChannel"></a>파일 읽기 용 FileChannel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileChannel srcFileChannel = Files.open(Paths.get(<span class="string">"/home/homo-efficio/tmp/LargeFile"</span>), StandardOpenOption.READ);</span><br></pre></td></tr></table></figure><h2 id="파일-쓰기-용-FileChannel"><a href="#파일-쓰기-용-FileChannel" class="headerlink" title="파일 쓰기 용 FileChannel"></a>파일 쓰기 용 FileChannel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileChannel destFileChannel = Files.open(Paths.get(<span class="string">"/home/homo-efficio/tmp/LargeFile"</span>), StandardOpenOption.WRITE);</span><br></pre></td></tr></table></figure><p><code>Path</code> 말고 <code>RandomAccessFile</code>을 활용하는 방법도 있고, 파일 열기 모드에도 <code>TRUNCATE_EXIST</code>, <code>CREATE</code>, <code>CREATE_NEW</code> 등 여러가지가 있고 혼합해서 사용할 수 있다.</p><h1 id="ByteBuffer"><a href="#ByteBuffer" class="headerlink" title="ByteBuffer"></a>ByteBuffer</h1><p>실제 데이터를 담는 바이트 버퍼 클래스로서 JVM 힙을 사용하는 일반(Non-Direct) 버퍼와 운영체제 메모리에 직접 접근할 수 있는 Direct Buffer를 생성할 수 있다. Direct Buffer는 다음과 같이 간단하게 생성할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p>버퍼가 Direct 인지 아닌지 <code>buffer.isDirect()</code>를 통해 판별할 수도 있다.</p><h2 id="위치-관련-속성"><a href="#위치-관련-속성" class="headerlink" title="위치 관련 속성"></a>위치 관련 속성</h2><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>버퍼 내에서 값을 읽거나 쓸 수 있는 <strong>시작 위치</strong>를 나타낸다. 버퍼 내로 1 바이트의 데이터가 추가될 때마다 <code>position</code> 값도 1 증가한다.</p><p><code>buffer.position()</code>, <code>buffer.position(int)</code></p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>버퍼 내에서 값을 읽거나 쓸 수 있는 <strong>끝 위치</strong>를 나타낸다. <code>limit - 1</code> 위치까지의 데이터가 읽거나 써진다.</p><p><code>buffer.limit()</code>, <code>buffer.limit(int)</code></p><h3 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h3><p>현재 <code>position</code> 위치에 <strong>표시</strong>를 해두고, 나중에 <code>reset()</code>을 호출하면 표시해둔 위치로 <code>position</code>이 이동한다.</p><p><code>buffer.mark()</code></p><h3 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a>capacity</h3><p>버퍼의 용량(담을 수 있는 데이터의 크기)를 나타내며, 버퍼 생성 시 <code>ByteBuffer.allocate(capacity)</code> 나 <code>ByteBuffer.allocateDirect(capacity)</code> 로 지정할 수 있다.</p><p><code>buffer.capacity()</code></p><h2 id="위치-관련-메서드"><a href="#위치-관련-메서드" class="headerlink" title="위치 관련 메서드"></a>위치 관련 메서드</h2><h3 id="flip"><a href="#flip" class="headerlink" title="flip()"></a>flip()</h3><p><code>position</code>을 0으로, <code>limit</code>을 읽어들인 데이터의 마지막 바이트+1 위치로 세팅한다. </p><p>버퍼에 있는 데이터를 처음부터 모두 읽을 때 사용한다.</p><h3 id="rewind"><a href="#rewind" class="headerlink" title="rewind()"></a>rewind()</h3><p><code>position</code>을 0으로, <code>limit</code>은 현재 그대로 유지한다.</p><p>버퍼에 있는 데이터를 처음부터 현재 <code>limit</code> 위치 바로 앞까지 읽을 때 사용한다.</p><h3 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h3><p><code>position</code>을 <code>mark</code> 위치로 세팅한다.</p><h3 id="compact"><a href="#compact" class="headerlink" title="compact()"></a>compact()</h3><p>현재 <code>position</code>부터 <code>limit - 1</code> 까지의 데이터를 버퍼의 맨 앞으로 복사한 후에, <code>position</code>을 복사한 데이터 바로 다음 위치로 이동시키고, <code>limit</code>는 <code>capacity</code>로 이동한다. 행 기준으로 데이터를 다룰 때 핵심 역할을 담당한다. </p><h2 id="읽고-쓰는-값-관련-메서드"><a href="#읽고-쓰는-값-관련-메서드" class="headerlink" title="읽고 쓰는 값 관련 메서드"></a>읽고 쓰는 값 관련 메서드</h2><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p><code>position</code> 에 있는 값을 읽어서 반환한다.</p><h3 id="put-byte"><a href="#put-byte" class="headerlink" title="put(byte)"></a>put(byte)</h3><p><code>byte</code>를 <code>position</code> 위치에 쓴다.</p><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><p>Direct Buffer를 생성하는 것 자체는 그저 전용 메서드 하나 호출하는 것밖에 없어 단순하다. 다만, 줄 바꿈 처리에 좀 신경을 써야 한다.</p><p>대용량 파일 대상이므로 행의 크기 보다 버퍼 크기가 크다고 가정했다. 버퍼가 작을 때도 적용되도록 구현할 수는 있겠지만 불필요하게 로직만 복잡해지므로 이 때는 그냥 예외를 던지게 했다.</p><p>쉽게 요약하면,</p><ol><li>파일에서 버퍼만큼 읽어들인 후,</li><li>버퍼에서 LF가 나올 때까지 1 바이트씩 뒤로 이동,</li><li>LF가 나오면(0 ~ position 내의 마지막 LF) 버퍼의 시작부터 position 위치 내의 마지막 LF까지를 target 파일에 쓰고,</li><li>마지막 LF 뒤에서 버퍼 끝까지의 내용을 <code>compact()</code> 메서드를 이용해서 버퍼의 시작 위치로 복사하고,</li><li>그 이후의 내용은 다시 1번으로 돌아가서 버퍼에 읽어들이면서 반복</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitFileIntoDir</span><span class="params">(String srcFilePath,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String destDirPath,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String splittedFileNameFormat,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String header,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    ByteBuffer buffer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span> LINE_FEED = <span class="number">0x0A</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span> CARRIAGE_RETURN = <span class="number">0x0D</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fileCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> totalReadBytes = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">long</span> totalWriteBytes = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">long</span> readBytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Path path = Paths.get(srcFilePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> FileChannel srcFileChannel = FileChannel.open(path, StandardOpenOption.READ)) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((readBytes = srcFileChannel.read(buffer)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            totalReadBytes += readBytes;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> contentLength = buffer.position();</span><br><span class="line">            <span class="keyword">int</span> newLinePosition = buffer.position();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (<span class="keyword">final</span> FileChannel splittedFileChannel =</span><br><span class="line">                         FileChannel.open(Paths.get(destDirPath, String.format(splittedFileNameFormat, ++fileCounter)),</span><br><span class="line">                                 StandardOpenOption.TRUNCATE_EXISTING,</span><br><span class="line">                                 StandardOpenOption.CREATE,</span><br><span class="line">                                 StandardOpenOption.WRITE)) &#123;</span><br><span class="line">                writeHeader(header, readBytes, splittedFileChannel);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> hasLineFeed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">boolean</span> needCompact = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (newLinePosition &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (buffer.get(--newLinePosition) == LINE_FEED) &#123;  <span class="comment">// 1 byte 씩 뒤로 가면서 줄바꿈 탐색</span></span><br><span class="line">                        <span class="keyword">if</span> (newLinePosition + <span class="number">1</span> == buffer.capacity()) &#123;  <span class="comment">// 버퍼 끝에 줄바꿈이 있으면 compact 불필요</span></span><br><span class="line">                            needCompact = <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        buffer.position(<span class="number">0</span>);  <span class="comment">// buffer의 처음부터</span></span><br><span class="line">                        buffer.limit(++newLinePosition);  <span class="comment">// LINE_FEED 까지 포함해서 write 되도록 limit 조정</span></span><br><span class="line">                        <span class="comment">// 버퍼의 [0, limit)의 내용을 splittedFileChannel이 바인딩된 파일에 write</span></span><br><span class="line">                        totalWriteBytes += splittedFileChannel.write(buffer);</span><br><span class="line">                        splittedFileChannel.close();</span><br><span class="line">                        hasLineFeed = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!hasLineFeed) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"버퍼 안에 줄바꿈이 없습니다. 버퍼 크기는 한 행의 길이보다 커야 합니다."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (needCompact) &#123;</span><br><span class="line">                    <span class="comment">// compact()를 위해 원래 읽었던 내용의 마지막 바이트 위치+1(==contentLength) 로 limit 설정</span></span><br><span class="line">                    buffer.limit(contentLength);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 버퍼의 [position, limit) 의 내용을 [0, limit - position) 으로 복사</span></span><br><span class="line">                    buffer.compact();</span><br><span class="line">                    <span class="comment">// 복사 후 position은 limit에 위치하며 다음에 파일에서 읽어오는 내용이 position 부터 이어짐</span></span><br><span class="line">                    <span class="comment">// limit는 capacity로 이동</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// compact()가 필요없다면 파일을 읽어서 버퍼의 처음 위치부터 저장하도록 초기화</span></span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"File Split 도중 예외 발생"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Total Read  Bytes: "</span> + totalReadBytes);</span><br><span class="line">    System.out.println(<span class="string">"Total Write Bytes: "</span> + totalWriteBytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeHeader</span><span class="params">(String header, <span class="keyword">long</span> readBytes, FileChannel splittedFileChannel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (readBytes &gt; <span class="number">0</span> &amp;&amp; !StringUtils.isEmpty(header)) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] headerBytes = (header + System.lineSeparator()).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        splittedFileChannel.write(ByteBuffer.wrap(headerBytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="친절한-그림"><a href="#친절한-그림" class="headerlink" title="친절한 그림"></a>친절한 그림</h2><p>아무래도 그림으로 안 남겨놓으면 까먹은 후에 다시 봐도 이해가 안 될까봐..</p><p><img src="https://i.imgur.com/cYyw6I8.png" alt="Imgur"></p><p><img src="https://i.imgur.com/HNfdlTe.png" alt="Imgur"></p><p><img src="https://i.imgur.com/Nvllq5N.png" alt="Imgur"></p><p><img src="https://i.imgur.com/o8NvA8H.png" alt="Imgur"></p><p><img src="https://i.imgur.com/wSxPPi9.png" alt="Imgur"></p><p><img src="https://i.imgur.com/4VSL4vQ.png" alt="Imgur"></p><p><img src="https://i.imgur.com/nU1371g.png" alt="Imgur"></p><p><img src="https://i.imgur.com/8RSW7Me.png" alt="Imgur"></p><p><img src="https://i.imgur.com/QspJzSw.png" alt="Imgur"></p><p><img src="https://i.imgur.com/o8eFQ94.png" alt="Imgur"></p><p><img src="https://i.imgur.com/1oydbLu.png" alt="Imgur"></p><p><img src="https://i.imgur.com/i5LSNpn.png" alt="Imgur"></p><h1 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h1><p>한 행 당 70바이트 이내, 4,096,000행, 263MB 짜리 csv 파일을 1M, 10M, 50M, 100M 버퍼 크기 단위로 쪼개서 비교해 본 결과는 다음과 같다.</p><h2 id="수행-시간-비교"><a href="#수행-시간-비교" class="headerlink" title="수행 시간 비교"></a>수행 시간 비교</h2><p>버퍼 크기를 1M, 10M, 50M, 100M 를 한 사이클로 해서 2 사이클을 실행해서 수행 시간(초)을 비교해 본 결과,<br>전반적으로 Direct Buffer는 일반 Buffer보다 약 10% 정도 빠르고,<br>Direct Buffer는 readLine() 방식보다 적게는 약 2배, 많게는 약 5배 정도 빠르다.</p><table><thead><tr><th>버퍼 크기</th><th>회차</th><th>Direct Buffer</th><th>Buffer</th><th>readLine</th></tr></thead><tbody><tr><td>1M</td><td>1</td><td>1.62</td><td>1.87</td><td>3.85</td></tr><tr><td>1M</td><td>2</td><td>1.39</td><td>1.52</td><td>3.47</td></tr><tr><td>10M</td><td>1</td><td>0.46</td><td>0.52</td><td>2.41</td></tr><tr><td>10M</td><td>2</td><td>0.33</td><td>0.47</td><td>2.37</td></tr><tr><td>50M</td><td>1</td><td>1.23</td><td>2.65</td><td>2.33</td></tr><tr><td>50M</td><td>2</td><td>1.12</td><td>1.34</td><td>2.32</td></tr><tr><td>100M</td><td>1</td><td>1.37</td><td>1.51</td><td>2.42</td></tr><tr><td>100M</td><td>2</td><td>1.40</td><td>1.46</td><td>2.32</td></tr></tbody></table><p>FileChannel과 버퍼를 사용하는 방식은 버퍼 크기가 10M 일 때 다른 크기일 때에 비해 약 3 ~ 4배 정도 빨라지는 것이 특이하다.</p><h2 id="CPU-메모리-사용량-비교"><a href="#CPU-메모리-사용량-비교" class="headerlink" title="CPU, 메모리 사용량 비교"></a>CPU, 메모리 사용량 비교</h2><p>Direct Buffer, Buffer, readLine() 방식을 순서대로 실행해서 VisualVM으로 측정했다. 그래프에 표시된 것도 맨 왼쪽부터 Direct Buffer, Buffer, readLine() 방식이다.</p><p>예상대로 Direct Buffer는 JVM 메모리를 사용하지 않고 운영체제 메모리에 직접 접근하므로 JVM의 힙 메모리 사용량은 거의 없다. 물론 JVM 관점에서나 힙을 쓰지 않기 때문에 사용량이 적어 보이는 것이고, 운영체제 관점에서는 여전히 버퍼 크기 만큼의 메모리를 더 사용한다.<br>일반 Buffer는 버퍼 크기에 따라 JVM 힙 메모리 사용량도 비례해서 커지며,<br>readLine()은 1M, 10M, 50M 단위로 파일을 쪼개더라도 JVM 힙 메모리 사용량은 100M를 넘나든다.</p><p>CPU는 Direct Buffer와 Buffer는 아주 큰 차이는 없이 모두 10% 이내다. readLine()에 비해 약 1/3 정도에 불과할 정도로 절감 효과가 크지만, readLine() 방식도 30%에 미치지 않은 걸 보면 역시 263MB 짜리 파일은 Direct Buffer 효과가 두드러질 정도로 큰 파일은 아니라고 볼 수 있다.</p><h3 id="1M-버퍼-1M-단위로-자르기"><a href="#1M-버퍼-1M-단위로-자르기" class="headerlink" title="1M 버퍼, 1M 단위로 자르기"></a>1M 버퍼, 1M 단위로 자르기</h3><p><img src="https://i.imgur.com/6BET1z3.png" alt="Imgur"></p><p><img src="https://i.imgur.com/7dkgJCg.png" alt="Imgur"></p><h3 id="10M-버퍼-10M-단위로-자르기"><a href="#10M-버퍼-10M-단위로-자르기" class="headerlink" title="10M 버퍼, 10M 단위로 자르기"></a>10M 버퍼, 10M 단위로 자르기</h3><p><img src="https://i.imgur.com/wdWRADA.png" alt="Imgur"></p><p><img src="https://i.imgur.com/sdaNr3t.png" alt="Imgur"></p><h3 id="50M-버퍼-50M-단위로-자르기"><a href="#50M-버퍼-50M-단위로-자르기" class="headerlink" title="50M 버퍼, 50M 단위로 자르기"></a>50M 버퍼, 50M 단위로 자르기</h3><p><img src="https://i.imgur.com/G14IWFv.png" alt="Imgur"></p><p><img src="https://i.imgur.com/kEmfUja.png" alt="Imgur"></p><h3 id="100M-버퍼-100M-단위로-자르기"><a href="#100M-버퍼-100M-단위로-자르기" class="headerlink" title="100M 버퍼, 100M 단위로 자르기"></a>100M 버퍼, 100M 단위로 자르기</h3><p><img src="https://i.imgur.com/axhhB1Z.png" alt="Imgur"></p><p><img src="https://i.imgur.com/gJAbo3g.png" alt="Imgur"></p><h1 id="그런데-메모리-해제는"><a href="#그런데-메모리-해제는" class="headerlink" title="그런데 메모리 해제는?"></a>그런데 메모리 해제는?</h1><p>Direct Buffer는 JVM 힙이 아니라 운영체제 메모리를 사용하므로 GC를 유발하지 않는다고 했는데, GC를 유발하지 않는다고 마냥 좋아할 것이 아니다. GC가 안 되면 메모리 해제는 어떻게 이루어지는지 걱정해보는 센스가 필요하다.</p><p>아쉽게도 Java API 문서에는 Direct Buffer 로 사용한 메모리 해제 관련한 내용이 기술되어 있지 않다. 검색을 해보니 그나마 가장 있어보이는 질의응답은 <a href="https://stackoverflow.com/questions/36077641/java-when-does-direct-buffer-released" target="_blank" rel="noopener">https://stackoverflow.com/questions/36077641/java-when-does-direct-buffer-released</a> 여기에 있다. 공식 문서 내용은 아니므로 이게 정말 답인지는 알 수 없다.</p><p>요는 운영체제 메모리에 생성된 Direct Buffer 를 가리키는 참조는 JVM 메모리 내에 생성되는데, 이 참조가 GC가 되면 일반적인 GC 스레드가 아닌 다른 특정 스레드에 의해 버퍼 메모리가 해제된다고 한다.</p><p><code>DirectByteBuffer.Deallocator</code>에 대한 얘기가 나오는데 Java API 문서에는 없는 클래스지만, IntelliJ에서 클래스 검색을 해보면 나오긴 한다.</p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><blockquote><p>읽을 소스 파일이 기가 단위로 매우 크면 BufferedReader.readLine()은 CPU와 메모리를 엄청 잡아먹는다.</p><p>이 때 Java NIO의 FileChannel과 Direct Buffer를 활용하면 자원 사용량을 줄일 수 있다.</p><p>Buffer를 사용하면 자원 사용량과 속도 관점에서는 좋지만 행 기준으로 데이터를 처리하는데 불편함이 있다.</p><p>Buffer가 제공하는 메서드(position, mark, limit, flip, reset, rewind, compact)를 잘 활용하면 행 기준 처리도 가능하다.</p><p>Direct Buffer 를 가리키는 참조가 GC되면 운영체제 메모리에 생성된 Direct Buffer도 해제된다고 한다.(공식 API에 있는 내용은 아님)</p></blockquote><h2 id="읽을거리"><a href="#읽을거리" class="headerlink" title="읽을거리"></a>읽을거리</h2><ul><li><p>Java I/O를 Low Level에서 아주 잘 설명한 글: <a href="https://howtodoinjava.com/java/io/how-java-io-works-internally-at-lower-level/" target="_blank" rel="noopener">https://howtodoinjava.com/java/io/how-java-io-works-internally-at-lower-level/</a></p></li><li><p>Buffer의 사용법을 그림과 함께 아주 잘 설명한 글: <a href="https://palpit.tistory.com/641" target="_blank" rel="noopener">https://palpit.tistory.com/641</a></p></li><li><p>NIO2에 도입된 AsynchronousFileChannel 관련 글: <a href="https://homoefficio.github.io/2016/08/13/대용량-파일을-AsynchronousFileChannel로-다뤄보기/">https://homoefficio.github.io/2016/08/13/대용량-파일을-AsynchronousFileChannel로-다뤄보기/</a></p></li></ul><h2 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h2><p>Direct Buffer를 사용하더라도 channel의 read/write 메서드가 아니라 buffer의 get/put을 쓰면 DMA가 작동하지 않는다는 글을 봤는데 확인해보진 않았다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-NIO-Direct-Buffer를-이용해서-대용량-파일-행-기준으로-쪼개기&quot;&gt;&lt;a href=&quot;#Java-NIO-Direct-Buffer를-이용해서-대용량-파일-행-기준으로-쪼개기&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="자바" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="NIO" scheme="http://homoefficio.github.io/tags/NIO/"/>
    
      <category term="DMA" scheme="http://homoefficio.github.io/tags/DMA/"/>
    
      <category term="Direct Memory Access" scheme="http://homoefficio.github.io/tags/Direct-Memory-Access/"/>
    
      <category term="Direct Buffer" scheme="http://homoefficio.github.io/tags/Direct-Buffer/"/>
    
      <category term="ByteBuffer" scheme="http://homoefficio.github.io/tags/ByteBuffer/"/>
    
      <category term="Buffer" scheme="http://homoefficio.github.io/tags/Buffer/"/>
    
      <category term="FileChannel" scheme="http://homoefficio.github.io/tags/FileChannel/"/>
    
      <category term="Large File" scheme="http://homoefficio.github.io/tags/Large-File/"/>
    
      <category term="Split" scheme="http://homoefficio.github.io/tags/Split/"/>
    
      <category term="New Line" scheme="http://homoefficio.github.io/tags/New-Line/"/>
    
      <category term="Carriage Return" scheme="http://homoefficio.github.io/tags/Carriage-Return/"/>
    
      <category term="CR" scheme="http://homoefficio.github.io/tags/CR/"/>
    
      <category term="Line Feed" scheme="http://homoefficio.github.io/tags/Line-Feed/"/>
    
      <category term="LF" scheme="http://homoefficio.github.io/tags/LF/"/>
    
      <category term="readLine" scheme="http://homoefficio.github.io/tags/readLine/"/>
    
      <category term="직접 메모리 접근" scheme="http://homoefficio.github.io/tags/%EC%A7%81%EC%A0%91-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A0%91%EA%B7%BC/"/>
    
      <category term="다이렉트 버퍼" scheme="http://homoefficio.github.io/tags/%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8-%EB%B2%84%ED%8D%BC/"/>
    
      <category term="바이트버퍼" scheme="http://homoefficio.github.io/tags/%EB%B0%94%EC%9D%B4%ED%8A%B8%EB%B2%84%ED%8D%BC/"/>
    
      <category term="버퍼" scheme="http://homoefficio.github.io/tags/%EB%B2%84%ED%8D%BC/"/>
    
      <category term="파일 채널" scheme="http://homoefficio.github.io/tags/%ED%8C%8C%EC%9D%BC-%EC%B1%84%EB%84%90/"/>
    
      <category term="스플릿" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%ED%94%8C%EB%A6%BF/"/>
    
      <category term="대용량" scheme="http://homoefficio.github.io/tags/%EB%8C%80%EC%9A%A9%EB%9F%89/"/>
    
      <category term="대용량 파일" scheme="http://homoefficio.github.io/tags/%EB%8C%80%EC%9A%A9%EB%9F%89-%ED%8C%8C%EC%9D%BC/"/>
    
      <category term="줄 바꿈" scheme="http://homoefficio.github.io/tags/%EC%A4%84-%EB%B0%94%EA%BF%88/"/>
    
  </entry>
  
  <entry>
    <title>Back to the Essence - Concurrency vs Parallelism</title>
    <link href="http://homoefficio.github.io/2019/02/02/Back-to-the-Essence-Concurrency-vs-Parallelism/"/>
    <id>http://homoefficio.github.io/2019/02/02/Back-to-the-Essence-Concurrency-vs-Parallelism/</id>
    <published>2019-02-02T14:29:47.000Z</published>
    <updated>2019-04-28T17:03:55.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Back-to-the-Essence-Concurrency-vs-Parallelism"><a href="#Back-to-the-Essence-Concurrency-vs-Parallelism" class="headerlink" title="Back to the Essence - Concurrency vs Parallelism"></a>Back to the Essence - Concurrency vs Parallelism</h1><blockquote><p>동시성이 뭐냐?<br>복수의 태스크를 동시에 실행하는 거 아니냐?</p><p>병렬성이 뭐냐?<br>복수의 태스크를 동시에 실행하는 거 아니냐?</p><p>그럼 동시성과 병렬성이 뭐가 다른 거냐?<br>…</p></blockquote><p>비슷하지만 다른 개념이라는 건 알겠는데, 설명하라면 또 명확하게 답하기가 쉽지 않다.</p><p>명확하게 답하기 쉽지 않은 이유는 몇 가지 관점에 따라 다르게 설명되어야 할 필요가 있는 것을 그냥 뭉뚱그려서 얘기해왔기 때문이다. 이제 관점에 따라 나눠서 살펴보자.</p><h2 id="시간-관점"><a href="#시간-관점" class="headerlink" title="시간 관점"></a>시간 관점</h2><h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><p>일단 <strong>동시성에서 말하는 동시는 물리적으로 완전히 동일한 한 시점만을 말하는 것이 아니라 사실 상 동시라고 간주할 수 있는 시점(virtually at the same time)도 포함</strong>한다. 물리적으로 미세하게 다른 시점일지라도 애플리케이션 관점에서 동시라고 간주할 수 있는 시간 간격에서 복수의 태스크가 수행된다면 동시성이 있다.</p><p>그래서 <strong>동시성은 CPU(또는 코어)가 1개인 상황에서도 가능</strong>하다. 시분할 시스템을 통해 사실 상 동시라고 간주해도 무방한 시간에 여러 개의 태스크를 진행시키고 있다면 동시성이 있다.</p><h3 id="Parallelism"><a href="#Parallelism" class="headerlink" title="Parallelism"></a>Parallelism</h3><p><strong>병렬성에서 말하는 동시는 물리적으로 완전히 동일한 시점(physically and literally at the same time)</strong> 이다.</p><p>그래서 <strong>CPU(또는 코어)가 1개인 상황에서는 병렬성을 가질 수 없다.</strong></p><h2 id="작업-독립성-관점"><a href="#작업-독립성-관점" class="headerlink" title="작업 독립성 관점"></a>작업 독립성 관점</h2><p>독립성은 관점에 따라 다르게 해석될 수 있지만, 그런 상대성을 용인하고 바라보면 다음과 같이 비교할 수도 있다.</p><h3 id="Concurrency-1"><a href="#Concurrency-1" class="headerlink" title="Concurrency"></a>Concurrency</h3><p><strong>동시성에서는 독립적인 복수 개의 태스크를 순서를 고려하지 않고 동시에 실행</strong>한다.</p><p>1에서 100까지 더하는 태스크와 1에서 100까지 곱하는 태스크를 동시(완전한 동시가 아니라 동시성에서 말하는 동시)에 실행한다면 이 두 태스크는 독립적이며, 이런 태스크를 동시(완전한 동시가 아니라 동시성에서 말하는 동시)에 처리한다면 동시성이 있다.</p><p>순서를 고려하지 않는다는 것은 순서를 지키는 경우와 지키지 않는 경우 모두를 포괄한다.</p><h3 id="Parallelism-1"><a href="#Parallelism-1" class="headerlink" title="Parallelism"></a>Parallelism</h3><p><strong>병렬성에서는 하나의 태스크를 여러 부분으로 쪼개서 동시에 실행</strong>한다.</p><p>1에서 100까지 더하는 하나의 태스크를 1-30, 31-50, 51-70, 71-100 이렇게 4개의 구간합으로 나누고, 이를 4개의 CPU(또는 코어)에서 각각 동시에 실행하면 병렬성이 있다.</p><h2 id="동시성과-병렬성의-조합"><a href="#동시성과-병렬성의-조합" class="headerlink" title="동시성과 병렬성의 조합"></a>동시성과 병렬성의 조합</h2><h3 id="동시성이-있으면서-병렬성은-없을-수-있다"><a href="#동시성이-있으면서-병렬성은-없을-수-있다" class="headerlink" title="동시성이 있으면서 병렬성은 없을 수 있다?"></a>동시성이 있으면서 병렬성은 없을 수 있다?</h3><p>어떤 관점에서든 CPU(또는 코어)가 1개인 상황에서는 병렬성이 있을 수 없으므로, 이건 자명하다.</p><h3 id="동시성은-없으면서-병렬성은-있을-수-있다"><a href="#동시성은-없으면서-병렬성은-있을-수-있다" class="headerlink" title="동시성은 없으면서 병렬성은 있을 수 있다?"></a>동시성은 없으면서 병렬성은 있을 수 있다?</h3><p>위에서 다룬 더하기 구간합은 병렬성이 분명히 있지만, 동시성이 있다고 보는 것은 관점에 따라 다르다. </p><p>구간합 자체를 별개의 태스크로 본다면 동시성이 있다고 볼 수 있고,<br>구간합을 별개의 태스크가 아니라 전체합이라는 하나의 태스크를 나눈 것으로만 본다면 동시성이 없다고 볼 수 있다.</p><h3 id="동시성과-병렬성-모두-있을-수-있다"><a href="#동시성과-병렬성-모두-있을-수-있다" class="headerlink" title="동시성과 병렬성 모두 있을 수 있다?"></a>동시성과 병렬성 모두 있을 수 있다?</h3><p>1에서 100까지 더하는 하나의 태스크를 1-50, 51-100 이렇게 2개의 구간합으로 나누고, 이를 1, 2번 CPU(또는 코어)에서 각각 동시에 실행하고, 동시에 1에서 100까지 곱하는 하나의 태스크를 1-50, 51-100 이렇게 2개의 구간곱으로 나누고, 이를 3, 4번 CPU(또는 코어)에서 각각 동시에 실행한다면 어떨까?</p><p>이럴 때는 더하기와 곱하기라는 독립적인 복수의 태스크를 동시에 실행하므로 동시성이 있고,<br>더하기라는 하나의 태스크를 구간합으로 나눠서 동시에 실행하고, 곱하기라는 하나의 태스크를 구간곱으로 나눠서 동시에 실행하므로 병렬성도 있다.</p><h2 id="concurrent-vs-simultaneous"><a href="#concurrent-vs-simultaneous" class="headerlink" title="concurrent vs simultaneous"></a>concurrent vs simultaneous</h2><p>참고로 전산 용어를 잠시 떠나서 concurrent와 simultaneous를 비교해보는 것도 concurrent의 의미를 이해하는 데 도움이 될 것 같다.</p><p>둘의 차이를 아래와 같이 해석하는 게 100% 맞는지는 원어민이 아닌 나는 알 수 없지만, 최소한 concurrency vs parallelism을 이해하는 데는 확실히 도움이 된다. 어설픈 번역 말고 그냥 원어 그대로 가져와본다. 출처는 <a href="https://www.quora.com/Is-there-any-major-difference-between-simultaneous-and-concurrent" target="_blank" rel="noopener">Quora</a>다.</p><p><img src="https://i.imgur.com/2KAJ16s.png" alt="Imgur"></p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>자 이렇게 시간 관점, 작업 독립성 관점, 조합 관점에서 구체적으로 살펴보고 나니, 예전에는 별로 와닿지 않았던 다음과 같은 조금 추상적인 단문 비교도 조금은 달라 보인다.</p><blockquote><p>동시성은 여러 가지 일을 한 번에 <strong>처리</strong>하는 것을 말하고,<br>병렬성은 여러 가지 일을 한 번에 <strong>수행</strong>하는 것을 말한다.</p><p><code>Concurrency is about **dealing with** lots of things at once.</code><br><code>Parallelism is about **doing** lots of things at once.</code></p></blockquote><p>간결해서 좋아보이기는 하는데 우리말로 옮겨보면 처리나 수행이나 비슷해져버려서.. 이건 원어민에게는 좋은 비교겠지만, 우리에겐 아쉽게도 그다지.. 게다가 ‘한 번에(at once)’도 ‘동시에’와 마찬가지로 우리말로 옮겨놓고 엄밀하게 보면 틀린 표현이고 부가적인 설명이 필요하므로 꼬리에 꼬리를 무는.. 그래서 흔히 볼 수 있기는 하지만 별로다!</p><blockquote><p>동시성은 <strong>구조</strong>에 관한 것이고,<br>병렬성은 <strong>실행</strong>에 관한 것이다.</p><p><code>Concurrency is about the **structure**.</code><br><code>Parallelism is about the **execution**.</code></p></blockquote><p>오호 이게 좋다. 영어든 국어든 글자수까지 똑같아서 아름답기까지 하다..<br>이렇게 보면 Parallelism을 병렬성보다는 병행성으로 옮기는 게 더 나은 것 같다.  </p><p>간단하게는 썸네일로 사용한 이 그림도 괜찮고,</p><p><img src="https://i.imgur.com/cDdWLKL.jpg" alt="Imgur"></p><p>(출처: <a href="https://www.codeproject.com/Articles/1267757/Concurrency-vs-Parallelism" target="_blank" rel="noopener">https://www.codeproject.com/Articles/1267757/Concurrency-vs-Parallelism</a>)</p><p>다음 그림도 괜찮은 것 같다.</p><p><img src="https://i.imgur.com/uIMnkj1.jpg" alt="Imgur"></p><p>(출처: <a href="https://twitter.com/ohidxy/status/946110898539659264" target="_blank" rel="noopener">https://twitter.com/ohidxy/status/946110898539659264</a>)</p><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><ul><li><a href="https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/" target="_blank" rel="noopener">https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/</a></li><li><a href="https://www.slideshare.net/PramestiHattaK/golang-101-concurrency-vs-parallelism" target="_blank" rel="noopener">https://www.slideshare.net/PramestiHattaK/golang-101-concurrency-vs-parallelism</a></li><li><a href="http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html</a></li><li><a href="https://www.amazon.com/Reactive-Programming-RxJava-Asynchronous-Applications/dp/1491931655/" target="_blank" rel="noopener">https://www.amazon.com/Reactive-Programming-RxJava-Asynchronous-Applications/dp/1491931655/</a></li></ul><h2 id="추가"><a href="#추가" class="headerlink" title="추가"></a>추가</h2><p>페북에 공유하고 보니 이규원 님으로부터 다음과 같은 아주 쌈박한 의견을 얻을 수 있었다.</p><blockquote><p>Concurrency는 다수의 문제가 동시에 일어난 상황에 대한 것이고,<br>Parallelism은 다수의 문제를 동시에 해결하는 방법에 대한 것입니다.</p></blockquote><p>개인적으로는</p><blockquote><p>Concurrency는 해결해야 할 문제고,<br>Parallelisma은 해결하는 방법이다.</p></blockquote><p>라고 생각해왔는데, 몇 군데 조사해보니 이런 식으로 서술된 게 없어서 아닌가보다.. 하고 구조 vs 실행에 힘을 실어주고 끝맺었는데, 우군을 얻었으니 다시 다음과 같이 결론낸다.</p><blockquote><p><strong>Concurrency는 동시에 발생한 다수의 일을 처리해야하는 상황을 의미</strong>하고,<br><strong>Parallelism은 다수의 일을 동시에 실행하는 방식을 의미</strong>한다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Back-to-the-Essence-Concurrency-vs-Parallelism&quot;&gt;&lt;a href=&quot;#Back-to-the-Essence-Concurrency-vs-Parallelism&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Concepts" scheme="http://homoefficio.github.io/categories/Concepts/"/>
    
    
      <category term="Concurrency" scheme="http://homoefficio.github.io/tags/Concurrency/"/>
    
      <category term="Parallelism" scheme="http://homoefficio.github.io/tags/Parallelism/"/>
    
      <category term="동시성" scheme="http://homoefficio.github.io/tags/%EB%8F%99%EC%8B%9C%EC%84%B1/"/>
    
      <category term="병렬성" scheme="http://homoefficio.github.io/tags/%EB%B3%91%EB%A0%AC%EC%84%B1/"/>
    
      <category term="병행성" scheme="http://homoefficio.github.io/tags/%EB%B3%91%ED%96%89%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>Back to the Essence - Java 컴파일에서 실행까지 - (2)</title>
    <link href="http://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89%EA%B9%8C%EC%A7%80-2/"/>
    <id>http://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-컴파일에서-실행까지-2/</id>
    <published>2019-01-30T15:20:05.000Z</published>
    <updated>2019-04-28T17:03:55.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Back-to-the-Essence-Java-컴파일에서-실행까지-2"><a href="#Back-to-the-Essence-Java-컴파일에서-실행까지-2" class="headerlink" title="Back to the Essence - Java 컴파일에서 실행까지 - (2)"></a>Back to the Essence - Java 컴파일에서 실행까지 - (2)</h1><p>Java 11 JVM 스펙을 기준으로 Java 소스 코드가 어떻게 컴파일되고 실행되는지 살짝 깊게 알아보자.</p><p>이번엔 2탄 실행 편이다. 1탄 컴파일 편은 <a href="https://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-컴파일에서-실행까지-1/">여기</a>에..</p><h1 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h1><p>자바 애플리케이션은 <code>java</code> 명령어로 실행할 수 있다. <a href="https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE" target="_blank" rel="noopener">오라클의 Tools Reference 문서</a>에 나오는 <code>java</code>에 대한 설명은 다음과 같다.</p><blockquote><p><code>java</code> 명령어는 자바 애플리케이션을 시작한다.<br><code>java</code> 명령어는 먼저 JRE(Java Runtime Environment)를 시작하고,<br>인자로 지정된 클래스(<code>public static void main(String[] args)</code>를 포함하고 있는 클래스)를 로딩하고,<br><code>main()</code> 메서드를 호출한다.</p></blockquote><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK, JRE, JVM"></a>JDK, JRE, JVM</h2><p><code>java</code>는 JRE를 시작한다고 하니, JDK, JRE, JVM의 관계를 그림 한 장으로 가볍게 훑고 지나가자.</p><p><img src="https://i.imgur.com/wChPQEV.png" alt="Imgur"></p><ul><li>JDK: 자바 개발 환경 - 컴파일러, 역어셈블러, 디버거, 의존관계분석 등 개발에 필요한 도구 제공</li><li>JRE: 자바 실행 환경 - 자바 실행 명령, 클래스로더와 바이트코드의 실행에 필요한 기본 라이브러리 제공</li><li>JVM: 자바 가상 머신 - 바이트코드 인터프리터, JIT 컴파일러, 링커, 명령어 세트, 가비지 컬렉터, 런타임 데이터 영역(메모리) 등 OS에 독립적으로 실행될 수 있는 추상층 제공</li></ul><p>대략 다음과 같이 정리할 수 있다.</p><blockquote><p>JDK를 사용해서 바이트코드(class 파일)를 만들고, </p><p>JRE를 사용해서 바이트코드를 실행하면,</p><p>JVM이 기동되면서 바이트코드의 실질적인 실행(실제 OS에 메모리 할당/회수, 시스템 명령 호출 등 요청)을 담당한다.</p></blockquote><h2 id="JRE-시작"><a href="#JRE-시작" class="headerlink" title="JRE 시작"></a>JRE 시작</h2><p><code>java</code> 명령 실행에 의해 JRE가 시작된다는 것은 결국 <code>java</code> 명령어의 인자로 지정된 클래스를 실행하기 위한 자바 실행 환경이 조성됨을 의미한다. </p><p><code>java</code> 명령어의 인자로 지정한 설정 옵션에 맞게 JVM이 실행되고, JVM이 클래스로더를 이용해서 <code>initial class</code>를 <code>create</code>하고, <code>initial class</code>를 <code>link</code>하고, <code>initialize</code>하고, main 메서드를 호출한다.(<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.2" target="_blank" rel="noopener">JVM 스펙</a> 참고)</p><h3 id="용어-정리"><a href="#용어-정리" class="headerlink" title="용어 정리"></a>용어 정리</h3><p>몇 가지 용어를 일부러 스펙에 나온 원어 그대로 썼는데 스펙상의 의미는 다음과 같다.</p><ul><li>initial class: JVM 구현에 따라 다를 수 있지만 일반적으로 main 메서드를 포함하는 클래스로서 java 명령어의 인자로 지정되는 클래스 (<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.2" target="_blank" rel="noopener">JVM 스펙</a> 참고)</li><li>create (a class or interface): 해당 클래스나 인터페이스의 바이트코드를 로딩해서 JVM이 할당한 메모리(Method Area, 메서드 영역)에 construction하는 것 (<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.3" target="_blank" rel="noopener">JVM 스펙</a> 참고)</li><li>link (a class or interface): 해당 클래스나 인터페이스의 바로 위 수퍼클래스나 수퍼인터페이스, 또는 배열일 경우 배열의 원소인 클래스나 인터페이스를 확인(verify)/준비(prepare)하고, 심볼릭 참조를 해석(resolve)해서 JVM에서 실행될 수 있는 상태로 만드는 것 (<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4" target="_blank" rel="noopener">JVM 스펙</a> 참고)</li><li>initialize (a class or interface): 해당 클래스나 인터페이스의 class or interface initialization method를 실행하는 것 (<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.5" target="_blank" rel="noopener">JVM 스펙</a> 참고)</li></ul><p>위 설명에는 없지만 중요한 용어인 로딩의 스펙상의 의미는 다음과 같다.</p><ul><li>load (a class or interface): 해당 클래스나 인터페이스의 바이너리 표현을 찾아서 그 바이너리 표현으로부터 클래스나 인터페이스를 생성(create)하는 것 (<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html" target="_blank" rel="noopener">JVM 스펙</a> 참고)</li></ul><p>앞으로 <strong>initial class는 시작 클래스</strong>, <strong>create은 생성</strong>, <strong>link는 링크</strong>, <strong>initialize는 초기화</strong>, <strong>load는 로딩</strong>이라고 쓴다. 한 가지 유의할 것은 여기서 말하는 <strong>생성(create)은 JVM의 힙(heap)에 객체를 생성하는 것만을 지칭하는 것이 아니라 JVM의 메모리 어딘가에 자료구조를 생성하는 것을 모두 지칭</strong>한다.</p><h2 id="런타임-데이터-영역"><a href="#런타임-데이터-영역" class="headerlink" title="런타임 데이터 영역"></a>런타임 데이터 영역</h2><p><code>java</code> 명령어로 자바 애플리케이션을 실행하면 JVM이 실행되면서 시작 클래스를 생성, 링크, 초기화하고 main 메서드를 호출한다고 했다. 시작 클래스를 생성한다는 것은 시작 클래스의 바이트코드를 읽어서 JVM의 메모리 어딘가에 쓰는 것을 의미한다. JVM의 메모리는 어떻게 생겼을까?</p><p>JVM은 프로그램의 실행에 사용되는 메모리를 런타임 데이터 영역(Runtime Data Area)이라고 부르는 몇 가지 영역으로 나눠서 관리한다. 스펙의 목차로 보면 밋밋하게 다음과 같이 나열되어 있다.</p><ol><li>PC 레지스터</li><li>JVM 스택</li><li>힙(Heap)</li><li>메서드 영역(Method Area)</li><li>런타임 상수 풀(Run-Time Constnat Pool)</li><li>네이티브 메서드 스택</li></ol><p>이렇게 보면 위 6가지가 동등한 최상위 수준에서 분류되는 것처럼 보인다. 하지만, 실제 스펙의 설명을 보면 다음과 같이 약간 입체적으로 구분하는 것이 더 적합하다.</p><p><img src="https://i.imgur.com/Mh4DuRB.png" alt="Imgur"></p><p>여기서 ‘단위’라는 구분 단계를 추가한 이유는 스펙에도 <code>per-class</code>, <code>per-thread</code> 라는 표현이 나오기 때문인데, 여기에서의 ‘단위’는 생명 주기와 생성 단위를 의미한다.</p><p>JVM 단위에 속하는 <strong>힙과 메서드 영역은 JVM이 시작될 때 생성되고, JVM이 종료될 때 소멸되며, JVM 하나에 힙 하나, 메서드 영역도 하나가 생성</strong> 된다.</p><p>마찬가지로 클래스 단위에 속하는 <strong>런타임 상수 풀은 클래스가 생성/소멸될 때 함께 생성/소멸되며, 클래스 하나에 런타임 상수 풀도 하나가 생성</strong> 된다.</p><p>스레드 단위에 속하는 <strong>PC 레지스터, JVM 스택, 네이티브 메서드 스택도 스레드가 생성/소멸될 때 함께 생성/소멸되며, 스레드 하나에 PC 레지스터, JVM 스택, 네이티브 메서드 스택도 각 하나씩 생성</strong> 된다.</p><p>자. 이제 6가지 영역을 좀 더 자세히 알아보자.</p><p>라고 진행하면 너무 뻔한 나열식이라 머리에 잘 안 남는다. 그러니 다음과 같이 간단한 예제 코드 실행 과정과 함께 살펴보자.</p><h2 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h2><h3 id="자바-소스-코드"><a href="#자바-소스-코드" class="headerlink" title="자바 소스 코드"></a>자바 소스 코드</h3><p>헬로 월드 수준의 단순한 소스 코드다. 힙에서 객체가 생성되는 것을 확인하기 위해 Hello 인스턴스를 만들고 무한루프로 프로그램의 종료를 일부러 막아둔 코드다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.jvm.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">        System.out.println(hello.helloMessage());</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, JVM"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="컴파일된-바이트코드"><a href="#컴파일된-바이트코드" class="headerlink" title="컴파일된 바이트코드"></a>컴파일된 바이트코드</h3><p>컴파일된 바이트코드는 다음과 같다.</p><blockquote><p>javap -v -p -s homo/efficio/jvm/sample/Hello.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">$ /c/Program\ Files/Java/jdk-<span class="number">11.0</span>.2/bin/javap -v -p -s homo/efficio/jvm/sample/Hello</span><br><span class="line">Classfile /C:/gitrepo/scratchpad/java-jvm-scratchpad/out/production/java-jvm-scratchpad/homo/efficio/jvm/sample/Hello.class</span><br><span class="line">  Last modified <span class="number">2019</span>. <span class="number">1</span>. <span class="number">30</span>.; size <span class="number">741</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">675e63</span>b96993dc5e661d6566467d92d3</span><br><span class="line">  Compiled from <span class="string">"Hello.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">homo</span>.<span class="title">efficio</span>.<span class="title">jvm</span>.<span class="title">sample</span>.<span class="title">Hello</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">55</span></span><br><span class="line">  flags: (<span class="number">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #2                          // homo/efficio/jvm/sample/Hello</span><br><span class="line">  super_class: #8                         // java/lang/Object</span><br><span class="line">  interfaces: <span class="number">0</span>, fields: <span class="number">0</span>, methods: <span class="number">3</span>, attributes: <span class="number">1</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #8.#26         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Class              #27            // homo/efficio/jvm/sample/Hello</span><br><span class="line">   #3 = Methodref          #2.#26         // homo/efficio/jvm/sample/Hello."&lt;init&gt;":()V</span><br><span class="line">   #4 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #5 = Methodref          #2.#30         // homo/efficio/jvm/sample/Hello.helloMessage:()Ljava/lang/String;</span><br><span class="line">   #6 = Methodref          #31.#32        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #7 = String             #33            // Hello, JVM</span><br><span class="line">   #8 = Class              #34            // java/lang/Object</span><br><span class="line">   #9 = Utf8               &lt;init&gt;</span><br><span class="line">  #10 = Utf8               ()V</span><br><span class="line">  #11 = Utf8               Code</span><br><span class="line">  #12 = Utf8               LineNumberTable</span><br><span class="line">  #13 = Utf8               LocalVariableTable</span><br><span class="line">  #14 = Utf8               this</span><br><span class="line">  #15 = Utf8               Lhomo/efficio/jvm/sample/Hello;</span><br><span class="line">  #16 = Utf8               main</span><br><span class="line">  #17 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #18 = Utf8               args</span><br><span class="line">  #19 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #20 = Utf8               hello</span><br><span class="line">  #21 = Utf8               StackMapTable</span><br><span class="line">  #22 = Utf8               helloMessage</span><br><span class="line">  #23 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #24 = Utf8               SourceFile</span><br><span class="line">  #25 = Utf8               Hello.java</span><br><span class="line">  #26 = NameAndType        #9:#10         // "&lt;init&gt;":()V</span><br><span class="line">  #27 = Utf8               homo/efficio/jvm/sample/Hello</span><br><span class="line">  #28 = Class              #35            // java/lang/System</span><br><span class="line">  #29 = NameAndType        #36:#37        // out:Ljava/io/PrintStream;</span><br><span class="line">  #30 = NameAndType        #22:#23        // helloMessage:()Ljava/lang/String;</span><br><span class="line">  #31 = Class              #38            // java/io/PrintStream</span><br><span class="line">  #32 = NameAndType        #39:#40        // println:(Ljava/lang/String;)V</span><br><span class="line">  #33 = Utf8               Hello, JVM</span><br><span class="line">  #34 = Utf8               java/lang/Object</span><br><span class="line">  #35 = Utf8               java/lang/System</span><br><span class="line">  #36 = Utf8               out</span><br><span class="line">  #37 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #38 = Utf8               java/io/PrintStream</span><br><span class="line">  #39 = Utf8               println</span><br><span class="line">  #40 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> homo.efficio.jvm.sample.Hello();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lhomo/efficio/jvm/sample/Hello;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: new           #2                  // class homo/efficio/jvm/sample/Hello</span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         4: invokespecial #3                  // Method "&lt;init&gt;":()V</span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         8: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">11</span>: aload_1</span><br><span class="line">        12: invokevirtual #5                  // Method helloMessage:()Ljava/lang/String;</span><br><span class="line">        15: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">18</span>: goto          <span class="number">18</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">18</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">8</span>      <span class="number">13</span>     <span class="number">1</span> hello   Lhomo/efficio/jvm/sample/Hello;</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">        frame_type = <span class="number">252</span> <span class="comment">/* append */</span></span><br><span class="line">          offset_delta = <span class="number">18</span></span><br><span class="line">          locals = [ class homo/efficio/jvm/sample/Hello ]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">helloMessage</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: ldc           #7                  // String Hello, JVM</span><br><span class="line">         <span class="number">2</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">3</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lhomo/efficio/jvm/sample/Hello;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Hello.java"</span></span><br></pre></td></tr></table></figure><p>앞에서 JDK, JRE, JVM 관계로 설명했지만 위와 같은 바이트코드를 만드는 과정까지는 JDK에서 담당한다.</p><p>앞에서 자바 프로그램이 실행되면 다음과 같이 전개된다고 설명했다. </p><blockquote><p><strong>JVM이 실행</strong>되고, JVM이 클래스로더를 이용해서 <strong>시작 클래스를 생성</strong>하고, <strong>링크</strong>하고, <strong>초기화</strong>하고, <strong>main 메서드를 호출</strong>한다.</p></blockquote><p>이제 <code>java homo.efficio.jvm.sample.Hello</code> 명령을 실행하면 어떻게 진행되는지 차근차근 살펴보자.</p><h2 id="JVM-실행"><a href="#JVM-실행" class="headerlink" title="JVM 실행"></a>JVM 실행</h2><p><code>java</code> 명령이 실행되면 JRE가 조성되면서 JVM이 실행된다. JVM이 실행되면 JVM 단위로 생성되는 힙과 메서드 영역이 함께 생성된다.</p><h3 id="힙"><a href="#힙" class="headerlink" title="힙"></a>힙</h3><p><strong><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5.3" target="_blank" rel="noopener">힙(Heap)</a>은 인스턴스화 된 모든 클래스 인스턴스와 배열을 저장하는 공간</strong>이며, <strong>모든 JVM 스레드에 공유</strong>된다.</p><p>힙에 저장된 객체에 할당된 메모리는 명시적인 방법으로는 절대 회수되지 못하며, 오직 가비지 컬렉터(garbage collector)에 의해서만 회수될 수 있다.</p><p>Hello는 이 시점에서는 아직 인스턴스화 되지 않았으므로 힙은 비어있다.</p><h3 id="메서드-영역"><a href="#메서드-영역" class="headerlink" title="메서드 영역"></a>메서드 영역</h3><p><strong><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5.4" target="_blank" rel="noopener">메서드 영역(Method Area)</a>은 런타임 상수 풀, 필드와 메서드 데이터, 생성자 및 메서드의 코드 내용을 저장</strong>한다. 저장되는 내용은 위에서 살펴봤던 바이트코드의 내용과 거의 일치한다. 거의라고 얘기하는 이유는 바이트코드에는 런타임 상수 풀이 아니라 그냥 상수 풀(constanta pool)이 포함되어 있기 때문이다. 런타임 상수 풀은 이 상수 풀을 바탕으로 런타임에, 더 구체적으로는 메서드 영역에 저장될 때 만들어진다.</p><p>그래서 엄밀히 말하면 정확하지 않지만, <strong>바이트코드 내용이 메서드 영역에 저장된다</strong>라고 이해해도 크게 틀리지는 않다.</p><p>Hello는 이 시점에서는 아직 생성되지 않았으므로 메서드 영역도 비어있다.</p><p><img src="https://i.imgur.com/KXJsPgs.png" alt="Imgur"></p><p>JVM 스펙은 런타임 데이터 영역을 6가지로 나눠서 설명하고 있고, 그에따라 그림에도 힙과 메서드 영역을 분리해서 표현했지만, 스펙에는 메서드 영역이 논리적으로 힙의 일부지만(그래서 가비지 컬렉션 대상이 되지만), 단순하게는 가비지 컬렉션이나 압축을 하지 않게 구현할 수도 있으며, 스펙은 메서드의 영역의 위치에 대해 강제하지 않는다고 나와 있기도 하다. 결국 메서드 영역의 위치는 JVM 구현체에 따라 달라질 수 있다는 말이다.</p><p>참고로 Java 8 부터 Metaspace가 기존의 PermGen 영역을 대체한다는 자료들이 많이 있는데, JVM 스펙에는 Megaspace라는 용어는 전혀 나오지 않는다. Metaspace는 JVM 구현체인 HotSpot JVM에서 나오는 용어이며, Metaspace에 저장되는 데이터를 기준으로 보면 HotSpot JVM은 JVM 스펙의 메서드 영역을 Metaspace로 구현한 거라고 볼 수 있다.</p><h2 id="시작-클래스-생성"><a href="#시작-클래스-생성" class="headerlink" title="시작 클래스 생성"></a>시작 클래스 생성</h2><p>시작 클래스는 Hello를 지칭하며 시작 클래스를 생성하는 것은 파일시스템에 있는 Hello.class 파일을 JVM의 메서드 영역으로 읽어들이는 것을 의미한다고 했다. 따라서 <strong>이 시점에서 Hello의 바이트코드 내용이 메서드 영역에 저장</strong>된다.</p><p><img src="https://i.imgur.com/QBQyTab.png" alt="Imgur"></p><p>그런데 Hello 클래스는 누가 로딩하는 걸까? 당연하지만 클래스로더가 로딩한다. 그럼 클래스로더는 누가 로딩할까?</p><h3 id="클래스로더"><a href="#클래스로더" class="headerlink" title="클래스로더"></a>클래스로더</h3><p>자바 런타임은 네이티브 코드로 작성된 부트스트랩 클래스로더, 플랫폼 클래스로더, 시스템 클래스로더, 이렇게 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassLoader.html" target="_blank" rel="noopener">3가지 빌트인(built-in) 클래스로더를 제공</a>한다.</p><p>결론적으로 <strong>Hello 클래스는 시스템 클래스로더가 로딩</strong>하는데, <strong>시스템 클래스로더는 플랫폼 클래스로더가 로딩하고, 플랫폼 클래스로더는 부트스트랩 클래스로더가 로딩하고, 부트스트랩 클래스로더는 <code>java</code> 명령에 의해 JRE가 조성될 때 실행</strong>된다.</p><p>클래스로딩은 <a href="https://homoefficio.github.io/2018/10/13/Java-클래스로더-훑어보기/">Java 클래스로더 훑어보기</a>와 <a href="ttps://homoefficio.github.io/2018/10/14/Java-URLClassLoader로-알아보는-클래스로딩/">Java URLClassLoader로 알아보는 클래스로딩</a>을 참고하자.</p><h3 id="런타임-상수-풀"><a href="#런타임-상수-풀" class="headerlink" title="런타임 상수 풀"></a>런타임 상수 풀</h3><p>클래스가 생성되면 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5.5" target="_blank" rel="noopener">런타임 상수 풀(Run-Time Constant Pool)</a>도 함께 생성된다고 했다. <strong>런타임 상수 풀에는 컴파일 타임에 이미 알 수 있는 숫자 리터럴 값부터 런타임에 해석되는 메서드와 필드의 참조까지를 포괄하는 여러 종류의 상수가 포함</strong>된다. 런타임 상수 풀은 다른 전통적인 언어에서 말하는 심볼 테이블과 비슷한 기능을 한다고 보면 된다.</p><p><img src="https://i.imgur.com/ZtsNYAv.png" alt="Imgur"></p><h2 id="링크"><a href="#링크" class="headerlink" title="링크"></a>링크</h2><p><strong><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4" target="_blank" rel="noopener">링크</a>는 클래스나 인터페이스의 바로 위 수퍼클래스나 수퍼인터페이스, 또는 배열일 경우 배열의 원소인 클래스나 인터페이스를 확인(verify)/준비(prepare)하고, 심볼릭 참조를 해석(resolve)하는 과정</strong>을 말한다.</p><p>그럼 확인, 준비, 해석은 뭘 의미하는 걸까?</p><h3 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h3><p><strong><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.1" target="_blank" rel="noopener">확인(verification)</a>은 클래스나 인터페이스의 바이너리 표현이 구조적으로 올바른지를 보장해주는 과정</strong>이다. 확인 과정은 다른 클래스나 인터페이스의 로딩을 유발할 수도 있지만, 로딩된 다른 클래스나 인터페이스의 확인이나 준비를 필수적으로 유발하지는 않는다.</p><p>Hello.class 파일은 JDK에 포함된 공식 컴파일러인 <code>javac</code>에 의해 정상적으로 컴파일되었으므로 구조적으로 올바르다고 가정하면, <strong>확인 과정에서 Hello의 부모 클래스인 Object가 로딩</strong>된다.</p><p><img src="https://i.imgur.com/8f6zqKP.png" alt="Imgur"></p><h3 id="준비"><a href="#준비" class="headerlink" title="준비"></a>준비</h3><p><strong><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.2" target="_blank" rel="noopener">준비(preperation)</a>는 클래스나 인터페이스의 정적(static) 필드를 생성하고 기본값으로 초기화하는 과정</strong>이다. 준비 과정에서는 JVM 코드의 실행을 필요로 하지 않으며, <strong>기본값이 아닌 특정값으로 정적 필드를 초기화하는 과정은 준비 과정이 아니라 초기화 과정에서 수행</strong>된다.</p><p>스펙에 정의된 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.3" target="_blank" rel="noopener">기본형 타입의 기본값</a>과 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.4" target="_blank" rel="noopener">참조형 타입의 기본값</a>은 다음과 같다.</p><table><thead><tr><th>타입</th><th>기본값</th></tr></thead><tbody><tr><td>byte, short, int, long</td><td>0</td></tr><tr><td>char</td><td>null(<code>&#39;\u0000&#39;</code>)</td></tr><tr><td>float, double</td><td>0(positive zero)</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>참조형</td><td>null</td></tr></tbody></table><p>Hello에는 정적 필드가 없으므로 이 과정에서 특별히 수행되는 것은 없다.</p><h3 id="해석"><a href="#해석" class="headerlink" title="해석"></a>해석</h3><p><strong><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3" target="_blank" rel="noopener">해석(resolution)</a>은 런타임 상수 풀에 있는 심볼릭 참조가 구체적인 값을 가리키도록 동적으로 결정하는 과정</strong>이다. 초기 상태의 런타임 상수 풀에 있는 심볼릭 참조는 해석되어져 있지 않다.</p><h3 id="링크의-조건"><a href="#링크의-조건" class="headerlink" title="링크의 조건"></a>링크의 조건</h3><p>JVM 스펙에서는 <strong>링크가 언제 수행되어야 하는지는 규정하지 않고 유연하게 구현될 수 있는 여지</strong>를 주고 있다. 단 다음과 같은 조건을 만족해야 한다.</p><ul><li>클래스나 인터페이스는 링크되기 전에 먼저 완전히 로딩되어야 한다.</li><li>클래스나 인스턴스는 초기화되기 전에 먼저 완전히 확인되고 준비되어야 한다.</li><li>링크 관련 에러는 해당 클래스나 인터페이스에 대한 링크를 필요로 하는 행위가 수행되는 시점에 throw 되어야 한다.</li><li>동적으로 계산되는(dynamically-computed) 상수 A에 대한 심볼릭 참조는, A를 참조하는 <code>ldc</code>, <code>ldc_w</code>, <code>ldc2_w</code> 명령어가 실행되거나 A를 정적 인자로 참조하는 부트스트랩 메서드가 호출되기 전까지는 해석되지 않는다.</li><li>동적으로 계산되는(dynamically-computed) call site B에 대한 심볼릭 참조는, B를 정적 인자로 참조하는 부트스트랩 메서드가 호출되기 전까지는 해석되지 않는다.</li></ul><p>일반적으로 만족되어야 하는 것은 1, 2, 3번째 조건이고 4, 5번째는 특수한 경우에 대한 조건이다.</p><p>해석 시점은 JVM 구현체에 따라 다를 수 있다. <strong>지연(lazy) 링크 전략을 사용하면 클래스나 인터페이스에 포함된 심볼릭 참조는 해당 참조가 실제 사용될 때 개별적으로 해석</strong>된다. 반면에 <strong>즉시(eager) 링크 전략을 사용하면 클래스나 인터페이스가 확인될 때 모든 심볼릭 참조가 한꺼번에 해석</strong>된다. 지연 링크를 사용하면 해석 과정은 클래스나 인터페이스가 초기화 된 후에 실행될 수도 있다.</p><p>링크 과정을 정리하면 다음과 같다.</p><blockquote><p>링크는 <strong>확인, 준비, 해석 단계로 구성된다.</strong></p><p><strong>클래스나 인터페이스는 완전히 로딩된 후에 확인과 준비가 수행돼야 하고, 완전히 확인되고 준비된 뒤에 초기화되어야 한다.</strong></p><p><strong>해석은 초기화 이후에 실행될 수도 있다.</strong></p></blockquote><p>스펙을 보면 해석은 다시 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3.1" target="_blank" rel="noopener">클래스/인터페이스 해석</a>, <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3.2" target="_blank" rel="noopener">필드 해석</a>, <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3.3" target="_blank" rel="noopener">메서드 해석</a>, <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3.4" target="_blank" rel="noopener">인터페이스 메서드 해석</a>, <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3.5" target="_blank" rel="noopener">메서드 타입/핸들 해석</a>, <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.4.3.6" target="_blank" rel="noopener">동적 계산 상수/콜사이트 해석</a>, 이렇게 6가지로 나눠서 자세한 설명이 나와 있으니 관심있다면 찾아보기로 하고 다시 예제로 돌아와 보자. </p><p>Hello의 상수 풀은 다음과 같았다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #8.#26         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Class              #27            // homo/efficio/jvm/sample/Hello</span><br><span class="line">   #3 = Methodref          #2.#26         // homo/efficio/jvm/sample/Hello."&lt;init&gt;":()V</span><br><span class="line">   #4 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #5 = Methodref          #2.#30         // homo/efficio/jvm/sample/Hello.helloMessage:()Ljava/lang/String;</span><br><span class="line">   #6 = Methodref          #31.#32        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #7 = String             #33            // Hello, JVM</span><br><span class="line">   #8 = Class              #34            // java/lang/Object</span><br><span class="line">   #9 = Utf8               &lt;init&gt;</span><br><span class="line">  #10 = Utf8               ()V</span><br><span class="line">  #11 = Utf8               Code</span><br><span class="line">  #12 = Utf8               LineNumberTable</span><br><span class="line">  #13 = Utf8               LocalVariableTable</span><br><span class="line">  #14 = Utf8               this</span><br><span class="line">  #15 = Utf8               Lhomo/efficio/jvm/sample/Hello;</span><br><span class="line">  #16 = Utf8               main</span><br><span class="line">  #17 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #18 = Utf8               args</span><br><span class="line">  #19 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #20 = Utf8               hello</span><br><span class="line">  #21 = Utf8               StackMapTable</span><br><span class="line">  #22 = Utf8               helloMessage</span><br><span class="line">  #23 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #24 = Utf8               SourceFile</span><br><span class="line">  #25 = Utf8               Hello.java</span><br><span class="line">  #26 = NameAndType        #9:#10         // "&lt;init&gt;":()V</span><br><span class="line">  #27 = Utf8               homo/efficio/jvm/sample/Hello</span><br><span class="line">  #28 = Class              #35            // java/lang/System</span><br><span class="line">  #29 = NameAndType        #36:#37        // out:Ljava/io/PrintStream;</span><br><span class="line">  #30 = NameAndType        #22:#23        // helloMessage:()Ljava/lang/String;</span><br><span class="line">  #31 = Class              #38            // java/io/PrintStream</span><br><span class="line">  #32 = NameAndType        #39:#40        // println:(Ljava/lang/String;)V</span><br><span class="line">  #33 = Utf8               Hello, JVM</span><br><span class="line">  #34 = Utf8               java/lang/Object</span><br><span class="line">  #35 = Utf8               java/lang/System</span><br><span class="line">  #36 = Utf8               out</span><br><span class="line">  #37 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #38 = Utf8               java/io/PrintStream</span><br><span class="line">  #39 = Utf8               println</span><br><span class="line">  #40 = Utf8               (Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p>설명의 편의를 위해 즉시 링크 방식으로 해석이 진행된다고 가정하고, 위 상수 풀에서 유도되는 런타임 상수 풀에 있는 심볼릭 참조의 해석 과정을 몇 개만 예로 살펴보자.</p><p><code>#1 = Methodref          #8.#26         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code></p><p>Object 클래스가 확인 과정에서 메서드 영역에 로딩되어 있으므로, 메서드 영역에 저장된 Object 클래스의 바이트코드 내용에서 생성자(<code>&lt;init&gt;</code>)의 위치를 알아낼 수 있고, 그 위치를 <code>Methodref java/lang/Object.&quot;&lt;init&gt;&quot;</code>의 값으로 해석할 수 있다.</p><p><img src="https://i.imgur.com/MAiWMYz.png" alt="Imgur"></p><p><code>#2 = Class              #27            // homo/efficio/jvm/sample/Hello</code></p><p>Hello 인스턴스를 만들 때 필요한 Hello 클래스 정보는 이미 메서드 영역에 로딩되어 있으므로, 메서드 영역 내에서 Hello 클래스의 위치를 <code>Class homo/efficio/jvm/sample/Hello</code>의 값으로 해석할 수 있다.</p><p><img src="https://i.imgur.com/y0qP8vW.png" alt="Imgur"></p><p><code>#3</code>은 Hello 생성자를 가리키는 Methodref 항목인데, Methodref의 해석 과정은 앞의 <code>#1</code>에서 이미 다뤘으므로 설명은 생략하고 그림만 보자.</p><p><img src="https://i.imgur.com/XBMPitk.png" alt="Imgur"></p><p><code>#4 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;</code></p><p>System 클래스는 아직 로딩되어 있지 않으므로 먼저 로딩하고, 확인 후 준비 과정을 거치면서 System 클래스의 정적 필드인 <code>out</code>의 타입인 PrintStream 클래스도 로딩되고 참조형 변수인 <code>out</code>은 기본값인 null 로 초기화 된다.</p><p><img src="https://i.imgur.com/RJ3ZLvX.png" alt="Imgur"></p><p>대략 이런 식으로 로딩-링크 과정이 연쇄적으로 수행되면서 메서드 영역이 채워지고, 메서드 영역 내에서 클래스 단위로 생성되는 런타임 상수 풀 안에 있는 심볼릭 참조가 가리키는 값들이 결정된다.</p><p>하지만 이것도 위에 썼듯이 즉시 링크 방식일 때의 얘기고, <strong>지연 링크를 사용한다면 각 클래스의 초기화가 수행된 이후에 해석 과정이 수행</strong>될 수도 있다.</p><p>그럼 이제 초기화를 알아볼 차례다.</p><h2 id="초기화"><a href="#초기화" class="headerlink" title="초기화"></a>초기화</h2><p>초기화(initialization)는 <code>클래스 또는 인터페이스 초기화 메서드(class or interface initialization method)</code>를 실행할 때 수행되는 과정이다. 쉽게 말하면 <strong>여기에서 말하는 초기화는 정적 초기화(static initialization)를 말한다</strong>고 볼 수 있다.</p><p>그럼 초기화 메서드는 무엇일까?</p><h3 id="초기화-메서드"><a href="#초기화-메서드" class="headerlink" title="초기화 메서드"></a>초기화 메서드</h3><p>초기화 메서드(initialization method)는 두 가지가 있다.</p><h4 id="인스턴스-초기화-메서드"><a href="#인스턴스-초기화-메서드" class="headerlink" title="인스턴스 초기화 메서드"></a>인스턴스 초기화 메서드</h4><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.9.1" target="_blank" rel="noopener">인스턴스 초기화 메서드</a>는 자바 언어로 작성되는 생성자에 해당하며, 클래스는 0개 이상의 인스턴스 초기화 메서드를 가진다. <code>인스턴스 초기화 메서드</code>는 다음의 조건을 모두 충족해야 한다.</p><ul><li>(인터페이스가 아니고) 클래스 안에 정의된다.</li><li>(바이트코드 상에서) <code>&lt;init&gt;</code>라는 특수한 이름으로 표현된다.</li><li>반환 타입은 void</li></ul><p><code>인스턴스 초기화 메서드</code>는 생성자로서 힙에 인스턴스를 생성하는 역할을 담당하며, 이름에 초기화라는 용어가 들어가지만 여기에서 말하는 초기화와는 좀 다른 개념이고, 실제 스펙에서도 초기화는 (인스턴스 초기화 메서드를 배제하고) <code>class or interface initialization method(클래스 또는 인터페이스 초기화 메서드)</code>를 호출한다고 명시되어 있다. (<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.5" target="_blank" rel="noopener">JVM 스펙</a>에 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.9.2" target="_blank" rel="noopener">2.9.2</a> 라고 따로 명기)</p><h4 id="클래스-초기화-메서드-클래스-또는-인터페이스-초기화-메서드"><a href="#클래스-초기화-메서드-클래스-또는-인터페이스-초기화-메서드" class="headerlink" title="클래스 초기화 메서드(클래스 또는 인터페이스 초기화 메서드)"></a>클래스 초기화 메서드(클래스 또는 인터페이스 초기화 메서드)</h4><p>앞에서 링크 과정의 준비 단계 설명에 초기화가 잠시 언급된 적이 있다.<br><strong>정적 필드를 기본값으로 초기화 하는 것은 링크의 준비 단계에서 수행</strong>되고, <strong>정적 필드를 특정값으로 초기화 하는 것은 초기화 단계에서 수행</strong>된다고 했는데, 지금 설명하고 있는 이 <code>클래스 또는 인터페이스 초기화 메서드</code>가 실행되는 것이 초기화 단계다.</p><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.9.2" target="_blank" rel="noopener">클래스 또는 인터페이스 초기화 메서드</a>는 클래스나 인터페이스에(클래스나 인터페이스의 바이트코드에) 1개만 존재할 수 있으며, 다음의 조건을 모두 충족해야 한다.</p><ul><li>(바이트코드 상에서) <code>&lt;clinit&gt;</code>라는 특수한 이름으로 표현된다.</li><li>반환 타입은 void</li><li>class 파일 버전 51 이상에서는 <code>ACC_STATIC</code> 플래그가 붙는다.</li></ul><p>인스턴스 초기화 메서드는 생성자에 해당한다는 명확하고 직관적인 설명이 스펙에 있는데, <code>클래스 또는 인터페이스 초기화 메서드</code>는 아쉽게도 뭐에 해당하는지 스펙에는 구체적인 설명이 없다.</p><p>그래서 몇 가지 테스트를 해 본 결과 <strong>클래스 초기화 메서드는 쉽게 말해 static 블록(들)의 내용을 하나로 합친 것</strong>이라고 볼 수 있다. 이건 말보다 코드가 훨씬 쉬우니 코드로 살펴보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.jvm.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInitSample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        j = <span class="number">22</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컴파일한 후 <code>javap -v -p -s homo.efficio.jvm.sample.StaticInitSample</code> 명령으로 바이트코드를 살펴보면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">homo</span>.<span class="title">efficio</span>.<span class="title">jvm</span>.<span class="title">sample</span>.<span class="title">StaticInitSample</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #5.#19         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #4.#20         // homo/efficio/jvm/sample/StaticInitSample.i:I</span><br><span class="line">   #3 = Fieldref           #4.#21         // homo/efficio/jvm/sample/StaticInitSample.j:I</span><br><span class="line">   #4 = Class              #22            // homo/efficio/jvm/sample/StaticInitSample</span><br><span class="line">   #5 = Class              #23            // java/lang/Object</span><br><span class="line">   #6 = Utf8               i</span><br><span class="line">   #7 = Utf8               I</span><br><span class="line">   #8 = Utf8               j</span><br><span class="line">   #9 = Utf8               &lt;init&gt;</span><br><span class="line">  #10 = Utf8               ()V</span><br><span class="line">  #11 = Utf8               Code</span><br><span class="line">  #12 = Utf8               LineNumberTable</span><br><span class="line">  #13 = Utf8               LocalVariableTable</span><br><span class="line">  #14 = Utf8               this</span><br><span class="line">  #15 = Utf8               Lhomo/efficio/jvm/sample/StaticInitSample;</span><br><span class="line">  #16 = Utf8               &lt;clinit&gt;</span><br><span class="line">  #17 = Utf8               SourceFile</span><br><span class="line">  #18 = Utf8               StaticInitSample.java</span><br><span class="line">  #19 = NameAndType        #9:#10         // "&lt;init&gt;":()V</span><br><span class="line">  #20 = NameAndType        #6:#7          // i:I</span><br><span class="line">  #21 = NameAndType        #8:#7          // j:I</span><br><span class="line">  #22 = Utf8               homo/efficio/jvm/sample/StaticInitSample</span><br><span class="line">  #23 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> homo.efficio.jvm.sample.StaticInitSample();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lhomo/efficio/jvm/sample/StaticInitSample;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">11</span></span><br><span class="line">         2: putstatic     #2                  // Field i:I</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">22</span></span><br><span class="line">         7: putstatic     #3                  // Field j:I</span><br><span class="line">        <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">5</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"StaticInitSample.java"</span></span><br></pre></td></tr></table></figure><p>상수 풀의 16번째 항목에 <code>#16 = Utf8               &lt;clinit&gt;</code>가 1개 있고, 아래 코드 내용의 <code>static {};</code> 아래 부분에 i를 1로, j를 2로 초기화 하는 부분이 소스코드에는 별개의 static 블록에 있었는데 바이트코드에서는 하나로 합쳐저 있음을 확인할 수 있다.</p><h3 id="초기화-정리"><a href="#초기화-정리" class="headerlink" title="초기화 정리"></a>초기화 정리</h3><p>링크 단계 다음에 수행되는 초기화 단계를 정리해보면 다음과 같다.</p><blockquote><p><strong>초기화는 바이트코드에서 <code>&lt;clinit&gt;</code>으로 표시되는 <code>클래스 또는 인터페이스 초기화 메서드</code>(자바 소스 코드의 static 블록을 하나로 합친 것)를 실행하는 것</strong>을 의미한다.</p><p><strong>링크 단계 이후에 수행되는 초기화란 결국 정적 초기화를 의미</strong>한다.</p></blockquote><p>다시 원래의 예제 코드인 Hello로 돌아와보자. Hello에는 정적 필드가 없으므로 초기화 과정에서 따로 수행되는 것은 없다. 초기화 과정까지 마쳤으면 이제 드디어 JVM에 의해 main 메서드가 호출될 차례다.</p><h1 id="main-메서드-호출"><a href="#main-메서드-호출" class="headerlink" title="main 메서드 호출"></a>main 메서드 호출</h1><p>앞서 설명한 로딩, 링크, 초기화 과정은 바이트코드 내용 기준, 즉 클래스 단위의 정적인 준비를 다뤘는데, main 메서드 호출부터는 실제 프로그램의 동적인 실행이 일어난다. 프로그램이 실행되려면 프로그램 흐름의 최소 단위인 스레드가 있어야 한다. <strong>JVM이 main 메서드 호출을 위한 main 스레드를 생성</strong>한다. </p><h2 id="main-스레드-생성"><a href="#main-스레드-생성" class="headerlink" title="main 스레드 생성"></a>main 스레드 생성</h2><p><strong>스레드가 생성되면 PC 레지스터, JVM 스택, 네이티브 메서드 스택이 함께 생성</strong>되고, 런타임 데이터 영역은 대략 다음과 같아진다.</p><p><img src="https://i.imgur.com/izWNxMs.png" alt="Imgur"></p><h2 id="PC-Register"><a href="#PC-Register" class="headerlink" title="PC Register"></a>PC Register</h2><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5.1" target="_blank" rel="noopener">PC 레지스터</a>에는 현재 실행 중인 메서드가 </p><ul><li>네이티브 메서드가 아니면 <strong>현재 실행 중인 JVM 명령어의 위치가 저장</strong>되고, </li><li>네이티브 메서드이면 PC 레지스터에 저장되는 값은 정의되지 않는다(undefined).</li></ul><h2 id="JVM-Stack"><a href="#JVM-Stack" class="headerlink" title="JVM Stack"></a>JVM Stack</h2><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5.2" target="_blank" rel="noopener">JVM 스택</a>은 LIFO(Last In First Out) 방식으로 동작하는 자료구조서 <strong>JVM 스택에는 프레임이 저장</strong>된다.</p><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>JVM 스택에 쌓이는 정보의 단위가 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.6" target="_blank" rel="noopener">프레임(Frame)</a>이다. 프레임은 데이터나 중간 결과의 저장, 동적 링크, 값 반환, 예외 디스패치에 사용된다.</p><p><strong>메서드 하나가 호출될 때마다 새 프레임이 생성되어 스택에 쌓이고, 메서드 호출이 정상 완료되거나 예외가 던져지면 프레임은 스택에서 빠지면서 소멸된다.</strong></p><p><strong>프레임은 로컬 변수 배열, 오퍼랜드 스택, 프레임에 해당하는 메서드가 속한 클래스의 런타임 상수 풀에 대한 참조 이렇게 3개의 자료구조로 구성</strong>된다.</p><p><img src="https://i.imgur.com/t1MmhAk.png" alt="Imgur"></p><h4 id="Local-Variables"><a href="#Local-Variables" class="headerlink" title="Local Variables"></a>Local Variables</h4><p>프레임은 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.6.1" target="_blank" rel="noopener">로컬 변수 배열(Local Variables</a>을 하나 가지고 있다. 로컬 변수 배열의 크기는 컴파일 타임에 결정되며 바이트코드의 <code>Code</code> 속성에 <code>locals</code>으로 표시된다.</p><p><code>boolean</code>, <code>byte</code>, <code>char</code>, <code>short</code>, <code>int</code>, <code>float</code>, <code>reference</code>, <code>returnAddress</code>는 배열의 1개의 슬롯에 저장되고, <code>long</code>과 <code>double</code>은 2개의 슬롯에 걸쳐 저장된다.</p><p>메서드가 호출될 때 그 <strong>메서드의 파라미터 값은 로컬 변수 배열을 통해 넘겨진다.</strong></p><ul><li>메서드가 <strong>클래스 메서드이면 첫 번째 파라미터는 0번 슬롯에 두 번째 파라미터는 1번 슬롯에 차례대로 저장</strong>되고, </li><li>메서드가 <strong>인스턴스 메서드이면 <code>this</code>가 0번 슬롯에 먼저 저장되고, 첫 번째 파라미터는 1번 슬롯에, 두 번째 파라미터는 2번 슬롯에 차례대로 저장</strong>된다.</li></ul><p>파이썬은 인스턴스 메서드 호출 시 첫 인자로 <code>self</code>를 항상 넘겨주는데, 자바에서는 소스 코드에 직접 명시하지 않아도 컴파일러가 바이트코드를 생성할 때 <code>this</code>에 대한 심볼릭 참조를 로컬 변수 배열의 0번 슬롯에 넣어준다. 바이트코드의 <code>Code</code> 속성으로 표시되는 메서드의 바이트코드를 보면 다음과 같이 <code>LocalVariableTable</code>에 <code>this</code>에 대한 정보가 표시되는 것을 볼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> homo.efficio.jvm.sample.Hello();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lhomo/efficio/jvm/sample/Hello;  <span class="comment">// &lt;== 여기!!</span></span><br></pre></td></tr></table></figure><h4 id="Operand-Stack"><a href="#Operand-Stack" class="headerlink" title="Operand Stack"></a>Operand Stack</h4><p><strong>프레임은 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.6.2" target="_blank" rel="noopener">오퍼랜드 스택(Operand Stack)</a>을 하나 가지고 있다.</strong> 오퍼랜드 스택의 최대 깊이는 컴파일 타임에 결정되며 바이트코드의 <code>Code</code> 속성에 <code>stack</code>으로 표시된다.</p><p>오퍼랜드 스택은 프레임이 생성될 때는 비어있다. 오퍼랜드 스택에 상수, 로컬 변수, 필드를 쌓는 명령어와 오퍼랜드 스택에서 값을 꺼내서 연산을 하고 다시 스택에 넣는 명령어는 JVM 명령어로 제공되며 그 중에서 Hello 예제 코드에 사용된 JVM 명령어에 대한 설명은 앞으로 차차 알아보기로 하자. </p><p>메서드에 전달되는 파라미터를 준비하거나 메서드가 반환해주는 결과값을 받을 때도 오퍼랜드 스택이 사용되며 <strong>단순하게 표현하면 값을 가져오고 넘겨주는 거의 모든 과정에 오퍼랜드 스택이 사용된다고 볼 수 있다.</strong></p><h4 id="Reference-to-Run-Time-Constant-Pool"><a href="#Reference-to-Run-Time-Constant-Pool" class="headerlink" title="Reference to Run-Time Constant Pool"></a>Reference to Run-Time Constant Pool</h4><p>런타임 상수 풀에 대한 참조는 말 그대로 <strong>해당 프레임에 대응되는 메서드가 속한 클래스의 런타임 상수 풀에 대한 참조</strong>를 의미한다.<br>스펙에서 별도의 항목으로 기술되어 있지는 않고, <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.6" target="_blank" rel="noopener">프레임의 설명 부분에서 언급</a>되고 있다.</p><p>하나의 스레드에서 여러 인스턴스의 메서드를 실행할 수 있고, 그때마다 프레임이 생성되어 JVM 스택에 쌓이고, <strong>프레임에서 해당 클래스의 런타임 상수 풀에 있는 정보를 사용하려면 이 참조가 있어야 한다.</strong></p><p>위 그림에서는 하나의 예로 Hello 클래스의 런타임 상수 풀을 가리키도록 표현했을 뿐이고, 프레임에 따라 각각 다른 클래스의 런타임 상수 풀을 가리키게 된다.</p><h2 id="Native-Method-Stack"><a href="#Native-Method-Stack" class="headerlink" title="Native Method Stack"></a>Native Method Stack</h2><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5.6" target="_blank" rel="noopener">네이티브 메서드 스택(Native Method Stack)</a>은 JVM 스택이 아닌 보통 C 스택이라고 부르는 전통적인 스택이며, 자바가 아닌 다른 언어로 작성된 네이티브 메서드를 지원하기 위해 사용되는 스택이다. 네이티브 메서드 스택은 JVM 스택과 마찬가지로 스레드 단위의 자료구조다.</p><p>JVM이 반드시 네이티브 메서드를 지원해야 하는 것은 아니므로 네이티브 메서드 스택 역시 필수는 아니다. </p><h2 id="main-메서드-호출-1"><a href="#main-메서드-호출-1" class="headerlink" title="main 메서드 호출"></a>main 메서드 호출</h2><p>이제 JVM의 런타임 데이터 영역을 구성하는 요소들에 대한 정적인 설명을 모두 알아봤으므로 실제 main 메서드 호출과 함께 변화 과정을 동적으로 알아보자.</p><p>main 메서드의 바이트코드는 다음과 같다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">       0: new           #2                  // class homo/efficio/jvm/sample/Hello</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokespecial #3                  // Method "&lt;init&gt;":()V</span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       8: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">11</span>: aload_1</span><br><span class="line">      12: invokevirtual #5                  // Method helloMessage:()Ljava/lang/String;</span><br><span class="line">      15: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">18</span>: goto          <span class="number">18</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">7</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">8</span>: <span class="number">18</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">          <span class="number">8</span>      <span class="number">13</span>     <span class="number">1</span> hello   Lhomo/efficio/jvm/sample/Hello;</span><br><span class="line">    StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">      frame_type = <span class="number">252</span> <span class="comment">/* append */</span></span><br><span class="line">        offset_delta = <span class="number">18</span></span><br><span class="line">        locals = [ class homo/efficio/jvm/sample/Hello ]</span><br></pre></td></tr></table></figure><p>오퍼랜드 스택의 최대 크기는 2, 로컬 변수 배열 크기는 2, 인자 갯수는 1이다.</p><p>main 메서드가 호출되면 다음과 같이 <code>main 메서드 프레임</code>이 생성된다. 오퍼랜드 스택과 로컬 변수 배열은 비어있는 상태이고, 런타임 상수 풀에 대한 참조는 Hello 클래스의 런타임 상수 풀을 가리킨다. </p><p>오퍼랜드 스택은 최대 크기가 2이고 아직 아무 것도 쌓여있지 않은 상태이므로 점선으로 표시했고, 로컬 변수 배열은 안에 값은 없지만 2개의 슬롯이 확정적으로 만들어져있으므로 실선으로 표시했다.</p><p><img src="https://i.imgur.com/O7LRpA6.png" alt="Imgur"></p><h3 id="0-new-2-class-homo-efficio-jvm-sample-Hello"><a href="#0-new-2-class-homo-efficio-jvm-sample-Hello" class="headerlink" title="0: new #2  // class homo/efficio/jvm/sample/Hello"></a><code>0: new #2  // class homo/efficio/jvm/sample/Hello</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.new" target="_blank" rel="noopener"><code>new</code></a>는 인자로 지정된 클래스의 새 인스턴스에 필요한 메모리를 힙 안에 할당하고, 할당된 위치를 가리키는 참조를 오퍼랜드 스택에 쌓는다. 이 때 인스턴스 변수들이 기본값으로 초기화 된다. 참고로 인스턴스 변수가 아닌 정적 변수는 앞서 초기화 과정에서 이미 특정값으로 초기화 되어 있는 상태다.</p><p>Hello 클래스의 새 인스턴스에 필요한 메모리를 할당하고 그 위치에 대한 참조를 오퍼랜드 스택에 쌓는다. (파란색 동그라미)</p><p><img src="https://i.imgur.com/e6u8VRO.png" alt="Imgur"></p><h3 id="3-dup"><a href="#3-dup" class="headerlink" title="3: dup"></a><code>3: dup</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.dup" target="_blank" rel="noopener"><code>dup</code></a>은 오퍼랜드 스택 맨 위에 있는 값을 복사해서 오퍼랜드 스택 맨 위에 쌓는다.(초록색 동그라미)</p><p><img src="https://i.imgur.com/Ve6moKN.png" alt="Imgur"></p><h3 id="4-invokespecial-3-Method-quot-lt-init-gt-quot-V"><a href="#4-invokespecial-3-Method-quot-lt-init-gt-quot-V" class="headerlink" title="4: invokespecial #3  // Method &quot;&lt;init&gt;&quot;:()V"></a><code>4: invokespecial #3  // Method &quot;&lt;init&gt;&quot;:()V</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.invokespecial" target="_blank" rel="noopener"><code>invokespecial</code></a>은 다음과 같이 생성자, 현재 클래스, 수퍼클래스의 메서드를 호출한다고 나와 있다. </p><blockquote><p>invokespecial</p><p>Operation<br> Invoke instance method; direct invocation of instance initialization methods and methods of the current class and its supertypes</p></blockquote><p>그래서 private 메서드를 호출할 때 <code>invokespecial</code>이 사용된다고 써있는 자료도 흔히 볼 수 있는데, 막상 <code>javac</code>, <code>javap</code>로 확인해보면 현실은 좀 다르다. 대부분 생성자와 수퍼클래스의 생성자를 호출할 때 <code>invokespecial</code>이 사용되고, 상속받은 클래스에서 수퍼클래스의 메서드를 호출할 때와, 같은 클래스 내의 다른 private 인스턴스 메서드를 호출할 때는 <code>invokevirtual</code>이 사용된다. </p><p><code>invokespecial</code>로 특정 메서드가 호출되면 프레임과 로컬 변수 배열, 오퍼랜드 스택, 런타임 상수 풀에 대한 참조가 생겨난다. 호출하는 쪽의 오퍼랜드 스택에서 호출되는 메서드의 파라미터 갯수 + 1개 만큼 호출하는 쪽의 오퍼랜드 스택에서 값을 꺼내서 호출되는 쪽에 새로 생성된 로컬 변수 배열의 0번 슬롯까지 채워지도록 뒤에서부터 차례로 채운다.</p><p>글로는 복잡하니 그림으로 보자. 새로 호출하는 메서드의 파라미터가 2개라면 다음과 같이 진행된다. 먼저 호출하기 전 상태는 다음과 같다.</p><p><img src="https://i.imgur.com/jQIe28m.png" alt="Imgur"></p><p>파라미터 2개 있는 메서드를 호출하면 다음과 같이 새로 프레임이 생성되고, 호출하는 쪽의 오퍼랜드 스택에서 2 + 1인 3개의 값이 차례로 꺼내져서, 호출되는 쪽의 로컬 변수 배열의 2, 1, 0번 슬롯에 차례로 저장된다.</p><p><img src="https://i.imgur.com/YJBfT4H.png" alt="Imgur"></p><p>파라미터 갯수인 2개 외에 마지막에 추가로 하나 더 꺼내져서 호출되는 프레임의 로컬 변수 배열 0번 슬롯에 저장되는 값(초록색 동그라미)은 스펙에 <code>objectref</code>라고 표현되어 있으며 반드시 참조값이어야 한다.</p><p>지금 설명한 호출하는 쪽의 프레임의 오퍼랜드 스택에서 값을 꺼내서 호출되는 쪽의 프레임의 로컬 변수 배열에 저장하는 방식은 <code>invokespecial</code> 뿐 아니라 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.7.invokevirtual" target="_blank" rel="noopener"><code>invokevirtual</code></a>에도 공히 적용되는 방식이다.</p><p>스택 맨 위에 있는 Hello 인스턴스에 대한 참조(초록색 동그라미)를 꺼내서 Hello 클래스의 디폴트 생성자의 첫 번째 인자로 넘기면서 디폴트 생성자를 호출한다. Hello 클래스의 디폴트 생성자에 대한 프레임(<code>Hello 생성자 프레임</code>)이 새로 생성되고 JVM 스택의 맨 위(<code>main 메서드 프레임</code> 위)에 쌓인다. <code>Hello 생성자 프레임</code> 안에 있는 로컬 변수 배열의 0번 슬롯에 새 Hello 인스턴스에 대한 참조가 저장된다. </p><p><img src="https://i.imgur.com/jvvanVL.png" alt="Imgur"></p><p>Hello 생성자의 바이트코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> homo.efficio.jvm.sample.Hello();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lhomo/efficio/jvm/sample/Hello;</span><br></pre></td></tr></table></figure><p><code>Code</code> 속성 바로 아래줄에 <code>stack=1, locals=1, args_size=1</code>라고 되어 있는데, <code>Hello 생성자 프레임</code>의 오퍼랜드 스택 최대 깊이는 1, 로컬 변수 배열의 크기는 1, 인자의 갯수는 1개로 되어 있다. 오퍼랜드 스택 최대 깊이와 로컬 변수 배열의 크기는 위 그림에 적용되어 있다.</p><p>Hello 생성자 프레임이 생성되면 가장 위에 있는 명령어인 <code>aload_0</code>이 먼저 실행된다.</p><h4 id="0-aload-0"><a href="#0-aload-0" class="headerlink" title="0: aload_0"></a><code>0: aload_0</code></h4><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener"><code>aload_n</code></a>은 로컬 변수 배열의 <code>n</code>번 슬롯에 저장된 참조값(load 앞에 붙은 <code>a</code>가 참조값을 의미)을 오퍼랜드 스택 맨 위에 쌓는다.</p><p><code>Hello 생성자 프레임</code>의 로컬 변수 배열의 0번 슬롯에 저장되어 있던 새 Hello 인스턴스에 대한 참조(초록색 동그라미)가 <code>Hello 생성자 프레임</code>의 오퍼랜드 스택에 쌓인다.</p><p><img src="https://i.imgur.com/zP0BaqB.png" alt="Imgur"></p><h4 id="1-invokespecial-1-Method-java-lang-Object-quot-lt-init-gt-quot-V"><a href="#1-invokespecial-1-Method-java-lang-Object-quot-lt-init-gt-quot-V" class="headerlink" title="1: invokespecial #1  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V"></a><code>1: invokespecial #1  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code></h4><p><code>invokespecial</code> 명령어에 대한 설명은 앞에서 알아봤으므로 생략한다. </p><p>Object의 생성자를 호출하면 힙에 Object의 새 인스턴스를 위한 메모리가 할당되고, <code>Object 생성자 프레임</code>이 생성된다.</p><p><code>Hello 생성자 프레임</code>의 오퍼랜드 스택 맨 위에 있던 <code>this</code>(초록색 동그라미)가 꺼내지고 새로 생성된 <code>Object 생성자 프레임</code>의 로컬 변수 배열의 0번 슬롯에 저장(초록색 동그라미)된다.</p><p><img src="https://i.imgur.com/Dw4W7or.png" alt="Imgur"></p><p>Object의 생성자의 바이트코드는 다음과 같다.</p><blockquote><p>javap -v -p -s java.lang.Object</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.Object();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">0</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">50</span>: <span class="number">0</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">1</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ljava/lang/Object;</span><br><span class="line">  RuntimeVisibleAnnotations:</span><br><span class="line">    0: #27()</span><br><span class="line">      jdk.internal.HotSpotIntrinsicCandidate</span><br></pre></td></tr></table></figure><p>설명하는 입장에서 매우 다행스럽게도 그냥 <code>4: return</code> 하는 것이 전부다. <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.return" target="_blank" rel="noopener"><code>return</code></a>은 void를 반환하며, 오퍼랜드 스택에 있던 모든 값이 전부 폐기되고 <code>Object 생성자 프레임</code>도 폐기되고, 호출한 메서드의 프레임인 <code>Hello 생성자 프레임</code>으로 제어가 넘어간다.</p><p><img src="https://i.imgur.com/1XJNvOY.png" alt="Imgur"></p><p>Hello의 디폴트 생성자의 바이트코드에서 남은 것은 <code>return</code>뿐이다. 따라서 Hello의 디폴트 생성자 실행이 완료되면 <code>Hello 생성자 프레임도 폐기</code>되고 다음과 같이 <code>main 메서드 프레임</code>의 오퍼랜드 스택에는 아래와 같이 새로 생성 및 초기화된 Hello 인스턴스에 대한 참조만 남게 된다.</p><p><img src="https://i.imgur.com/lEsyaU9.png" alt="Imgur"></p><h3 id="7-astore-1"><a href="#7-astore-1" class="headerlink" title="7: astore_1"></a><code>7: astore_1</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener"><code>astore_n</code></a>은 오퍼랜드 스택의 맨 위에 있는 값을 꺼내서 로컬 변수 배열의 <code>n</code> 위치에 저장한다. </p><p>현재 <code>main 메서드 프레임</code>의 오퍼랜드 스택 맨 위에 있는 값인 새 Hello 인스턴스에 대한 참조(<code>this</code>)를 꺼내서 <code>main 메서드 프레임</code>의 로컬 변수 배열의 1번 슬롯에 넣는다.</p><p>결국 로컬 변수에 뭔가 저장하는 것인데 자바 소스 코드의 <code>final Hello hello = new Hello();</code>에 해당한다.</p><p><img src="https://i.imgur.com/ZOUyk7M.png" alt="Imgur"></p><h3 id="8-getstatic-4-Field-java-lang-System-out-Ljava-io-PrintStream"><a href="#8-getstatic-4-Field-java-lang-System-out-Ljava-io-PrintStream" class="headerlink" title="8: getstatic #4  // Field java/lang/System.out:Ljava/io/PrintStream;"></a><code>8: getstatic #4  // Field java/lang/System.out:Ljava/io/PrintStream;</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.getstatic" target="_blank" rel="noopener"><code>getstatic</code></a>은 클래스의 정적(static) 필드 값을 가져와서 오퍼랜드 스택에 쌓는다.</p><p>여기에서는 System 클래스의 정적 변수인 out의 값을 System의 런타임 상수 풀에서 읽어서 <code>main 메서드 프레임</code>의 오퍼랜드 스택에 쌓는다. (초록색 동그라미)</p><p><img src="https://i.imgur.com/guTnj4t.png" alt="Imgur"></p><h3 id="11-aload-1"><a href="#11-aload-1" class="headerlink" title="11: aload_1"></a><code>11: aload_1</code></h3><p><code>aload_1</code>은 <code>main 메서드 프레임</code>의 로컬 변수 배열 1번 슬롯에 있던 값을 <code>main 메서드 프레임</code>의 오퍼랜드 스택에 쌓는다. (파란색 동그라미)</p><p><img src="https://i.imgur.com/fU90B7m.png" alt="Imgur"></p><h3 id="12-invokevirtual-5-Method-helloMessage-Ljava-lang-String"><a href="#12-invokevirtual-5-Method-helloMessage-Ljava-lang-String" class="headerlink" title="12: invokevirtual #5  // Method helloMessage:()Ljava/lang/String;"></a><code>12: invokevirtual #5  // Method helloMessage:()Ljava/lang/String;</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.invokevirtual" target="_blank" rel="noopener"><code>invokevirtual</code></a>은 자바 메서드 호출의 기본 방식이며, 객체 참조(obj.)를 붙여서 호출되는 일반적인 메서드를 호출한다. 해당 메서드가 속한 인스턴스를 가리키는 참조가 첫 번째 파라미터로 넘겨진다. 호출에 의해 새 프레임이 생성되고 로컬 변수 배열의 0번 슬롯에 첫 번째 인자로 넘어온 값인 해당 메서드가 속한 인스턴스를 가리키는 참조가 저장되고 그 이후의 인자도 로컬 변수 배열에 순서대로 저장된다. 앞에서 <code>invokespecial</code>에 나왔던 그림 설명을 참고한다.</p><p><code>helloMessage()</code>의 바이트코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.<span class="function">String <span class="title">helloMessage</span><span class="params">()</span></span>;</span><br><span class="line">  descriptor: ()Ljava/lang/String;</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       0: ldc           #7                  // String Hello, JVM</span><br><span class="line">       <span class="number">2</span>: areturn</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">3</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lhomo/efficio/jvm/sample/Hello;</span><br></pre></td></tr></table></figure><p><code>helloMessage()</code>가 호출되면 <code>helloMessage 메서드 프레임</code>이 새로 생성되고, <code>main 메서드 프레임</code>의 오퍼랜드 스택 맨 위에 있던 값(파란 동그라미)이 꺼내져서 <code>helloMessage 메서드 프레임</code>의 로컬 변수 배열 0번 슬롯에 저장된다.</p><p><img src="https://i.imgur.com/ZbJ4ISa.png" alt="Imgur"></p><h4 id="0-ldc-7-String-Hello-JVM"><a href="#0-ldc-7-String-Hello-JVM" class="headerlink" title="0: ldc #7  // String Hello, JVM"></a><code>0: ldc #7  // String Hello, JVM</code></h4><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.ldc" target="_blank" rel="noopener"><code>ldc</code></a>는 런타임 상수 풀의 항목 하나를 오퍼랜드 스택의 맨 위에 쌓는다.</p><p>Hello 클래스의 런타임 상수 풀의 7번 항목인 문자열 리터럴 <code>&quot;Hello, JVM&quot;</code>에 대한 참조를 <code>helloMessage 메서드 프레임</code>의 오퍼랜드 스택 맨 위에 쌓는다.</p><p>문자열 리터럴이 저장되는 문자열 풀(String pool)은 JVM 스펙을 뒤져봤으나 찾을 수 없었다. <a href="http://java-performance.info/string-intern-in-java-6-7-8/" target="_blank" rel="noopener">http://java-performance.info/string-intern-in-java-6-7-8/</a> 에 따르면 문자열 풀은 Java 6까지는 힙이 아닌 PermGen 영역에 있었지만, Java 7부터 힙에 존재한다고 한다.</p><p>따라서 스펙에서 확인한 내용은 아니지만 Java 11에서도 문자열 풀은 힙에 존재한다고 보면 다음과 같이 표현할 수 있다.</p><p><img src="https://i.imgur.com/NCga0nz.png" alt="Imgur"></p><h4 id="2-areturn"><a href="#2-areturn" class="headerlink" title="2: areturn"></a><code>2: areturn</code></h4><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.areturn" target="_blank" rel="noopener"><code>areturn</code></a>은 오퍼랜드 스택 맨 위에 있는 참조값(return 앞에 있는 <code>a</code>가 참조값을 의미)을 꺼내서 호출한 메서드 프레임의 오퍼랜드 스택 맨 위에 저장하고, <code>areturn</code>이 속한 프레임을 폐기하고 제어를 호출한 메서드 프레임으로 넘겨준다.</p><p><code>helloMessage 메서드 프레임</code>의 오퍼랜드 스택 맨 위에 있던 값은 <code>&quot;Hello, JVM&quot;</code>에 대한 참조이며 이 값을 <code>main 메서드 프레임</code>의 오퍼랜드 스택 맨 위에 쌓는다. 결국 <strong>메서드가 값을 반환한다는 것은 호출된 프레임의 오퍼랜드 스택 맨 위의 값을 꺼내서 호출한 프레임의 오퍼랜드 스택 맨 위에 저장하는 것</strong>을 의미한다.</p><p><img src="https://i.imgur.com/vz0uuaf.png" alt="Imgur"></p><h3 id="15-invokevirtual-6-Method-java-io-PrintStream-println-Ljava-lang-String-V"><a href="#15-invokevirtual-6-Method-java-io-PrintStream-println-Ljava-lang-String-V" class="headerlink" title="15: invokevirtual #6  // Method java/io/PrintStream.println:(Ljava/lang/String;)V"></a><code>15: invokevirtual #6  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</code></h3><p>PrintStream 클래스의 println(String)의 바이트코드는.. 매우 길다.. 어차피 <code>invokevirtual</code>은 앞에서 살펴봤고 그 외에 오퍼랜드 스택이나 로컬 지역 변수의 변화 과정을 앞에서 계속 봐왔으므로, println(String)은 결과만 보자.</p><p><code>main 메서드 프레임</code>의 오퍼랜드 스택에 있던 System.out에 대한 참조와 <code>&quot;Hello, JVM&quot;</code>에 대한 참조는<code>invokevirtual</code>로 System.out.println(String)을 호출하면서 모두 꺼내지고<code>main 메서드 프레임</code>의 오퍼랜드 스택은 비워진다. <code>println 메서드 프레임</code>이 새로 생성되고 인자로 전달받은 참조를 활용해서 “Hello, JVM”을 화면에 출력하고, <code>println 메서드 프레임</code>은 폐기된 후의 모습은 다음과 같다.</p><p><img src="https://i.imgur.com/BWa4gBm.png" alt="Imgur"></p><h3 id="18-goto-18"><a href="#18-goto-18" class="headerlink" title="18: goto 18"></a><code>18: goto 18</code></h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5.goto" target="_blank" rel="noopener"><code>goto</code></a>는 오퍼랜드 스택의 변화 없이 특정 행으로 실행 흐름을 이동시킨다.</p><p>18행에서 18행으로 계속 이동하면 결국 무한루프다. 자바 소스 코드의 <code>while(true) {}</code>가 여기에 해당된다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>여기까지 바이트코드 흐름에 따라 JVM의 런타임 데이터 영역 내의 자료구조들이 어떻게 변화하는지 살펴봤다. 사실 몰라도 일반적인 개발을 하는데 거의 지장이 없다시피한 내용이라서 그림 한땀한땀 그리고 고치고를 반복할 때마다 내가 이 짓을 왜하고 있나.. 이쯤에서 그만두자.. 하는 생각이 든 게 한 두번이 아니었.. ㅠㅜ </p><p>그래도 인터넷 어디를 뒤져봐도 자바 프로그램의 실행 과정에 대해 이보다 친절한 설명은 없으리라..</p><blockquote><p>JVM에서 실행되는 프로그램(class파일)을 실행하면 JVM이 기동된다.</p><p>JVM이 기동되면 힙(Heap)과 메서드 영역(Method Area)가 생성된다.</p><p>프로그램 실행에 필요한 시작 클래스의 바이트코드가 클래스로더를 통해 로딩되어 메서드 영역에 저장된다.<br>이 때 바이트코드에 있던 상수 풀의 내용을 바탕으로 런타임 상수 풀이 클래스 단위로 만들어져 메서드 영역에 함께 저장된다.</p><p>링크(확인, 준비, 해석)를 통해 Object 등 프로그램 실행에 필요한 다른 클래스들이 로딩되고 필요하다면 정적으로 초기화 된다.</p><p>시작 클래스의 main 메서드 실행을 위한 main 스레드가 생성된다.</p><p>main 스레드가 생성되면 PC 레지스터, JVM 스택, 네이티브 메서드 스택이 한 개씩 main 스레드에 생성된다.<br>JVM 스택이 생성되면 main 메서드를 위한 main 메서드 프레임이 생성된다.<br>main 메서드 프레임이 생성되면 로컬 변수 배열, 오퍼랜드 스택, 런타임 상수 풀에 대한 참조가 한 개씩 main 메서드 프레임에 생성된다.</p><p>main 메서드의 내용에 따라 로컬 변수 배열, 오퍼랜드 스택, 런타임 상수 풀에 대한 참조를 이용해서 필요한 값이나 참조를 연산하고,<br>메서드 호출이 발생하면 해당 메서드를 위한 새 로컬 변수 배열, 오퍼랜드 스택, 런타임 상수 풀에 대한 참조가 포함된 새 프레임이 생성되어 JVM 스택 위에 쌓이고,<br>메서드 호출이 종료되면 해당 프레임이 JVM 스택에서 빠져나가고 제어는 다시 호출한 메서드의 프레임으로 돌아온다.<br>이 때 반환값이 있다면 호출한 메서드의 프레임의 오퍼랜드 스택의 맨 위에 쌓인다.</p><p>한 장의 그림으로 보면 다음과 같다.</p><p><img src="https://i.imgur.com/NCga0nz.png" alt="Imgur"></p></blockquote><h2 id="마지막-쉬운-퀴즈"><a href="#마지막-쉬운-퀴즈" class="headerlink" title="마지막 쉬운 퀴즈"></a>마지막 쉬운 퀴즈</h2><p>다음과 같은 코드를 실행하면 HelloNoInstance 인스턴스가 힙에 만들어질까 안 만들어질까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.jvm.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNoInstance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, JVM"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스 이름에 답이 있지만 HelloNoInstance 인스턴스는 힙에 만들어지지 않는다. 아래는 VisualVM으로 힙 덤프를 떠서 확인한 그림이다.</p><p><img src="https://i.imgur.com/S0cm4E8.png" alt="Imgur"></p><p>참고로 Java 11 기준으로 간단한 헬로월드 프로그램이 수행되는데 로딩되는 클래스의 수는 몇 개일까? 이건 직접 알아보기로 하자. ^^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Back-to-the-Essence-Java-컴파일에서-실행까지-2&quot;&gt;&lt;a href=&quot;#Back-to-the-Essence-Java-컴파일에서-실행까지-2&quot; class=&quot;headerlink&quot; title=&quot;Back to the Essenc
      
    
    </summary>
    
      <category term="Specification" scheme="http://homoefficio.github.io/categories/Specification/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="자바" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="JVM" scheme="http://homoefficio.github.io/tags/JVM/"/>
    
      <category term="Bytecode" scheme="http://homoefficio.github.io/tags/Bytecode/"/>
    
      <category term="Compile" scheme="http://homoefficio.github.io/tags/Compile/"/>
    
      <category term="JVM Spec" scheme="http://homoefficio.github.io/tags/JVM-Spec/"/>
    
      <category term="invokeinterface" scheme="http://homoefficio.github.io/tags/invokeinterface/"/>
    
      <category term="invokevirtual" scheme="http://homoefficio.github.io/tags/invokevirtual/"/>
    
      <category term="javap" scheme="http://homoefficio.github.io/tags/javap/"/>
    
      <category term="컴파일" scheme="http://homoefficio.github.io/tags/%EC%BB%B4%ED%8C%8C%EC%9D%BC/"/>
    
      <category term="바이트코드" scheme="http://homoefficio.github.io/tags/%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C/"/>
    
      <category term="JVM 명세" scheme="http://homoefficio.github.io/tags/JVM-%EB%AA%85%EC%84%B8/"/>
    
      <category term="JVM 스펙" scheme="http://homoefficio.github.io/tags/JVM-%EC%8A%A4%ED%8E%99/"/>
    
      <category term="JRE" scheme="http://homoefficio.github.io/tags/JRE/"/>
    
      <category term="JVM Instruction" scheme="http://homoefficio.github.io/tags/JVM-Instruction/"/>
    
      <category term="Run-Time Data Area" scheme="http://homoefficio.github.io/tags/Run-Time-Data-Area/"/>
    
      <category term="Heap" scheme="http://homoefficio.github.io/tags/Heap/"/>
    
      <category term="Method Area" scheme="http://homoefficio.github.io/tags/Method-Area/"/>
    
      <category term="PC Register" scheme="http://homoefficio.github.io/tags/PC-Register/"/>
    
      <category term="JVM Stack" scheme="http://homoefficio.github.io/tags/JVM-Stack/"/>
    
      <category term="Native Method Stack" scheme="http://homoefficio.github.io/tags/Native-Method-Stack/"/>
    
      <category term="Frame" scheme="http://homoefficio.github.io/tags/Frame/"/>
    
      <category term="Local Variables" scheme="http://homoefficio.github.io/tags/Local-Variables/"/>
    
      <category term="Operand Stack" scheme="http://homoefficio.github.io/tags/Operand-Stack/"/>
    
      <category term="Reference to Run-Time Constant Pool" scheme="http://homoefficio.github.io/tags/Reference-to-Run-Time-Constant-Pool/"/>
    
      <category term="Run-Time Constant Pool" scheme="http://homoefficio.github.io/tags/Run-Time-Constant-Pool/"/>
    
      <category term="Link" scheme="http://homoefficio.github.io/tags/Link/"/>
    
      <category term="Verification" scheme="http://homoefficio.github.io/tags/Verification/"/>
    
      <category term="Preparation" scheme="http://homoefficio.github.io/tags/Preparation/"/>
    
      <category term="Initialization" scheme="http://homoefficio.github.io/tags/Initialization/"/>
    
      <category term="Resolution" scheme="http://homoefficio.github.io/tags/Resolution/"/>
    
      <category term="invokespecial" scheme="http://homoefficio.github.io/tags/invokespecial/"/>
    
      <category term="JVM 명령어" scheme="http://homoefficio.github.io/tags/JVM-%EB%AA%85%EB%A0%B9%EC%96%B4/"/>
    
      <category term="런타임 데이터 영역" scheme="http://homoefficio.github.io/tags/%EB%9F%B0%ED%83%80%EC%9E%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%98%81%EC%97%AD/"/>
    
      <category term="자바 메모리 모델" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%AA%A8%EB%8D%B8/"/>
    
      <category term="JVM 메모리 모델" scheme="http://homoefficio.github.io/tags/JVM-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%AA%A8%EB%8D%B8/"/>
    
      <category term="힙" scheme="http://homoefficio.github.io/tags/%ED%9E%99/"/>
    
      <category term="메서드 영역" scheme="http://homoefficio.github.io/tags/%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%81%EC%97%AD/"/>
    
      <category term="PC 레지스터" scheme="http://homoefficio.github.io/tags/PC-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0/"/>
    
      <category term="JVM 스택" scheme="http://homoefficio.github.io/tags/JVM-%EC%8A%A4%ED%83%9D/"/>
    
      <category term="네이티브 메서드 스택" scheme="http://homoefficio.github.io/tags/%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%8A%A4%ED%83%9D/"/>
    
      <category term="프레임" scheme="http://homoefficio.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84/"/>
    
      <category term="로컬 변수 배열" scheme="http://homoefficio.github.io/tags/%EB%A1%9C%EC%BB%AC-%EB%B3%80%EC%88%98-%EB%B0%B0%EC%97%B4/"/>
    
      <category term="오퍼랜드 스택" scheme="http://homoefficio.github.io/tags/%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C-%EC%8A%A4%ED%83%9D/"/>
    
      <category term="런타임 상수 풀" scheme="http://homoefficio.github.io/tags/%EB%9F%B0%ED%83%80%EC%9E%84-%EC%83%81%EC%88%98-%ED%92%80/"/>
    
      <category term="링크" scheme="http://homoefficio.github.io/tags/%EB%A7%81%ED%81%AC/"/>
    
      <category term="확인" scheme="http://homoefficio.github.io/tags/%ED%99%95%EC%9D%B8/"/>
    
      <category term="준비" scheme="http://homoefficio.github.io/tags/%EC%A4%80%EB%B9%84/"/>
    
      <category term="초기화" scheme="http://homoefficio.github.io/tags/%EC%B4%88%EA%B8%B0%ED%99%94/"/>
    
      <category term="해석" scheme="http://homoefficio.github.io/tags/%ED%95%B4%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>Back to the Essence - Java 컴파일에서 실행까지 - (1)</title>
    <link href="http://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89%EA%B9%8C%EC%A7%80-1/"/>
    <id>http://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-컴파일에서-실행까지-1/</id>
    <published>2019-01-30T15:00:57.000Z</published>
    <updated>2019-04-28T17:03:55.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Back-to-the-Essence-Java-컴파일에서-실행까지-1"><a href="#Back-to-the-Essence-Java-컴파일에서-실행까지-1" class="headerlink" title="Back to the Essence - Java 컴파일에서 실행까지 - (1)"></a>Back to the Essence - Java 컴파일에서 실행까지 - (1)</h1><p>Java 11 JVM 스펙을 기준으로 Java 소스 코드가 어떻게 컴파일되고 실행되는지 살짝 깊게 알아보자.</p><p>이번엔 1탄 컴파일 편이다. 2탄 실행 편은 <a href="https://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-컴파일에서-실행까지-2/">여기</a>에..</p><h1 id="컴파일"><a href="#컴파일" class="headerlink" title="컴파일"></a>컴파일</h1><p>전통적으로 컴파일이라고 하면 어떤 언어로 된 소스 코드를 기계가 인식할 수 있는 네이티브 코드로 변환하는 과정을 의미하지만, 자바에서의 컴파일은 자바 언어로 된 코드를 JVM이 인식할 수 있는 JVM 명령어 코드(바이트코드)로 변환하는 것을 의미한다.<br>드물지만 자바에서의 컴파일도 일반적인 의미의 컴파일처럼 기계가 인식할 수 있는 코드로 변환하는 과정을 의미할 때도 있다. 대표적으로 JIT 컴파일러가 하는 컴파일은 바이트코드로 변환하는 것이 아니라 바이트코드를 네이티브 코드로 변환하는 것을 의미한다.</p><h2 id="실행-파일-생성-과정"><a href="#실행-파일-생성-과정" class="headerlink" title="실행 파일 생성 과정"></a>실행 파일 생성 과정</h2><p>자바 소스 코드를 컴파일하는 과정이 몇 단계로 구성되는지 구체적으로 스펙에 규정되어 있지는 않다. 참고로 C로 작성된 코드로부터 실행 파일을 만드는 과정은 보통 다음과 같이 4 단계로 구분한다.</p><ol><li>전처리(Pre-processing)<ul><li>주석 제거</li><li>매크로 인라인화</li><li>include 파일 인라인화</li></ul></li><li>컴파일(Compiling)<ul><li>컴파일러가 전처리 과정을 거친 C 소스 코드를 컴파일해서 어셈블리어 코드로 변환</li></ul></li><li>어셈블리(Assembly)<ul><li>어셈블러가 어셈블리어 코드를 기계어 코드로 변환</li></ul></li><li>링크(Linking)<ul><li>링커가 기계어 코드와 공유 라이브러리 등 다른 코드를 합쳐서 최종 실행 파일 생성</li></ul></li></ol><p>(참고: <a href="https://www.geeksforgeeks.org/compiling-a-c-program-behind-the-scenes/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/compiling-a-c-program-behind-the-scenes/</a>)</p><p>컴파일과 어셈블리 단계를 그냥 컴파일 단계 하나로 합쳐서 보면 다음과 같은 그림으로 쉽게 이해할 수 있다.</p><ol><li><p>전처리</p><p> <img src="https://i.imgur.com/6Gixn4m.png" alt="Imgur"></p></li><li><p>컴파일</p><p> <img src="https://i.imgur.com/XgKJv8x.png" alt="Imgur"></p></li><li><p>링크</p><p> <img src="https://i.imgur.com/bjruQVw.png" alt="Imgur"></p></li></ol><p>(그림 참고: <a href="https://www.sitesbay.com/cprogramming/c-compile-link-program" target="_blank" rel="noopener">https://www.sitesbay.com/cprogramming/c-compile-link-program</a>)</p><p>참고로 중요하진 않지만 자바는 전처리 과정에서 주석이 있던 행 자체가 제거되지는 않는다. 바이트코드 내용 중에 자바 소스 코드의 행 번호와 바이트코드 명령어의 위치를 매핑해주는 부분이 있는데 이 때 표시되는 자바 소스 코드 행 번호는 주석이 있던 행이 제거되지 않은 상태 기준의 행 번호가 표시된다.</p><p>자바는 컴파일 결과로 나온 바이트코드가 JVM에 의해 실행되면서 네이티브 기계어 코드로 변환되므로, 프로그램 실행 전에 네이티브 기계어 코드를 만들어내는 어셈블리 단계가 없다고 볼 수 있다. 마찬가지로 링크 단계도 프로그램 실행 전에 수행되지 않고 JVM에 의해 프로그램이 실행될 때 동적으로 수행된다.</p><p>따라서 자바의 컴파일 절차는 아주 단순하다. 그림조차도 그릴 필요 없고 다음과 같이 표현할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">자바 소스 코드 파일(.java) -&gt; javac 컴파일러 -&gt; JVM 바이트코드(.class)</span><br></pre></td></tr></table></figure><p>앞에서 나온 C 컴파일 과정 그림에서 살펴본 것처럼 컴파일과 어셈블리 과정을 하나로 뭉쳐서 컴파일이라고 하기도 한다. 아래에서 살펴볼 일반적인 컴파일 세부 단계는 컴파일과 어셈블리 과정을 하나로 뭉친 개념이다.</p><h2 id="컴파일-세부-단계"><a href="#컴파일-세부-단계" class="headerlink" title="컴파일 세부 단계"></a>컴파일 세부 단계</h2><h3 id="1-Lexical-Analysis-어휘-분석"><a href="#1-Lexical-Analysis-어휘-분석" class="headerlink" title="1. Lexical Analysis(어휘 분석)"></a>1. Lexical Analysis(어휘 분석)</h3><p>Lexical Analyzer(Lexer 또는 Tokenizer라고도 한다)가 소스 코드에서 문자 단위로 읽어서 어휘소(lexeme)를 식별하고 어휘소를 설명하는 토큰 스트림(Token Stream)을 생성한다.</p><p>어휘소는 식별가능한 문자 시퀀스인데 다음과 같은 것들을 통칭한다.</p><ul><li>키워드(keywords): <code>public</code>, <code>class</code>, <code>main</code>, <code>for</code> 등</li><li>리터럴(literals): <code>1L</code>, <code>2.3f</code>, <code>&quot;Hello&quot;</code> 등</li><li>식별자(identifiers): 변수 이름, 상수 이름, 함수 이름 등</li><li>연산자(operators): <code>+</code>, <code>-</code> 등</li><li>구분 문자(punctuation characters): <code>,</code>, <code>[]</code>, <code>{}</code>, <code>()</code> 등</li></ul><p>토큰(Token)은 타입(키워드, 리터럴, 식별자 등)과 값(<code>public</code>, <code>1L</code>, <code>main</code> 등)으로 구성되며 어휘소를 설명하는 객체로 볼 수 있다.</p><p>식별자 토큰은 어휘 분석 단계에서 심볼 테이블에 저장되고 이후 단계에서 계속 사용된다.</p><h3 id="2-Syntax-Analysis-구문-분석"><a href="#2-Syntax-Analysis-구문-분석" class="headerlink" title="2. Syntax Analysis(구문 분석)"></a>2. Syntax Analysis(구문 분석)</h3><p>Syntax Analyzer(구문 분석기, 파서(Parser)라고도 한다)가 어휘 분석 결과로 나온 토큰 스트림이 언어의 스펙으로 정해진 문법 형식에 맞는지 검사해서, 맞지 않으면 컴파일 에러를 내고, 맞으면 파스 트리(Parse Tree)를 생성한다(구문 분석 단계의 결과로 나오는 파스 트리를 추상 구문 트리(Abstract Syntax Tree)라고 부르는 자료도 있다).</p><p>어휘 분석과 구문 분석 과정을 그림으로 요약하면 다음과 같다.</p><p><img src="https://i.imgur.com/ynDWnl2.gif" alt="Imgur"></p><p>(그림 출처: <a href="https://en.wikipedia.org/wiki/Compiler" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Compiler</a>)</p><p>위 그림에서 Parser 아래에 있는 트리가 파스 트리다.</p><h3 id="3-Symantic-Analysis-의미-분석"><a href="#3-Symantic-Analysis-의미-분석" class="headerlink" title="3. Symantic Analysis(의미 분석)"></a>3. Symantic Analysis(의미 분석)</h3><p>의미 분석 단계에서는 타입 검사, 자동 타입 변환 등이 수행된다. 예를 들어 다음과 같은 코드는 구문 분석 단계에서는 에러가 나지 않지만, 의미 분석 단계에서는 타입 검사가 수행되면서 에러가 발생한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure><p>의미 분석 단계를 거치면서 파스 트리에 타입 관련 정보 등이 추가된다.</p><h3 id="4-Intermediate-Code-Generation-중간-코드-생성"><a href="#4-Intermediate-Code-Generation-중간-코드-생성" class="headerlink" title="4. Intermediate Code Generation(중간 코드 생성)"></a>4. Intermediate Code Generation(중간 코드 생성)</h3><p>의미 분석 단계를 통과한 파스 트리를 바탕으로 기계어로 변환하기 좋은 형태의 중간 언어로 된 중간 코드를 생성한다. 중간 코드를 만들어 사용하는 이유는 중간 언어가 없을 때의 문제점을 그림으로 보면 금방 이해가 된다.</p><p><img src="https://i.imgur.com/wROkyp1.jpg" alt="Imgur"></p><p>(그림 출처: <a href="https://www.slideshare.net/RamchandraRegmi/intermediate-code-generationramchandra-regmi" target="_blank" rel="noopener">https://www.slideshare.net/RamchandraRegmi/intermediate-code-generationramchandra-regmi</a>)</p><p>한 마디로 중간 단계를 하나 둬서 간접화를 통해 경우의 수를 낮추고 효율을 높이기 위해 중간 코드를 생성한다.</p><p>자바의 바이트코드가 바로 이 중간 코드에 해당한다고 볼 수 있다. 위 그림에서 4개의 언어를 나타내는 네모를 각각 자바, 클로저(Clojure), 스칼라, 코틀린이라고 하고, 녹색 네모를 바이트코드라고 생각하면 쉽게 이해할 수 있다.</p><p>어휘 분석에서 만들어져서, 구문 분석, 의미 분석 과정을 거치며 다듬어진 심볼 테이블은 중간 코드인 바이트코드 생성 단계에서 클래스나 인터페이스별 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.4" target="_blank" rel="noopener">상수 풀(Constant Pool)</a>을 만드는 데 사용된다. </p><p>상수 풀 안에 담겨 있는 대부분의 자료구조는 이름, 설명자(descriptor), 값 등 테이블에 정적으로 저장된 정보를 조합해서 엔티티를 직접 표현하지만, <code>CONSTANT_Dynamic_info</code>, <code>CONSTANT_InvokeDynamic_info</code>로 표현되는 자료구조는 런타임에 정해지는 동적인 엔티티를 간접적으로 표현한다.(참고: <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.4.10" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.4.10</a>)</p><p>상수 풀에 저장된 정보는 해당 클래스나 인터페이스가 실제 생성될 때 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-5.html#jvms-5.1" target="_blank" rel="noopener">런타임 상수 풀(Run-Time Constant Pool)</a>을 구성하는데 사용된다.</p><h3 id="5-Code-Optimization-중간-코드-최적화"><a href="#5-Code-Optimization-중간-코드-최적화" class="headerlink" title="5. Code Optimization(중간 코드 최적화)"></a>5. Code Optimization(중간 코드 최적화)</h3><p>말 그대로 중간 코드가 더 효율적인 기계어로 변환되도록 최적화하는 과정이 수행된다. 다음과 같이 매우 다양한 최적화 기법이 사용된다.</p><h4 id="핍홀-Peephole-최적화"><a href="#핍홀-Peephole-최적화" class="headerlink" title="핍홀(Peephole) 최적화"></a>핍홀(Peephole) 최적화</h4><ul><li>중복 명령어 제거</li><li>도달 불가능한 코드 제거</li><li>제어 흐름 최적화</li><li>비용 낮은 연산자로 변환 등</li></ul><h4 id="지역-최적화"><a href="#지역-최적화" class="headerlink" title="지역 최적화"></a>지역 최적화</h4><ul><li>지역 공통 부분식 제거</li><li>복사 전파</li><li>상수 폴딩 등</li></ul><h4 id="루프-최적화"><a href="#루프-최적화" class="headerlink" title="루프 최적화"></a>루프 최적화</h4><ul><li>코드 이동</li><li>귀납 변수 최적화</li><li>루프 융합/교환/전개 등</li></ul><h4 id="전역-최적화"><a href="#전역-최적화" class="headerlink" title="전역 최적화"></a>전역 최적화</h4><ul><li>전역 공통 부분식 제거</li><li>상수 폴딩 등</li></ul><p>이 외에도 다양한 최적화 기법이 사용되는데, 쉽게 감이 오는 루프 최적화의 코드 이동만 확인해보자. 실제로 최적화되는 것은 바이트코드지만 보기 편하게 자바 코드로 표현한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100000</span> ; i++) &#123;</span><br><span class="line">    c[k] = <span class="number">2</span> * (p - q) * (n - k + <span class="number">1</span>) / (sqrt(n) + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i와 관계 없이 값이 고정되어 있는 식을 반복문 밖으로 옮겨서 불필요한 계산 반복을 제거</span></span><br><span class="line"></span><br><span class="line">factor = <span class="number">2</span> * (p - q);</span><br><span class="line">denominator = (sqrt(n) + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100000</span> ; i++) &#123;</span><br><span class="line">    c[k] = factor * (n - k + <span class="number">1</span>) / denominator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(참고: 컴파일러의 이해 - <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B4565472056" target="_blank" rel="noopener">http://www.hanbit.co.kr/store/books/look.php?p_code=B4565472056</a>)</p><h2 id="컴파일-과정-정리"><a href="#컴파일-과정-정리" class="headerlink" title="컴파일 과정 정리"></a>컴파일 과정 정리</h2><p>자바의 컴파일 과정은 여기까지다. 자바의 컴파일 과정을 한 마디로 요약하면 <strong>자바 코드를 자바 언어 스펙에 따라 분석/검증하고, JVM 스펙의 class 파일 구조에 맞는 바이트코드를 만들어내는 과정</strong> 이라고 할 수 있다.</p><p>바이트코드는 로딩, 링크 과정을 거쳐야 하지만 분명히 JVM에서 실행될 수 있는 코드다. 따라서 꼭 자바 언어 스펙을 따르는 자바가 아니라도, JVM 스펙의 class 파일 구조에 맞는 바이트코드를 만들어 낼 수 있다면 어떤 언어든 JVM에서 실행될 수 있다. 클로저(Clojure)나 스칼라, 코틀린 등이 JVM에서 실행될 수 있는 이유가 바로 여기에 있다.</p><p>자바 코드의 변수, 상수, 제어문, 연산, 인자, 메서드 호출, 배열, switch문, 예외 처리, finally, synchronization, 애너테이션, 모듈(Java 9 이후) 등이 바이트코드로 어떻게 변환되는지는 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-3.html" target="_blank" rel="noopener">JVM 스펙의 3장</a>에 나오는 예시를 통해 확인할 수 있다.</p><p>그냥 지나치면 허전하니 간단한 자바 파일과 컴파일 된 바이트코드를 한 번 살펴보자.</p><h2 id="바이트코드-구경하기"><a href="#바이트코드-구경하기" class="headerlink" title="바이트코드 구경하기"></a>바이트코드 구경하기</h2><p>그냥 헬로월드는 너무 단순하니까 인터페이스를 사용하는 코드 예제를 살펴보자. main 메서드를 가진 <code>GreetingMain</code> 클래스가 <code>Greeting</code> 인터페이스를 구현하는 <code>KoreanGreeting</code> 클래스를 사용하는 예제다.</p><p>먼저 인터페이스인 <code>Greeting</code>부터 살펴보자.</p><h3 id="Greeting"><a href="#Greeting" class="headerlink" title="Greeting"></a>Greeting</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.jvm.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메서드 하나를 가지고 있는 아주 단순한 인터페이스다. 컴파일 한 후에 다음과 같이 <code>javap</code> 명령으로 바이트코드를 확인할 수 있다. <code>javap</code>는 바이너리인 바이트코드 .class 파일을 텍스트로 보여주는 일종의 역어셈블러 프로그램이다.</p><blockquote><p>javap -v -l -p homo/efficio/jvm/sample/Greeting.class</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Classfile /C:/gitrepo/scratchpad/plain-java-scratchpad/out/production/classes/homo/efficio/jvm/sample/Greeting.class</span><br><span class="line">  Last modified 2019. 1. 13.; size 181 bytes</span><br><span class="line">  MD5 checksum 8f7ae541e0a64f511d820930f739d4ac</span><br><span class="line">  Compiled from &quot;Greeting.java&quot;</span><br><span class="line">public interface homo.efficio.jvm.sample.Greeting</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 53</span><br><span class="line">  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT</span><br><span class="line">  this_class: #1                          // homo/efficio/jvm/sample/Greeting</span><br><span class="line">  super_class: #2                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 0, methods: 1, attributes: 1</span><br><span class="line">Constant pool:</span><br><span class="line">  #1 = Class              #7              // homo/efficio/jvm/sample/Greeting</span><br><span class="line">  #2 = Class              #8              // java/lang/Object</span><br><span class="line">  #3 = Utf8               sayHello</span><br><span class="line">  #4 = Utf8               (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  #5 = Utf8               SourceFile</span><br><span class="line">  #6 = Utf8               Greeting.java</span><br><span class="line">  #7 = Utf8               homo/efficio/jvm/sample/Greeting</span><br><span class="line">  #8 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  public abstract java.lang.String sayHello(java.lang.String);</span><br><span class="line">    descriptor: (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Greeting.java&quot;</span><br></pre></td></tr></table></figure><p>인터페이스의 바이트코드는 Classfile, public interface …, Constant pool, { 바이트코드 }, SourceFile 이렇게 크게 5가지 항목으로 구분되어 표시된다.</p><p>컴파일과 실행 관점에서 주목해야할 항목은 상수 풀(Constant pool)과 실제 소스 코드로부터 변환된 바이트코드 내용이다. </p><p>상수풀에는 <code>Class</code>와 <code>Utf8</code>로 분류되는 값들이 표시되어 있다. 상수 풀에 포함된 정보는 <code>#N</code>의 형식으로 인덱스되어 있다. <code>Class</code>는 말그대로 클래스임을 나타내고 <code>Utf8</code>은 클래스나 메서드 등의 이름을 나타내는 식별자를 UTF-8로 인코딩 된 값으로 나타내고 있다. <code>Class</code>로 분류된 항목의 값은 <code>#7</code> 같이 다른 항목을 가리키는 일종의 참조로 되어 있고, 참조를 통해 가리키는 항목의 값은 주석으로 병기(<code>// homo/efficio/jvm/sample/Greeting</code>)되어 있다.</p><p>바이트코드에는 원래 자바 소스에는 없던 <code>abstract</code>라는 키워드가 추가되어 표시되어 있다. sayHello 메서드의 파라미터 정보(<code>(Ljava/lang/String;)</code>) 와 반환 타입 정보(<code>Ljava/lang/String;</code>)가 descriptor 항목에 표시되고, 접근 지정자(<code>ACC_PUBLIC</code>, <code>ACC_ABSTRACT</code>)가 flags 항목에 표시된다. </p><p>아주 간단해서 바이트코드의 상수풀과 바이트코드가 어떤 식으로 기술되는지 비교적 쉽게 감을 잡을 수 있다. 너무 간단해서 바이트코드 내용이 별로 없기 때문에, 바이트코드에 대한 설명은 구현 클래스인 <code>KoreanGreeting</code>에서 실제 코드와 함께 다시 살펴볼 것이다.</p><h3 id="KoreanGreeting"><a href="#KoreanGreeting" class="headerlink" title="KoreanGreeting"></a>KoreanGreeting</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.jvm.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanGreeting</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hello = <span class="string">"안녕 "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getHello() + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Greeting</code> 인터페이스를 구현하고 있고, <code>hello</code>라는 필드를 하나 가지고 있는 단순한 클래스다. <code>getHello()</code>는 메서드가 2개일 때는 어떻게 표시되는지, 내부 private 메서드 호출은 어떻게 표시되는지 보기 위해 일부러 추가했다.</p><blockquote><p>javap -v -l -p homo/efficio/jvm/sample/KoreanGreeting.class</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">Classfile /C:/gitrepo/scratchpad/plain-java-scratchpad/out/production/classes/homo/efficio/jvm/sample/KoreanGreeting.class</span><br><span class="line">  Last modified 2019. 1. 12.; size 1132 bytes</span><br><span class="line">  MD5 checksum d7ac2a6fd38c67407480720ca730d987</span><br><span class="line">  Compiled from &quot;KoreanGreeting.java&quot;</span><br><span class="line">public class homo.efficio.jvm.sample.KoreanGreeting implements homo.efficio.jvm.sample.Greeting</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 53</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #6                          // homo/efficio/jvm/sample/KoreanGreeting</span><br><span class="line">  super_class: #7                         // java/lang/Object</span><br><span class="line">  interfaces: 1, fields: 1, methods: 3, attributes: 3</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #7.#25         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = String             #26            // ▒?▒</span><br><span class="line">   #3 = Fieldref           #6.#27         // homo/efficio/jvm/sample/KoreanGreeting.hello:Ljava/lang/String;</span><br><span class="line">   #4 = Methodref          #6.#28         // homo/efficio/jvm/sample/KoreanGreeting.getHello:()Ljava/lang/String;</span><br><span class="line">   #5 = InvokeDynamic      #0:#32         // #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">   #6 = Class              #33            // homo/efficio/jvm/sample/KoreanGreeting</span><br><span class="line">   #7 = Class              #34            // java/lang/Object</span><br><span class="line">   #8 = Class              #35            // homo/efficio/jvm/sample/Greeting</span><br><span class="line">   #9 = Utf8               hello</span><br><span class="line">  #10 = Utf8               Ljava/lang/String;</span><br><span class="line">  #11 = Utf8               &lt;init&gt;</span><br><span class="line">  #12 = Utf8               ()V</span><br><span class="line">  #13 = Utf8               Code</span><br><span class="line">  #14 = Utf8               LineNumberTable</span><br><span class="line">  #15 = Utf8               LocalVariableTable</span><br><span class="line">  #16 = Utf8               this</span><br><span class="line">  #17 = Utf8               Lhomo/efficio/jvm/sample/KoreanGreeting;</span><br><span class="line">  #18 = Utf8               sayHello</span><br><span class="line">  #19 = Utf8               (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  #20 = Utf8               name</span><br><span class="line">  #21 = Utf8               getHello</span><br><span class="line">  #22 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #23 = Utf8               SourceFile</span><br><span class="line">  #24 = Utf8               KoreanGreeting.java</span><br><span class="line">  #25 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #26 = Utf8               ▒?▒</span><br><span class="line">  #27 = NameAndType        #9:#10         // hello:Ljava/lang/String;</span><br><span class="line">  #28 = NameAndType        #21:#22        // getHello:()Ljava/lang/String;</span><br><span class="line">  #29 = Utf8               BootstrapMethods</span><br><span class="line">  #30 = MethodHandle       6:#36          // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #31 = String             #37            // \u0001\u0001</span><br><span class="line">  #32 = NameAndType        #38:#39        // makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  #33 = Utf8               homo/efficio/jvm/sample/KoreanGreeting</span><br><span class="line">  #34 = Utf8               java/lang/Object</span><br><span class="line">  #35 = Utf8               homo/efficio/jvm/sample/Greeting</span><br><span class="line">  #36 = Methodref          #40.#41        // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #37 = Utf8               \u0001\u0001</span><br><span class="line">  #38 = Utf8               makeConcatWithConstants</span><br><span class="line">  #39 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  #40 = Class              #42            // java/lang/invoke/StringConcatFactory</span><br><span class="line">  #41 = NameAndType        #38:#46        // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #42 = Utf8               java/lang/invoke/StringConcatFactory</span><br><span class="line">  #43 = Class              #48            // java/lang/invoke/MethodHandles$Lookup</span><br><span class="line">  #44 = Utf8               Lookup</span><br><span class="line">  #45 = Utf8               InnerClasses</span><br><span class="line">  #46 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #47 = Class              #49            // java/lang/invoke/MethodHandles</span><br><span class="line">  #48 = Utf8               java/lang/invoke/MethodHandles$Lookup</span><br><span class="line">  #49 = Utf8               java/lang/invoke/MethodHandles</span><br><span class="line">&#123;</span><br><span class="line">  private java.lang.String hello;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  public homo.efficio.jvm.sample.KoreanGreeting();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           #2                  // String ▒?▒</span><br><span class="line">         7: putfield      #3                  // Field hello:Ljava/lang/String;</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">        line 5: 4</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      11     0  this   Lhomo/efficio/jvm/sample/KoreanGreeting;</span><br><span class="line"></span><br><span class="line">  public java.lang.String sayHello(java.lang.String);</span><br><span class="line">    descriptor: (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=2</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #4                  // Method getHello:()Ljava/lang/String;</span><br><span class="line">         4: aload_1</span><br><span class="line">         5: invokedynamic #5,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">        10: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      11     0  this   Lhomo/efficio/jvm/sample/KoreanGreeting;</span><br><span class="line">            0      11     1  name   Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">  private java.lang.String getHello();</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      #3                  // Field hello:Ljava/lang/String;</span><br><span class="line">         4: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 13: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Lhomo/efficio/jvm/sample/KoreanGreeting;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;KoreanGreeting.java&quot;</span><br><span class="line">InnerClasses:</span><br><span class="line">  public static final #44= #43 of #47;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span><br><span class="line">BootstrapMethods:</span><br><span class="line">  0: #30 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #31 \u0001\u0001</span><br></pre></td></tr></table></figure><p>자바 소스 코드 상으로는 <code>Greeting</code> 인터페이스와 몇 줄 차이 안 나는데 바이트코드의 양은 큰 차이가 난다. 바이트코드를 분석하는 것이 글의 목적이 아니라 컴파일이라는 큰 과정을 살펴보면서 결과물인 바이트코드도 눈으로 구경해보자는 취지이므로 개략적인 생김새와 기본적인 내용만 훑어보자.</p><h4 id="상수-풀"><a href="#상수-풀" class="headerlink" title="상수 풀"></a>상수 풀</h4><p>상수 풀에는 <code>Methodref</code>, <code>String</code>, <code>Fieldref</code>, <code>Methodref</code>, <code>InvokeDynamic</code>, <code>NameAndType</code>, <code>MethodHandle</code> 등 새로운 종류의 상수 항목이 나오는데, 이름과 값을 조금 살펴보면 어떻게 사용되는지 대략 감을 잡을 수 있다. 소스 코드 수준에서 정적으로 파악할 수 있는 변수, 상수, 메서드 등의 일람표라고 생각하면 된다.</p><p>상수 풀에 저장되는 상수 항목의 종류는 총 17개이며, 자세한 내용은 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.4" target="_blank" rel="noopener">JVM 스펙</a>을 참고한다.</p><h4 id="바이트코드"><a href="#바이트코드" class="headerlink" title="바이트코드"></a>바이트코드</h4><p>{} 로 묶여서 표시되는 바이트코드는 대략 다음과 같은 구조로 되어 있다.</p><ul><li>필드나 메서드 선언부<ul><li>descriptor: 필드의 타입이나 메서드의 파라미터 및 반환 타입</li><li>flags: 접근 지정자</li><li>Code<ul><li>stack, locals, args_size: 스택 높이, 로컬 변수 갯수, 인자 갯수<ul><li>실제 구현 코드: 코드 위치, 바이트코드 명령어(instruction), 오퍼랜드(operand, 피연산자)</li></ul></li><li>LineNumberTable: 자바 코드의 행 번호와 바이트코드의 위치 매핑 테이블</li><li>LocalVariableTable: 로컬 변수 테이블</li></ul></li></ul></li></ul><p>어셈블리어 프로그래밍 경험이 있는 개발자에게는 바이트코드가 그리 낯설지 않을 것이다. 바이트코드의 대부분은 오퍼랜드 스택에 값을 넣고, 빼고, 읽고, 복사하고, 스왑하거나 메서드를 호출하는 내용을 담고 있다.</p><p>바이트코드 명령어에 대한 자세한 내용은 <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html#jvms-6.5" target="_blank" rel="noopener">JVM 스펙</a>을 참고하고 여기에서는 메서드 호출과 관계있는 <code>invoke*</code> 명령어만 짧게 알아보자.</p><table><thead><tr><th>명령어 이름</th><th>하는 일</th></tr></thead><tbody><tr><td>invokeinterface</td><td>인터페이스에 정의된 메서드 호출</td></tr><tr><td>invokespecial</td><td>생성자, 현재 클래스의 메서드, 수퍼클래스의 메서드 호출</td></tr><tr><td>invokestatic</td><td>정적 메서드 호출</td></tr><tr><td>invokevirtual</td><td>자바 메서드 호출의 기본 방식이며, 객체 참조(<code>obj.</code>)를 붙여서 호출되는 일반적인 메서드 호출</td></tr><tr><td>invokedynamic</td><td>JVM에서 실행되는 동적 타입 언어를 위해 Java 7에 추가된 명령어. 람다식도 invokedynamic을 이용해서 구현되었다. 자세한 내용은 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/multiple-language-support.html" target="_blank" rel="noopener">오라클 문서</a>나 <a href="https://d2.naver.com/helloworld/4911107" target="_blank" rel="noopener">네이버 문서</a> 또는 <a href="https://dzone.com/articles/dismantling-invokedynamic" target="_blank" rel="noopener">DZone 문서</a>를 참고하자.</td></tr></tbody></table><p>한 가지 눈여겨 볼 것은 실제 자바 소스 코드에는 없던 디폴트 생성자가 추가되어 있다는 점이다. 컴파일러가 자동으로 추가해준다는 사실을 실제로 확인한 셈이다. 디폴트 생성자는 <a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-8.8.9" target="_blank" rel="noopener">자바 언어 스펙</a>을 참고하자.</p><h3 id="GreetingMain"><a href="#GreetingMain" class="headerlink" title="GreetingMain"></a>GreetingMain</h3><p><code>Greeting</code> 인터페이스와 이를 구현한 <code>KoreanGreeting</code> 클래스를 사용해서 인사말을 찍는 클래스다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.jvm.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        KoreanGreeting koreanGreeting = <span class="keyword">new</span> KoreanGreeting();</span><br><span class="line">        System.out.println(koreanGreeting.sayHello(<span class="string">"Homo Efficio"</span>));</span><br><span class="line"></span><br><span class="line">        Greeting greeting = <span class="keyword">new</span> KoreanGreeting();</span><br><span class="line">        System.out.println(greeting.sayHello(<span class="string">"Homo Efficio"</span>));</span><br><span class="line"></span><br><span class="line">        sayHelloFromDynamicallyLoadedClass(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHelloFromDynamicallyLoadedClass</span><span class="params">(String arg)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">        ClassLoader classLoader = GreetingMain.class.getClassLoader();</span><br><span class="line">        Class&lt;?&gt; aClass = classLoader.loadClass(arg);</span><br><span class="line">        <span class="keyword">if</span> (Greeting.class.isAssignableFrom(aClass)) &#123;</span><br><span class="line">            Greeting aGreeting = (Greeting) aClass.getDeclaredConstructor().newInstance();</span><br><span class="line">            System.out.println(aGreeting.sayHello(<span class="string">"Homo Efficio"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>바이트코드 대략적인 구조 설명은 앞에서 했으므로 여기에서는 인터페이스를 통한 자바의 다형성이 발현되는 지점을 알 수 있는 부분만 살펴보자. 나머지 내용이 궁금하다면 <a href="https://github.com/HomoEfficio/plain-java-scratchpad/tree/master/src/main/java/homo/efficio/jvm/sample" target="_blank" rel="noopener">https://github.com/HomoEfficio/plain-java-scratchpad/tree/master/src/main/java/homo/efficio/jvm/sample</a> 를 참고한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Constant pool:</span><br><span class="line">    ...</span><br><span class="line">    #8 = InterfaceMethodref #16.#65       // homo/efficio/jvm/sample/Greeting.sayHello:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">    ...</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(java.lang.String[]) throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=3, locals=4, args_size=1</span><br><span class="line">         0: new           #2                  // class homo/efficio/jvm/sample/KoreanGreeting</span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial #3                  // Method homo/efficio/jvm/sample/KoreanGreeting.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         7: astore_1</span><br><span class="line">         8: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        11: aload_1</span><br><span class="line">        12: ldc           #5                  // String Homo Efficio</span><br><span class="line">        14: invokevirtual #6                  // Method homo/efficio/jvm/sample/KoreanGreeting.sayHello:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">        17: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        20: new           #2                  // class homo/efficio/jvm/sample/KoreanGreeting</span><br><span class="line">        23: dup</span><br><span class="line">        24: invokespecial #3                  // Method homo/efficio/jvm/sample/KoreanGreeting.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        27: astore_2</span><br><span class="line">        28: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        31: aload_2</span><br><span class="line">        32: ldc           #5                  // String Homo Efficio</span><br><span class="line">        34: invokeinterface #8,  2            // InterfaceMethod homo/efficio/jvm/sample/Greeting.sayHello:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">        39: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상수 풀의 8번쨰 항목에 <code>InterfaceMethodref</code>라는 항목으로 <code>Greeting</code> 인터페이스의 sayHello 메서드가 등록되어 있다.</p><p>자바 소스코드에서 아래와 같이 인터페이스를 사용하지 않는 부분은</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KoreanGreeting koreanGreeting = <span class="keyword">new</span> KoreanGreeting();</span><br><span class="line">System.out.println(koreanGreeting.sayHello(<span class="string">"Homo Efficio"</span>));</span><br></pre></td></tr></table></figure><p>다음과 같이 <code>invokevirtual</code>이 사용되고,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12: ldc           #5                  // String Homo Efficio</span><br><span class="line">14: invokevirtual #6                  // Method homo/efficio/jvm/sample/KoreanGreeting.sayHello:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">17: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p>인터페이스를 사용하는 아래 코드는</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Greeting greeting = <span class="keyword">new</span> KoreanGreeting();</span><br><span class="line">System.out.println(greeting.sayHello(<span class="string">"Homo Efficio"</span>));</span><br></pre></td></tr></table></figure><p>다음과 같이 <code>invokeinterface</code>가 사용됨을 확인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">32: ldc           #5                  // String Homo Efficio</span><br><span class="line">34: invokeinterface #8,  2            // InterfaceMethod homo/efficio/jvm/sample/Greeting.sayHello:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">39: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p>이 글은 컴파일 과정을 훑어보는 게 목적이었으므로 바이트코드 구경은 여기서 줄인다. 바이트코드에 대한 내용은 더 궁금하다면 알고 싶은 부분을 직접 코딩/컴파일하고 <code>javap</code>와 JVM 스펙으로 확인해보는 것이 가장 좋고, <a href="https://homoefficio.github.io/2019/01/31/Back-to-the-Essence-Java-컴파일에서-실행까지-2/">2탄</a>을 참고해도 좋다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>여기까지 자바 소스 코드가 바이트코드로 어떻게 컴파일되는지 알아봤다. 짧게 정리해보면 다음과 같다.</p><blockquote><p>자바도 전처리, 컴파일, 링크 과정을 통해 최종 실행 파일이 만들어진다.</p><p>컴파일의 세부 단계는 어휘 분석, 구문 분석, 의미 분석, 중간 코드 생성, 중간 코드 최적화로 구성된다.  </p><p><strong>자바 컴파일은 자바 코드를 자바 언어 스펙에 따라 분석/검증하고, JVM 스펙의 class 파일 구조에 맞는 바이트코드를 만들어내는 과정</strong>이다.</p><p>자바 소스 코드를 컴파일한 결과로 나오는 class 파일은 크게 보면 <strong>클래스 메타 정보, 상수 풀, 코드 구현부(JVM 명령어+오퍼랜드)로 구성</strong>된다.</p><p><strong>소스 코드에서 정적으로 파악할 수 있는 변수, 상수, 메서드 등의 정보가 클래스 파일 단위의 상수 풀(Constant Pool)에 저장</strong>되고,<br><strong>연산, 제어, 메서드 호출 등은 JVM 명령어와 상수 풀에 저장된 항목을 오퍼랜드로 사용하는 바이트코드로 변환되어 코드 구현부에 저장</strong>된다.</p><p><code>javap</code> 명령으로 바이너리 바이트코드를 눈으로 읽을 수 있는 텍스트로 역어셈블해서 확인할 수 있다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Back-to-the-Essence-Java-컴파일에서-실행까지-1&quot;&gt;&lt;a href=&quot;#Back-to-the-Essence-Java-컴파일에서-실행까지-1&quot; class=&quot;headerlink&quot; title=&quot;Back to the Essenc
      
    
    </summary>
    
      <category term="Specification" scheme="http://homoefficio.github.io/categories/Specification/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="자바" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="JVM" scheme="http://homoefficio.github.io/tags/JVM/"/>
    
      <category term="Bytecode" scheme="http://homoefficio.github.io/tags/Bytecode/"/>
    
      <category term="Compile" scheme="http://homoefficio.github.io/tags/Compile/"/>
    
      <category term="JVM Spec" scheme="http://homoefficio.github.io/tags/JVM-Spec/"/>
    
      <category term="Lexical Analysis" scheme="http://homoefficio.github.io/tags/Lexical-Analysis/"/>
    
      <category term="Syntax Analysis" scheme="http://homoefficio.github.io/tags/Syntax-Analysis/"/>
    
      <category term="Symantic Analysis" scheme="http://homoefficio.github.io/tags/Symantic-Analysis/"/>
    
      <category term="Intermediate Code Generation" scheme="http://homoefficio.github.io/tags/Intermediate-Code-Generation/"/>
    
      <category term="Code Optimization" scheme="http://homoefficio.github.io/tags/Code-Optimization/"/>
    
      <category term="Constant Pool" scheme="http://homoefficio.github.io/tags/Constant-Pool/"/>
    
      <category term="invokeinterface" scheme="http://homoefficio.github.io/tags/invokeinterface/"/>
    
      <category term="invokevirtual" scheme="http://homoefficio.github.io/tags/invokevirtual/"/>
    
      <category term="javap" scheme="http://homoefficio.github.io/tags/javap/"/>
    
      <category term="컴파일" scheme="http://homoefficio.github.io/tags/%EC%BB%B4%ED%8C%8C%EC%9D%BC/"/>
    
      <category term="바이트코드" scheme="http://homoefficio.github.io/tags/%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C/"/>
    
      <category term="JVM 명세" scheme="http://homoefficio.github.io/tags/JVM-%EB%AA%85%EC%84%B8/"/>
    
      <category term="JVM 스펙" scheme="http://homoefficio.github.io/tags/JVM-%EC%8A%A4%ED%8E%99/"/>
    
      <category term="어휘 분석" scheme="http://homoefficio.github.io/tags/%EC%96%B4%ED%9C%98-%EB%B6%84%EC%84%9D/"/>
    
      <category term="구문 분석" scheme="http://homoefficio.github.io/tags/%EA%B5%AC%EB%AC%B8-%EB%B6%84%EC%84%9D/"/>
    
      <category term="의미 분석" scheme="http://homoefficio.github.io/tags/%EC%9D%98%EB%AF%B8-%EB%B6%84%EC%84%9D/"/>
    
      <category term="중간 코드 생성" scheme="http://homoefficio.github.io/tags/%EC%A4%91%EA%B0%84-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1/"/>
    
      <category term="코드 최적화" scheme="http://homoefficio.github.io/tags/%EC%BD%94%EB%93%9C-%EC%B5%9C%EC%A0%81%ED%99%94/"/>
    
      <category term="상수 풀" scheme="http://homoefficio.github.io/tags/%EC%83%81%EC%88%98-%ED%92%80/"/>
    
  </entry>
  
  <entry>
    <title>탈중앙화된 암호화폐는 죽었다</title>
    <link href="http://homoefficio.github.io/2018/12/11/%ED%83%88%EC%A4%91%EC%95%99%ED%99%94%EB%90%9C-%EC%95%94%ED%98%B8%ED%99%94%ED%8F%90%EB%8A%94-%EC%A3%BD%EC%97%88%EB%8B%A4/"/>
    <id>http://homoefficio.github.io/2018/12/11/탈중앙화된-암호화폐는-죽었다/</id>
    <published>2018-12-11T12:59:50.000Z</published>
    <updated>2019-04-28T17:03:55.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="탈중앙화된-암호화폐는-죽었다"><a href="#탈중앙화된-암호화폐는-죽었다" class="headerlink" title="탈중앙화된 암호화폐는 죽었다."></a>탈중앙화된 암호화폐는 죽었다.</h1><blockquote><p>원저자인 SemkoDev의 허락을 받고 우리말로 옮긴 글입니다.<br>SemkoDev는 IOTA 재단과는 관련이 없는 3rd party 개발사입니다.</p><p>원문: <a href="https://semkodev.com/decentralised-cryptocurrency-is-dead/?lang=en" target="_blank" rel="noopener">https://semkodev.com/decentralised-cryptocurrency-is-dead/?lang=en</a></p><p>IOTA 기부</p><h5 id="원저자-IYUIUCFNGOEEQHT9CQU9VYJVOJMQI9VYTQGQLTBAKTFIPWWRBFEV9TJWUZU9EYEFPM9VB9QYXTSMCDKMDABASVXPPX"><a href="#원저자-IYUIUCFNGOEEQHT9CQU9VYJVOJMQI9VYTQGQLTBAKTFIPWWRBFEV9TJWUZU9EYEFPM9VB9QYXTSMCDKMDABASVXPPX" class="headerlink" title="원저자: IYUIUCFNGOEEQHT9CQU9VYJVOJMQI9VYTQGQLTBAKTFIPWWRBFEV9TJWUZU9EYEFPM9VB9QYXTSMCDKMDABASVXPPX"></a>원저자: IYUIUCFNGOEEQHT9CQU9VYJVOJMQI9VYTQGQLTBAKTFIPWWRBFEV9TJWUZU9EYEFPM9VB9QYXTSMCDKMDABASVXPPX</h5><h5 id="옮긴이-ALGUYPTFQAWONZEZNMFRBHFX9KXIFNHUTUCHQQHJJCHWVQOAWSRNAWKSLPMLUBCYLBTALRMNCHIULGJEYSFAISLOSB"><a href="#옮긴이-ALGUYPTFQAWONZEZNMFRBHFX9KXIFNHUTUCHQQHJJCHWVQOAWSRNAWKSLPMLUBCYLBTALRMNCHIULGJEYSFAISLOSB" class="headerlink" title="옮긴이: ALGUYPTFQAWONZEZNMFRBHFX9KXIFNHUTUCHQQHJJCHWVQOAWSRNAWKSLPMLUBCYLBTALRMNCHIULGJEYSFAISLOSB"></a>옮긴이: ALGUYPTFQAWONZEZNMFRBHFX9KXIFNHUTUCHQQHJJCHWVQOAWSRNAWKSLPMLUBCYLBTALRMNCHIULGJEYSFAISLOSB</h5></blockquote><p><img src="https://i.imgur.com/jHVJGUf.png" alt="Imgur"></p><p>블록체인은 혁신의 대명사였지만 이제는 녹이 슬어버린 예전 시스템처럼 되어가고 있습니다. 비트코인이 민주화 된 금융 질서를 세우고 불필요한 중간자를 축출할 수 있다고 생각했다면, 이제는 다시 생각해보는 게 좋을 것 같습니다.</p><p>블록체인, 탱글(tangle), 대용량 블록(2x blocks), 스마트 컨트랙트, 세그윗(segwit), 라이트닝 네트워크(lightning network), Schnorr 알고리듬과 앞으로 똑똑한 괴짜들이 고안해 낼 새로운 기술 등 암호화폐에 사용하고 있는 기술에 대한 얘기를 하려는 것이 아닙니다. 문제는 여러 다른 방법으로 해결될 수도 있으니까요.</p><p>좀 더 심오한 고민을 필요로 하는 이야기를 꺼내보려 합니다. 사토시가 제시한 최초의 비전에는 결함이 있습니다.</p><h2 id="금전적-보상은-언제나-불평등으로-이어진다"><a href="#금전적-보상은-언제나-불평등으로-이어진다" class="headerlink" title="금전적 보상은 언제나 불평등으로 이어진다."></a>금전적 보상은 언제나 불평등으로 이어진다.</h2><p>전에 썼던 <a href="https://semkodev.com/iota-why-free-transactions-matter-most/?lang=en" target="_blank" rel="noopener">IOTA: why free transactions matter most</a>에서 주장한 것처럼 문제의 핵심은 보상(rewards)입니다. 누군가에게 네트워크를 운영하라고 보상을 지불하는 것은 여러분이 가지고 있던 권력(power)을 지불하는 것입니다. 권력을 지불하면 시스템에 불균형이 발생하고, 소수의 권력 집단이 생겨나며 시스템의 바탕이 되는 다수는 힘을 잃게 됩니다. 힘 없는 다수는 힘 있는 채굴자들 없이는 존재할 수 없게 되고, 힘 있는 채굴자는 시간이 갈 수록 더 큰 권력을 얻게 됩니다.</p><p><img src="https://i.imgur.com/HcsWxIq.png" alt="Imgur"></p><p>가장 유서 깊은 탈중앙화 장부(ledger)인 비트코인은 이 문제로부터 자유로운 적이 없었습니다. 비트코인에서는 소수의 채굴 풀이 전체 해시레이트(hashrate)의 절반 이상을 점유하고 있습니다. 이는 아주 좋지 않은 소식이고 시스템을 유지관리하는 사람들에게 금전적인 보상을 지급하는 어떤 코인도 이 문제로부터 자유로울 수 없습니다.</p><p>누구든 가장 높은 해시레이트를 보유한 자가 왕입니다. 지분 증명(Proof of Stake, PoS)이 모든 문제를 해결해줄 거라고 주장하는 사람들도 있겠지만, 지분 증명은 문제를 해결하는 것이 아니라 옮겨놓을 뿐입니다. <strong>지분 증명에서는 가장 높은 해시레이트가 아니라 가장 많은 코인을 보유한 자가 왕입니다. 해시레이트가 부(wealth)로 바뀔 뿐 작업 증명에 내재되어 있던 문제와 다를 것이 없습니다. 물론 지분 증명은 작업 증명처럼 많은 자원을 필요로하지 않으므로 환경 관점에서는 더 나은 해법이겠지만 중앙화의 문제를 해결하지는 못 합니다.</strong></p><h2 id="불평등은-언제나-중앙화로-이어진다"><a href="#불평등은-언제나-중앙화로-이어진다" class="headerlink" title="불평등은 언제나 중앙화로 이어진다."></a>불평등은 언제나 중앙화로 이어진다.</h2><p>겉으로 보기에 탈중앙화된 것 같은 코인은 부유한 소수가 원하는 대로 시스템을 조작할 수 있는 현재의 금융 질서와 살짝 다를 뿐 비슷해지고 있습니다. 다시 말하지만 코인이나 그 코인이 사용하는 기술은 하나도 중요하지 않습니다. 작업 증명이든 지분 증명이든 채굴자에게 보상을 지불하는 한, 채굴자는 시스템 위에 군림하게 됩니다. 채굴자들이 모든 것을 운영하는 단 하나의 이유는 돈입니다. 채굴자들은 사실상 코인 자체에는 관심이 없습니다. 내일 비트코인이 없어진다면 채굴자들은 그저 이더리움이든 라이트코인이든 다른 코인을 채굴하면 됩니다.</p><p>그래서 블록체인의 업그레이드가 필요할 때 채굴자들은 자신들의 이기적인 이익을 최우선으로 생각합니다. 사용자들은 그런 방향을 원치 않을거라고요? 글쎄요, 체인을 포크(fork)해서 누가 더 많은 권력을 가지고 있는지 보면 알 수 있을 겁니다. 기존 체인이 죽더라도 누가 상관할까요?</p><h2 id="중앙화는-암호화폐를-퇴물로-만든다"><a href="#중앙화는-암호화폐를-퇴물로-만든다" class="headerlink" title="중앙화는 암호화폐를 퇴물로 만든다."></a>중앙화는 암호화폐를 퇴물로 만든다.</h2><p>만약 어떤 코인의 운명을 극소수의 개인이 좌우할 수 있다면 현재의 통화 시스템과 다를 게 무엇일까요? 그저 중앙 은행이 중앙 채굴자로 바뀌는 것 뿐입니다. 달라질 게 없는데 뭐하러 귀찮게 바꾸나요?</p><blockquote><p>꿈은 죽었습니다.</p></blockquote><p>채굴자 손아귀로 넘어간 권력은 탈중앙화된 암호화폐가 내세웠던 이상을 파괴합니다. 꿈은 죽었습니다. 가까스로 주류에 편입한 어떤 암호화폐라도 채굴자를 없애지 않으면 결국 똑같은 문제에 직면하게 됩니다.</p><h2 id="희망은-있다"><a href="#희망은-있다" class="headerlink" title="희망은 있다."></a>희망은 있다.</h2><p>아무도 시스템 위에 군림해서는 안 되며, 시스템의 일부가 되는 것 외에 다른 동기(motivation)가 있으면 안 됩니다. 채굴자와 사용자 사이에 아무런 차이가 없어야만 위에서 말한 문제가 생기지 않습니다. 전체를 이루는 모든 구성원은 평등(equal)해야 합니다. 문제의 핵심을 파고 들어서, 네트워크 운영에 대한 보상을 없앤다면 모두가 평등해질 수 있습니다. 보상이 없어지면 불평등이 없어지고(No rewards = no inequality), 평등해지면 중앙화는 사라집니다(No inequality = no centralization).</p><p>하지만 금전적인 보상이 없다면 도대체 누가 노드를 운영하려 할까요? 대답은 매우 단순하고, 아이오타(IOTA)는 이 문제를 처음부터 바로잡고 시작하는 유망한 프로젝트 입니다. 네트워크를 이용하려면 사용자 스스로 네트워크를 유지해야 합니다. 거래를 하고 싶으면 다른 두 개의 거래를 검사해줘야 합니다. 아주 단순하죠.</p><p>이 방식에서는 모든 사용자가 평등합니다. 네트워크의 일부가 되고 싶으면 네트워크의 일부가 되기 위해 노력을 해야 합니다. 각 사용자는 자신의 필요에 따라 주고 받습니다. 농담 섞어 말하자면 공산주의의 꿈이 디지털 암호 장부(cryptoledger)를 통해 마침내 이루어지게 되는 겁니다.</p><p>진심으로 말하자면, 이 방식은 지금까지 진정한 탈중앙화 달성을 위해 나온 여러 방식 중에서 가장 나은 접근 방식입니다. 아이오타 네트워크의 규모가 현실적으로 작고 그래서 코디네이터(coordinator)가 있어야만 안정성을 보장받을 수 있는 현 시점에서는, 진정한 탈중앙화를 이뤄낸 프로젝트는 없습니다. 하지만 규모가 충분해지고 그래서 코디네이터를 필요로 하지 않게 되는 순간, 아이오타는 현재의 암호화폐 세상의 질서를 바꿔놓을 수도 있습니다.</p><p>진정한 탈중앙화에 대한 약속이야말로 업계에서 아이오타가 사랑받는 이유입니다. 아이오타가 다른 어떤 프로젝트보다 많은 파트너십을 가질 수 있었던 이유이기도 합니다. 산업계에서 이미 큰 힘을 가지고 있는 회사가 수상한 소수의 개인에 의해 좌우될 수 있는 암호화폐 프로젝트와 뭐하러 손을 잡겠습니까? 암호화폐가 현실 세상에 제대로 도입되려면 진정한 탈중앙화와 평등은 필수 조건입니다. 99%의 암호화폐는 이 조건을 충족시키지 못합니다.</p><p>우리는 흥미진진한 세상을 살고 있습니다. 암호화폐에 대해 이렇게 비관적으로 얘기해서 유감이지만 누군가는 마음에 담았던 이야기를 해야만 하고 모든 문제의 근본 원인에 대해 이야기 해야 합니다. 경고일 수도 있고 미래의 암호화폐 프로젝트를 선택하는 팁일 수도 있는 이야기로 글을 마무리하려 합니다. 채굴자 없는 진정한 평등을 추구하지 않는 프로젝트의 운명은 이미 결정되어 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;탈중앙화된-암호화폐는-죽었다&quot;&gt;&lt;a href=&quot;#탈중앙화된-암호화폐는-죽었다&quot; class=&quot;headerlink&quot; title=&quot;탈중앙화된 암호화폐는 죽었다.&quot;&gt;&lt;/a&gt;탈중앙화된 암호화폐는 죽었다.&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;원저자
      
    
    </summary>
    
      <category term="Distributed Ledger Technology" scheme="http://homoefficio.github.io/categories/Distributed-Ledger-Technology/"/>
    
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="Cryptocurrency" scheme="http://homoefficio.github.io/tags/Cryptocurrency/"/>
    
      <category term="IOTA" scheme="http://homoefficio.github.io/tags/IOTA/"/>
    
      <category term="아이오타" scheme="http://homoefficio.github.io/tags/%EC%95%84%EC%9D%B4%EC%98%A4%ED%83%80/"/>
    
      <category term="암호화폐" scheme="http://homoefficio.github.io/tags/%EC%95%94%ED%98%B8%ED%99%94%ED%8F%90/"/>
    
      <category term="Distributed Ledger Technology" scheme="http://homoefficio.github.io/tags/Distributed-Ledger-Technology/"/>
    
      <category term="분산 원장 기술" scheme="http://homoefficio.github.io/tags/%EB%B6%84%EC%82%B0-%EC%9B%90%EC%9E%A5-%EA%B8%B0%EC%88%A0/"/>
    
      <category term="Blockchain" scheme="http://homoefficio.github.io/tags/Blockchain/"/>
    
      <category term="Translation" scheme="http://homoefficio.github.io/tags/Translation/"/>
    
      <category term="번역" scheme="http://homoefficio.github.io/tags/%EB%B2%88%EC%97%AD/"/>
    
  </entry>
  
  <entry>
    <title>Java URLClassLoader로 알아보는 클래스로딩</title>
    <link href="http://homoefficio.github.io/2018/10/14/Java-URLClassLoader%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%94%A9/"/>
    <id>http://homoefficio.github.io/2018/10/14/Java-URLClassLoader로-알아보는-클래스로딩/</id>
    <published>2018-10-13T15:13:39.000Z</published>
    <updated>2019-04-28T17:03:55.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-URLClassLoader로-알아보는-클래스로딩"><a href="#Java-URLClassLoader로-알아보는-클래스로딩" class="headerlink" title="Java URLClassLoader로 알아보는 클래스로딩"></a>Java URLClassLoader로 알아보는 클래스로딩</h1><p>Bootstrap ClassLoader, Extension ClassLoader, Application ClassLoader 이 3가지 기본 클래스로더 말고도 자주 사용되는<code>URLClassLoader</code>가 있다.<br>사실 Java 8의 Extension ClassLoader와 Application ClassLoader는 <code>URLClassLoader</code>를 상속받아서 만들어진 클래스다.</p><p>3가지 기본 클래스로더에 대한 자세한 내용은 <a href="https://homoefficio.github.io/2018/10/13/Java-클래스로더-훑어보기/">여기</a>를 참고한다.</p><p>간단한 <code>URLClassLoader</code> 예제로 클래스로딩 과정을 짚어보자.</p><h1 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h1><h2 id="URLClassLoader-예제"><a href="#URLClassLoader-예제" class="headerlink" title="URLClassLoader 예제"></a>URLClassLoader 예제</h2><h3 id="ClassLoaderRunner"><a href="#ClassLoaderRunner" class="headerlink" title="ClassLoaderRunner"></a>ClassLoaderRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.nio.zipfs.ZipInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"3 Default ClassLoader\n"</span>);</span><br><span class="line">        <span class="comment">// Bootstrap ClassLoader 확인</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader bootStrapClassLoader = String.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"Bootstrap Classloader - ClassLoader of String.class: "</span> + bootStrapClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extension ClassLoader 확인</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader extensionClassLoader = ZipInfo.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"Extension Classloader - ClassLoader of ZipInfo.class: "</span> + extensionClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Application ClassLoader 확인</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader applicationClassLoader = Internal.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"Application Classloader - ClassLoader of Internal.class: "</span> + applicationClassLoader);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ClassLoader Hierarchy\n"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"BootStrap ClassLoader           : "</span> + bootStrapClassLoader);</span><br><span class="line">        System.out.println(<span class="string">"extensionClassLoader.getParent(): "</span> + extensionClassLoader.getParent());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Extension ClassLoader             : "</span> + extensionClassLoader);</span><br><span class="line">        System.out.println(<span class="string">"applicationClassLoader.getParent(): "</span> + applicationClassLoader.getParent());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 외부 폴더에 있는 파일 존재 확인</span></span><br><span class="line">        <span class="keyword">final</span> File classRepo = <span class="keyword">new</span> File(<span class="string">"C:/Temp/class-repo/"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(classRepo.exists());</span></span><br><span class="line">        <span class="keyword">final</span> File abcClassFile = <span class="keyword">new</span> File(<span class="string">"C:/Temp/class-repo"</span>, <span class="string">"homo/efficio/classloader/External.class"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(abcClassFile.exists());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"ClassLoader for External and Internal\n"</span>);</span><br><span class="line">            <span class="keyword">final</span> URLClassLoader urlClassLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123; classRepo.toURI().toURL() &#125;);</span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; externalFromUrl = urlClassLoader.loadClass(<span class="string">"homo.efficio.classloader.External"</span>);</span><br><span class="line">            System.out.println(<span class="string">"ClassLoader of External: "</span> + externalFromUrl.getClassLoader());</span><br><span class="line">            System.out.println(<span class="string">"ClassLoader of Internal: "</span> + Internal.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"URL 형식이 잘못되었습니다."</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"클래스가 없습니다."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>간단하다. 먼저 3가지 기본 클래스로더를 출력해보고, 기본 클래스로더 사이의 위계 구조(Hierarchy)를 출력해서 확인해본다.</p><p>마지막으로 프로젝트 경로 외부에 있는 클래스를 <code>URLClassLoader</code>를 통해 읽어오는 부분이 있다. <code>URLClassLoader</code>를 생성할 때 <strong>URL만 인자로 넘기면 기본값으로 <code>ClassLoaderRunner</code>를 로딩한 애플리케이션 클래스로더가 parent classloader로 사용된다.</strong></p><p>유의해야할 점은 <strong>URLClassLoader의 생성자 인자로 URL을 넘겨줄 떄 <code>/</code>로 끝나는 문자열을 줘야 <code>.class</code> 파일을 인식할 수 있다</strong>는 점이다.</p><h3 id="Internal"><a href="#Internal" class="headerlink" title="Internal"></a>Internal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Internal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UUID uuid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter 생략</span></span><br></pre></td></tr></table></figure><p>Internal 클래스는 그냥 별다른 특이점이 없는 일반적인 클래스다.</p><h3 id="External"><a href="#External" class="headerlink" title="External"></a>External</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">External</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Internal internal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter 생략</span></span><br></pre></td></tr></table></figure><p>External 클래스는 컴파일 한 후에 클래스 파일을 프로젝트(클래스패스) 외부로 옮겨서 URLClassLoader 에 의해 로딩되는 부분을 테스트하는데 사용한다.</p><p>Internal 클래스를 필드로 가지고 있는데, External 클래스가 외부에서 로딩될 때 Internal 클래스의 로딩 여부를 확인하는 데 사용한다.</p><h2 id="실행-결과-1"><a href="#실행-결과-1" class="headerlink" title="실행 결과 - 1"></a>실행 결과 - 1</h2><p>클래스 파일을 전혀 손대지 않은 실행 결과는 다음과 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------</span><br><span class="line">3 Default ClassLoader</span><br><span class="line"></span><br><span class="line">Bootstrap Classloader - ClassLoader of String.class: null</span><br><span class="line">Extension Classloader - ClassLoader of ZipInfo.class: sun.misc.Launcher$ExtClassLoader@5a07e868</span><br><span class="line">Application Classloader - ClassLoader of Internal.class: sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">-----------------------------------</span><br><span class="line">ClassLoader Hierarchy</span><br><span class="line"></span><br><span class="line">BootStrap ClassLoader           : null</span><br><span class="line">extensionClassLoader.getParent(): null</span><br><span class="line">Extension ClassLoader             : sun.misc.Launcher$ExtClassLoader@5a07e868</span><br><span class="line">applicationClassLoader.getParent(): sun.misc.Launcher$ExtClassLoader@5a07e868</span><br><span class="line">-----------------------------------</span><br><span class="line">ClassLoader for External and Internal</span><br><span class="line"></span><br><span class="line">ClassLoader of External: sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">ClassLoader of Internal: sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="알-수-있는-점"><a href="#알-수-있는-점" class="headerlink" title="알 수 있는 점"></a>알 수 있는 점</h3><ul><li>Bootstrap ClassLoader는 <code>null</code> 로 표시된다. 실제로 Bootstrap ClassLoader는 Native C로 구현되어 있다.</li><li><code>jre/lib/ext</code> 폴더에 있는 jar 파일 안에 있는 <code>ZipInfo.class</code>를 통해 Extension ClassLoader를 확인할 수 있다.<ul><li>참고로 Java 9 에서는 모듈 시스템이 도입되면서 클래스로더에도 변화가 있었으며, <code>ZipInfo.class</code> 파일을 찾지 못해 컴파일 에러가 발생한다.</li></ul></li><li>External 클래스는 <code>URLClassLoader</code>를 통해 로딩을 시도하더라도, <strong>클래스 파일이 프로젝트 외부가 아닌 내부에 존재하고 있으면 클래스로딩 위임에 의해 <a href="https://github.com/HomoEfficio/dev-tips/blob/master/Java%20ClassLoader%20훑어보기.md" target="_blank" rel="noopener">여기</a>에 나온 것처럼 Application ClassLoader에 의해 로딩된다.</strong></li></ul><h2 id="External-클래스를-프로젝트-내부에서-외부로-옮긴-후-실행"><a href="#External-클래스를-프로젝트-내부에서-외부로-옮긴-후-실행" class="headerlink" title="External 클래스를 프로젝트 내부에서 외부로 옮긴 후 실행"></a>External 클래스를 프로젝트 내부에서 외부로 옮긴 후 실행</h2><p>다음 그림과 같이 External 클래스를 프로젝트 내부(즉 클래스패스)에서는 없애고 외부에만 존재하게 바꾸고 실행하면,</p><p><img src="https://i.imgur.com/uGY0oib.png" alt="Imgur"></p><p>다음과 같이 External 클래스가 Application ClassLoader가 아니라 <code>URLClassLoader</code>에 의해 로딩됨을 알 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------</span><br><span class="line">ClassLoader for External and Internal</span><br><span class="line"></span><br><span class="line">ClassLoader of External: java.net.URLClassLoader@2c7b84de</span><br><span class="line">ClassLoader of Internal: sun.misc.Launcher$AppClassLoader@18b4aac2</span><br></pre></td></tr></table></figure><h3 id="알-수-있는-점-1"><a href="#알-수-있는-점-1" class="headerlink" title="알 수 있는 점"></a>알 수 있는 점</h3><ul><li>컴파일 된 클래스 파일을 클래스패스 외부에 두고 <code>URLClassLoader</code>로 로딩할 수 있다.</li><li>외부에 있는 클래스 파일에 포함되어 있는 Internal는 클래스로더 위임에 따라 원래대로 Application ClassLoader에서 로딩한다.<ul><li><strong>즉 클래스패스 외부에 있는 클래스 파일이 클래스패스 내부에 있는 클래스를 참조하더라도 둘 모두 문제 없이 로딩해서 조합해서 사용할 수 있다.</strong></li></ul></li></ul><h1 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h1><h2 id="URLClassLoader-예제-1"><a href="#URLClassLoader-예제-1" class="headerlink" title="URLClassLoader 예제"></a>URLClassLoader 예제</h2><p>External, Internal 클래스는 Java 8 예제와 동일하고, main 클래스만 Java 9 에 맞게 조금 수정해야 한다.</p><h3 id="ClassLoaderRunner9"><a href="#ClassLoaderRunner9" class="headerlink" title="ClassLoaderRunner9"></a>ClassLoaderRunner9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homo.efficio.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> homo.efficio@gmail.com</span></span><br><span class="line"><span class="comment"> * Created on 2018-10-11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderRunner9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"3 Default ClassLoader\n"</span>);</span><br><span class="line">        <span class="comment">// Bootstrap ClassLoader 확인</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader bootStrapClassLoader = String.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"Bootstrap Classloader - ClassLoader of String.class: "</span> + bootStrapClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Platform ClassLoader 확인</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader platformClassLoader = ClassLoader.getPlatformClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"Platform Classloader - ClassLoader.getPlatformClassLoader(): "</span> + platformClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System ClassLoader 확인</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"System Classloader - ClassLoader.getSystemClassLoader()    : "</span> + systemClassLoader);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ClassLoader Hierarchy\n"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"BootStrap ClassLoader           : "</span> + bootStrapClassLoader);</span><br><span class="line">        System.out.println(<span class="string">"platformClassLoader.getParent() : "</span> + platformClassLoader.getParent());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Platform ClassLoader             : "</span> + platformClassLoader);</span><br><span class="line">        System.out.println(<span class="string">"systemClassLoader.getParent()    : "</span> + systemClassLoader.getParent());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 외부 폴더에 있는 파일 존재 확인</span></span><br><span class="line">        <span class="keyword">final</span> File classRepo = <span class="keyword">new</span> File(<span class="string">"C:/Temp/class-repo/"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(classRepo.exists());</span></span><br><span class="line">        <span class="keyword">final</span> File abcClassFile = <span class="keyword">new</span> File(<span class="string">"C:/Temp/class-repo"</span>, <span class="string">"homo/efficio/classloader/External.class"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(abcClassFile.exists());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"ClassLoader for External and Internal\n"</span>);</span><br><span class="line">            <span class="keyword">final</span> URLClassLoader urlClassLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123; classRepo.toURI().toURL() &#125;);</span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; externalFromUrl = urlClassLoader.loadClass(<span class="string">"homo.efficio.classloader.External"</span>);</span><br><span class="line">            System.out.println(<span class="string">"ClassLoader of External: "</span> + externalFromUrl.getClassLoader());</span><br><span class="line">            System.out.println(<span class="string">"ClassLoader of Internal: "</span> + Internal.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"URL 형식이 잘못되었습니다."</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"클래스가 없습니다."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 8과 달라진 점은 Platform ClassLoader와 System ClassLoader를 <code>ZipInfo.class</code>나 <code>Internal.class</code>와 같은 개별 클래스의 <code>getClassLoader()</code>가 아니라 <strong><code>ClassLoader.getPlatformClassLoader()</code>, <code>ClassLoader.getSystemClassLoader()</code>와 같이 <code>ClassLoader</code>의 static 메서드를 통해 직접 가졍로 수 있다</strong>는 점이다.</p><h2 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------</span><br><span class="line">3 Default ClassLoader</span><br><span class="line"></span><br><span class="line">Bootstrap Classloader - ClassLoader of String.class: null</span><br><span class="line">Platform Classloader - ClassLoader.getPlatformClassLoader(): jdk.internal.loader.ClassLoaders$PlatformClassLoader@e73f9ac</span><br><span class="line">System Classloader - ClassLoader.getSystemClassLoader()    : jdk.internal.loader.ClassLoaders$AppClassLoader@726f3b58</span><br><span class="line">-----------------------------------</span><br><span class="line">ClassLoader Hierarchy</span><br><span class="line"></span><br><span class="line">BootStrap ClassLoader           : null</span><br><span class="line">platformClassLoader.getParent() : null</span><br><span class="line">Platform ClassLoader             : jdk.internal.loader.ClassLoaders$PlatformClassLoader@e73f9ac</span><br><span class="line">systemClassLoader.getParent()    : jdk.internal.loader.ClassLoaders$PlatformClassLoader@e73f9ac</span><br><span class="line">-----------------------------------</span><br><span class="line">ClassLoader for External and Internal</span><br><span class="line"></span><br><span class="line">ClassLoader of External: java.net.URLClassLoader@96532d6</span><br><span class="line">ClassLoader of Internal: jdk.internal.loader.ClassLoaders$AppClassLoader@726f3b58</span><br><span class="line">-----------------------------------</span><br></pre></td></tr></table></figure><p>클래스로더의 패키지와 이름이 좀 달라지기는 했지만, 기본 클래스로더의 3계층 구조나 3가지 원칙 등 내용적으로는 Java 8과 같다.</p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><blockquote><p>URLClassLoader를 사용하면 클래스패스 외부에 있는 클래스를 로딩해서 클래스패스 내부에 있는 클래스와 조합해서 사용할 수 있다.</p><p>URLClassLoader로 개별 <code>.class</code> 파일을 로딩하려면 해당 클래스 파일을 포함한 URL이 <code>/</code>로 끝나야 한다.</p><p>URLClassLoader로 로딩을 시도하더라도 클래스 파일이 클래스패스 내에 존재하면 클래스로더 위임 원칙에 의해 URLClassLoader가 아닌 애플리케이션 클래스로더(Java 9부터는 시스템 클래스로더)에 의해 로딩된다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-URLClassLoader로-알아보는-클래스로딩&quot;&gt;&lt;a href=&quot;#Java-URLClassLoader로-알아보는-클래스로딩&quot; class=&quot;headerlink&quot; title=&quot;Java URLClassLoader로 알아보는 클래스로
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="ClassLoader" scheme="http://homoefficio.github.io/tags/ClassLoader/"/>
    
      <category term="Default ClassLoader" scheme="http://homoefficio.github.io/tags/Default-ClassLoader/"/>
    
      <category term="Bootstrap ClassLoader" scheme="http://homoefficio.github.io/tags/Bootstrap-ClassLoader/"/>
    
      <category term="Extension ClassLoader" scheme="http://homoefficio.github.io/tags/Extension-ClassLoader/"/>
    
      <category term="Application ClassLoader" scheme="http://homoefficio.github.io/tags/Application-ClassLoader/"/>
    
      <category term="ClassLoader Delegation" scheme="http://homoefficio.github.io/tags/ClassLoader-Delegation/"/>
    
      <category term="Delegation Principle" scheme="http://homoefficio.github.io/tags/Delegation-Principle/"/>
    
      <category term="Visibility Principle" scheme="http://homoefficio.github.io/tags/Visibility-Principle/"/>
    
      <category term="Uniqueness Principle" scheme="http://homoefficio.github.io/tags/Uniqueness-Principle/"/>
    
      <category term="Java 9" scheme="http://homoefficio.github.io/tags/Java-9/"/>
    
      <category term="Platform ClassLoader" scheme="http://homoefficio.github.io/tags/Platform-ClassLoader/"/>
    
      <category term="System ClassLoader" scheme="http://homoefficio.github.io/tags/System-ClassLoader/"/>
    
      <category term="자바 클래스로더" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="부트스트랩 클래스로더" scheme="http://homoefficio.github.io/tags/%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="애플리케이션 클래스로더" scheme="http://homoefficio.github.io/tags/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="플랫폼 클래스로더" scheme="http://homoefficio.github.io/tags/%ED%94%8C%EB%9E%AB%ED%8F%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="시스템 클래스로더" scheme="http://homoefficio.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="URLClassLoader" scheme="http://homoefficio.github.io/tags/URLClassLoader/"/>
    
  </entry>
  
  <entry>
    <title>Java 클래스로더 훑어보기</title>
    <link href="http://homoefficio.github.io/2018/10/13/Java-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0/"/>
    <id>http://homoefficio.github.io/2018/10/13/Java-클래스로더-훑어보기/</id>
    <published>2018-10-13T12:58:48.000Z</published>
    <updated>2019-04-28T17:03:55.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-ClassLoader-훑어보기"><a href="#Java-ClassLoader-훑어보기" class="headerlink" title="Java ClassLoader 훑어보기"></a>Java ClassLoader 훑어보기</h1><p>아주 예전에 SCJP 시험볼 때나 살펴본 이후로 자바의 클래스로더를 직접 다뤄야 할 일은 솔직히 없었다. 그래서 거의 잊고 살아왔는데 요즘 Quartz를 다루면서 Quartz에 없는 기능인 외부 Job 클래스 로딩 기능을 만들면서 정말로 오랜만에 들여다보게 됐다.</p><p>클래스로더는 Java9에 모듈 시스템이 도입되면서 적지 않은 변경이 있었다. 자세한 내용은 <a href="https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-D867DCCC-CEB5-4AFA-9D11-9C62B7A3FAB1" target="_blank" rel="noopener">https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-D867DCCC-CEB5-4AFA-9D11-9C62B7A3FAB1</a> 를 참고하고, 먼저 Java8 까지 적용됐던 내용을 기준으로 되짚어보자.</p><h1 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h1><h2 id="3가지-기본-클래스로더"><a href="#3가지-기본-클래스로더" class="headerlink" title="3가지 기본 클래스로더"></a>3가지 기본 클래스로더</h2><p><img src="https://i.imgur.com/cs5Qyoe.png" alt="Imgur"></p><h3 id="Bootstrap-ClassLoader"><a href="#Bootstrap-ClassLoader" class="headerlink" title="Bootstrap ClassLoader"></a>Bootstrap ClassLoader</h3><ul><li>부트스트랩 클래스로더는 3가지 기본 클래스로더 중 최상위 클래스로더로서, 쉽게 말하면 <code>jre/lib/rt.jar</code>에 담긴 JDK 클래스 파일을 로딩한다. </li><li>Native C로 구현돼 있어서, <code>String.class.getClassLoader()</code>는 그냥 <code>null</code>을 반환한다. Primordial ClassLoader 라고 불리기도 한다.</li></ul><h3 id="Extension-ClassLoader"><a href="#Extension-ClassLoader" class="headerlink" title="Extension ClassLoader"></a>Extension ClassLoader</h3><ul><li>익스텐션 클래스로더는 <code>jre/lib/ext</code> 폴더나 <code>java.ext.dirs</code> 환경 변수로 지정된 폴더에 있는 클래스 파일을 로딩한다. </li><li>Java로 구현되어 있으며 <code>sun.misc.Launcher</code> 클래스 안에 static 클래스로 구현되어 있으며, <code>URLClassLoader</code>를 상속하고 있다.</li></ul><h3 id="Application-ClassLoader"><a href="#Application-ClassLoader" class="headerlink" title="Application ClassLoader"></a>Application ClassLoader</h3><ul><li>애플리케이션 클래스로더는 <code>-classpath(또는 -cp)</code>나 JAR 파일 안에 있는 Manifest 파일의 <code>Class-Path</code> 속성값으로 지정된 폴더에 있는 클래스를 로딩한다.</li><li>익스텐션 클래스로더와 마찬가지로 Java로 구현되어 있으며, <code>sun.misc.Launcher</code> 클래스 안에 static 클래스로 구현되어 있으며, <code>URLClassLoader</code>를 상속하고 있다.</li><li>개발자가 애플리케이션 구동을 위해 직접 작성한 대부분의 클래스는 이 애플리케이션 클래스로더에 의해 로딩된다.</li></ul><h2 id="3가지-원칙"><a href="#3가지-원칙" class="headerlink" title="3가지 원칙"></a>3가지 원칙</h2><p>자바 클래스로더는 3이라는 숫자와 친해 보인다. 기본 클래스로더가 3가지이고, 작동 원칙도 3가지다.</p><h3 id="Delegation-Principle"><a href="#Delegation-Principle" class="headerlink" title="Delegation Principle"></a>Delegation Principle</h3><p>위임 원칙은 클래스 로딩이 필요할 때 <strong>3가지 기본 클래스로더의 윗 방향으로 클래스 로딩을 위임하는 것</strong>을 말한다. <code>main()</code> 메서드가 포함된 <code>ClassLoaderRunner</code> 클래스에서 개발자가 직접 작성한 <code>Internal</code> 클래스를 로딩하는 과정을 그림으로 표현하면 다음과 같다.</p><p><img src="https://i.imgur.com/kijdBjb.png" alt="Imgur"></p><ol><li><p><code>ClassLoaderRunner</code>는 자기 자신을 로딩한 애플리케이션 클래스로더에게 <code>Internal</code> 클래스 로딩을 요청한다.</p></li><li><p>클래스 로딩 요청을 받은 애플리케이션 클래스로더는 <code>Internal</code>을 스스로 직접 로딩하지 않고 상위 클래스로더인 익스텐션 클래스로더에게 위임한다.</p></li><li><p>클래스 로딩 요청을 받은 익스텐션 클래스로더도 <code>Internal</code>을 스스로 직접 로딩하지 않고 상위 클래스로더인 부트스트랩 클래스로더에게 위임한다.</p></li><li><p>부트스트랩 클래스로더는 <code>rt.jar</code>에서 <code>Internal</code>을 찾아서</p><p> 4.1 있으면 로딩 후 반환하고</p></li><li><p>없으면 익스텐션 클래스로더가 <code>jre/lib/ext</code> 폴더나 <code>java.ext.dirs</code> 환경 변수로 지정된 폴더에서 <code>Internal</code>을 찾아서</p><p> 5.1 있으면 로딩 후 반환하고</p></li><li><p>없으면 애플리케이션 클래스로더가 클래스패스에서 <code>Internal</code>을 찾아서</p><p> 6.1 있으면 로딩 후 반환하고</p></li><li><p>없으면 <code>ClassNotFoundException</code>이 발생한다.</p></li></ol><p>이런 식으로 동작하는 이유는 두 번째 원칙인 Visibility Principle과 관련이 있다.</p><h3 id="Visibility-Principle"><a href="#Visibility-Principle" class="headerlink" title="Visibility Principle"></a>Visibility Principle</h3><p>가시범위 원칙은 <strong>하위 클래스로더는 상위 클래스로더가 로딩한 클래스를 볼 수 있지만, 상위 클래스로더는 하위 클래스로더가 로딩한 클래스를 볼 수 없다</strong>는 원칙이다.</p><p>만약에 개발자가 만든 클래스를 로딩하는 애플리케이션 클래스로더가 부트스트랩 클래스로더에 의해 로딩된 <code>String.class</code>를 볼 수 없다면 애플리케이션은 <code>String.class</code>를 사용할 수 없을 것이다. 따라서 하위에서는 상위를 볼 수 있어야 애플리케이션이 제대로 동작할 수 있다.</p><p>상위에서도 하위를 볼 수 있다면 상/하위 구분이 사실상 없어진다. 클래스로더를 3가지로 나눈 이유가 있을텐데 상위가 하위를 볼 수 있으면 구분 의미가 희석돼버린다.</p><p>따라서 하위에서는 상위를 볼 수 있지만 상위에서는 하위를 볼 수 없어야 한다.</p><h3 id="Uniqueness-Principle"><a href="#Uniqueness-Principle" class="headerlink" title="Uniqueness Principle"></a>Uniqueness Principle</h3><p>유일성 원칙은 <strong>하위 클래스로더는 상위 클래스로더가 로딩한 클래스를 다시 로딩하지 않게 해서 로딩된 클래스의 유일성을 보장</strong>하는 것이다. 유일성을 식별하는 기준은 클래스의 <code>binary name</code>인데, <code>toString()</code>으로 찍다보면 가끔 보이는 <code>java.lang.String</code>, <code>javax.swing.JSpinner$DefaultEditor</code>, <code>java.security.KeyStore$Builder$FileBuilder$1</code>, <code>java.net.URLClassLoader$3$1</code> 이런 것들이 바로 <code>binary name</code>이다. <code>binary name</code>의 자세한 내용은 <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1</a> 를 참고한다.</p><h1 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h1><p>Java 9 에서도 기본 클래스로더의 3계층 구조와 3가지 원칙은 그대로 유효하다. 다만 모듈 시스템 도입에 맞춰 이름과 범위, 구현 내용 등이 바뀌었다.</p><p><a href="https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-EEED398E-AE37-4D12-AB10-49F82F720027" target="_blank" rel="noopener">https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-EEED398E-AE37-4D12-AB10-49F82F720027</a> 요 내용 중 ClassLoader에 관련된 내용만 추려보면 다음과 같다.</p><h2 id="한-표-요약"><a href="#한-표-요약" class="headerlink" title="한 표 요약"></a>한 표 요약</h2><table><thead><tr><th>Java 8</th><th>Java 9</th><th>달라진 점</th></tr></thead><tbody><tr><td>Bootstrap ClassLoader</td><td>이름 그대로</td><td>- rt.jar 등이 없어짐에 따라 로딩할 수 있는 클래스의 범위가 전반적으로 축소 <br> - 따라서 parent classloader 인자로 <code>null</code>을 넘겨주며 Bootstrap ClassLoader를 parent classloader로 사용했던 코드 수정 필요할 수 있음</td></tr><tr><td>Extension ClassLoader</td><td>Platform ClassLoader</td><td>- <code>jre/lib/ext</code>, <code>java.ext.dirs</code>를 지원하지 않음 <br> - Java SE의 모든 클래스와 Java SE에는 없지만 JCP에 의해 표준화 된 모듈 내의 클래스를 볼 수 있으며, Java 8에 비해 볼 수 있는 범위가 확장됨 <br> - <code>URLClassLoader</code>가 아닌 <code>BuiltinClassLoader</code>를 상속받아 <code>ClassLoaders</code> 클래스의 내부 static 클래스로 구현됨</td></tr><tr><td>Application ClassLoader</td><td>System ClassLoader</td><td>- 클래스패스, 모듈패스에 있는 클래스 로딩 <br> - <code>URLClassLoader</code>가 아닌 <code>BuiltinClassLoader</code>를 상속받아 <code>ClassLoaders</code> 클래스의 내부 static 클래스로 구현됨</td></tr></tbody></table><h2 id="rt-jar-tools-jar-가-제거됨"><a href="#rt-jar-tools-jar-가-제거됨" class="headerlink" title="rt.jar, tools.jar 가 제거됨"></a>rt.jar, tools.jar 가 제거됨</h2><p><code>rt.jar</code>, <code>tools.jar</code> 등 기본으로 제공되던 jar 파일이 없어지고 그 안에 있던 내용들은 모듈 시스템에 맞게 더 효율적으로 재편되어 <code>lib</code> 폴더 안에 저장된다. 이에 따라 <code>rt.jar</code>내의 모든 클래스를 로딩할 수 있던 Bootstrap ClassLoader가 로딩할 수 있는 클래스의 범위도 전체적으로 줄어들었다.</p><p>따라서 <strong>Bootstrap ClassLoader를 parent classloader로 사용하던 코드에서는 문제가 발생할 수 있다.</strong> </p><p>이럴 때는 <strong>Bootstrap Classloader를 의미하는 <code>null</code> 대신 <code>Classloader.getPlatformClassLoader()</code>를 인자로 넘겨서 가시 범위가 확장된 Platform ClassLoader를 parent classloader로 사용하면 된다.</strong></p><h2 id="jre-lib-ext-java-ext-dirs-lib-endorsed-java-endorsed-dirs-가-제거됨"><a href="#jre-lib-ext-java-ext-dirs-lib-endorsed-java-endorsed-dirs-가-제거됨" class="headerlink" title="jre/lib/ext, java.ext.dirs, lib/endorsed, java.endorsed.dirs 가 제거됨"></a>jre/lib/ext, java.ext.dirs, lib/endorsed, java.endorsed.dirs 가 제거됨</h2><p><code>jre/lib/ext</code>, <code>lib/endorsed</code> 가 파일시스템에 존재하거나 <code>java.ext.dirs</code>, <code>java.endorsed.dirs</code>가 환경변수로 설정되어 있으면 <code>javac</code>나 <code>java</code>는 실행이 종료된다.</p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><blockquote><p>Java에는 3가지 기본 클래스로더가 있다.</p><ol><li><p>부트스트랩 클래스로더</p></li><li><p>익스텐션 클래스로더(Java 9부터는 플랫폼 클래스로더)</p></li><li><p>애플리케이션 클래스로더(Java 9부터 시스템 클래스로더)</p></li></ol><p>클래스로더 동작에는 3가지 원칙이 있다.</p><ol><li><p>위임 원칙: 클래스로딩 작업을 상위 클래스로더에 위임한다.</p></li><li><p>가시 범위 원칙: 하위 클래스로더는 상위 클래스로더가 로딩한 클래스를 볼 수 있지만, 상위 클래스로더는 하위 클래스로더가 로딩한 클래스를 볼 수 없다.</p></li><li><p>유일성 원칙: 하위 클래스로더는 상위 클래스로더가 로딩한 클래스를 다시 로딩하지 않게 해서 로딩된 클래스의 유일성을 보장한다.</p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-ClassLoader-훑어보기&quot;&gt;&lt;a href=&quot;#Java-ClassLoader-훑어보기&quot; class=&quot;headerlink&quot; title=&quot;Java ClassLoader 훑어보기&quot;&gt;&lt;/a&gt;Java ClassLoader 훑어보기&lt;/
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="ClassLoader" scheme="http://homoefficio.github.io/tags/ClassLoader/"/>
    
      <category term="Default ClassLoader" scheme="http://homoefficio.github.io/tags/Default-ClassLoader/"/>
    
      <category term="Bootstrap ClassLoader" scheme="http://homoefficio.github.io/tags/Bootstrap-ClassLoader/"/>
    
      <category term="Extension ClassLoader" scheme="http://homoefficio.github.io/tags/Extension-ClassLoader/"/>
    
      <category term="Application ClassLoader" scheme="http://homoefficio.github.io/tags/Application-ClassLoader/"/>
    
      <category term="ClassLoader Delegation" scheme="http://homoefficio.github.io/tags/ClassLoader-Delegation/"/>
    
      <category term="Delegation Principle" scheme="http://homoefficio.github.io/tags/Delegation-Principle/"/>
    
      <category term="Visibility Principle" scheme="http://homoefficio.github.io/tags/Visibility-Principle/"/>
    
      <category term="Uniqueness Principle" scheme="http://homoefficio.github.io/tags/Uniqueness-Principle/"/>
    
      <category term="Java 9" scheme="http://homoefficio.github.io/tags/Java-9/"/>
    
      <category term="Platform ClassLoader" scheme="http://homoefficio.github.io/tags/Platform-ClassLoader/"/>
    
      <category term="System ClassLoader" scheme="http://homoefficio.github.io/tags/System-ClassLoader/"/>
    
      <category term="자바 클래스로더" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="부트스트랩 클래스로더" scheme="http://homoefficio.github.io/tags/%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="애플리케이션 클래스로더" scheme="http://homoefficio.github.io/tags/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="플랫폼 클래스로더" scheme="http://homoefficio.github.io/tags/%ED%94%8C%EB%9E%AB%ED%8F%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
      <category term="시스템 클래스로더" scheme="http://homoefficio.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94/"/>
    
  </entry>
  
  <entry>
    <title>스펙따라 만들어보는 OAuth 1.0a Client</title>
    <link href="http://homoefficio.github.io/2018/08/27/%EC%8A%A4%ED%8E%99%EB%94%B0%EB%9D%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EB%8A%94-OAuth-1-0a-Client/"/>
    <id>http://homoefficio.github.io/2018/08/27/스펙따라-만들어보는-OAuth-1-0a-Client/</id>
    <published>2018-08-26T15:20:58.000Z</published>
    <updated>2019-04-28T17:03:55.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스펙따라-만들어보는-OAuth-1-0a-Client"><a href="#스펙따라-만들어보는-OAuth-1-0a-Client" class="headerlink" title="스펙따라 만들어보는 OAuth 1.0a Client"></a>스펙따라 만들어보는 OAuth 1.0a Client</h1><h2 id="OAuth-탄생-배경"><a href="#OAuth-탄생-배경" class="headerlink" title="OAuth 탄생 배경"></a>OAuth 탄생 배경</h2><ul><li><p>많은 서비스가 API를 통해 서로 연결</p><blockquote><p><strong>내가 A라는 앱에 쓴 글이 내 트위터 타임라인에도 표시되면 좋겠다.</strong></p></blockquote></li><li><p>하지만 A 앱은 내 트위터 타임라인에 글을 쓸 권한이 없다.</p></li><li><p>물론 A 앱이 내 트위터 계정 정보를 알고 있다면 A 앱이 내 트위터 타임라인에 글을 쓸 수 있겠지만,</p></li><li><p>필요한 것은 글을 쓸 수 있는 권한 뿐인데 계정 정보를 모두 A 앱에게 알려줄 필요는 없다.</p></li><li><p>따라서 내가 A 앱에게 글을 쓸 권한을 줬다는 사실을 트위터에게 알려주고,</p></li><li><p>그 사실을 트위터가 확인할 수 있다면,</p></li><li><p>내 계정 정보를 A 앱에게 알려주지 않고도 A 앱이 트위터에 글을 쓸 수 있게 된다.</p></li><li><p><strong>내가 A 앱에 쓴 글을 내 트위터 타임라인에도 표시</strong>하려면 결국 다음의 질문에 대한 답이 필요하다.</p><blockquote><p><strong>내가 A 앱에게 권한을 줬다는 사실을 트위터에게 어떻게 알려줄 수 있을까?</strong></p></blockquote></li></ul><h1 id="OAuth-1-0a"><a href="#OAuth-1-0a" class="headerlink" title="OAuth 1.0a"></a>OAuth 1.0a</h1><p>어떤 행위(내가 A 앱에게 트위터에 글을 쓸 권한을 준 행위)가 이루어졌음을 프로그래밍을 통해 증명하는 여러 방식 중에 대표적으로 서명(Signature)이라는 것이 있다.</p><p>아래 그림은 서명 방식 중에서 HMAC(Hashed Message Authentication Code)를 보여주고 있다.</p><p><img src="https://www.thinqloud.com/wp-content/uploads/2017/07/blog_banner_2-1.jpg" alt=""><br>(출처: <a href="https://www.thinqloud.com/hmac-authentication-in-salesforce/" target="_blank" rel="noopener">https://www.thinqloud.com/hmac-authentication-in-salesforce/</a>)</p><ul><li>송신자와 수신자가 비밀키를 공유하고,</li><li>송신자는 평문(빨간 문서 아이콘)과 비밀키를 함께 해시한 값(MAC)과 평문을 함께 수신자에게 보내면,</li><li>수신자는 송신자가 보낸 평문과 송신자와 공유하고 있는 비밀키를 함께 해시한 값(Hash Output)을 계산하고,</li><li>계산한 값이 송신자가 보낸 MAC 값과 같은지 비교해서 평문(어떤 행위)이 송신자로부터 전송되었음을 확인한다.</li></ul><p>OAuth 1.0a는 권한을 줬다는 사실을 위와 같은 서명 방식을 이용해서 증명한다. </p><p>과정이 조금 복잡한 면이 있어서 요즘은 조금 더 간단하고 편리한 OAuth 2.0이 더 많이 사용되지만, 편리한 만큼 보안성을 양보해야 한다. </p><p>OAuth 1.0a를 이해하면 OAuth 2.0을 쉽게 이해할 수 있으므로 학습 관점에서는 OAuth 1.0a를 먼저 공부하는 것이 의미가 있다.</p><p>이제 OAuth 1.0a를 좀더 구체적으로 알아보자.</p><h2 id="등장-인물-이라-쓰고-용어라고-읽"><a href="#등장-인물-이라-쓰고-용어라고-읽" class="headerlink" title="등장 인물(이라 쓰고 용어라고 읽..)"></a>등장 인물(이라 쓰고 용어라고 읽..)</h2><ul><li>Resource Owner: 트위터 계정을 가지고 있는 트위터 사용자. 앱 A에 대한 사용권한도 가지고 있다.</li><li>Client: 트위터 API를 이용해서 트위터에 글을 남기려는 앱 A.</li><li><p>Server: API로 서비스를 제공하는 트위터.</p></li><li><p>Client Credentials: 등록을 요청한 Client 앱에게 Server가 발급한 등록 정보</p></li><li>Temporary Credentials: Client의 권한 부여 요청을 확인하고 Server가 발급한 임시 확인 정보</li><li>Token Credentials: 사용자로부터 권한을 부여받았음을 확인하고 Server가 발급한 접근 토큰 정보</li></ul><p>참고로 다음과 같이 가리키는 대상은 같지만 <a href="https://oauth.net/core/1.0/" target="_blank" rel="noopener">OAuth 1.0</a>과 <a href="https://tools.ietf.org/html/rfc5849" target="_blank" rel="noopener">OAuth 1.0a</a>에서의 용어가 다르며, 커뮤니티 버전인 OAuth 1.0의 용어를 그대로 쓰고 있는 자료도 많다.</p><table><thead><tr><th>OAuth 1.0</th><th>OAuth 1.0a</th></tr></thead><tbody><tr><td>User</td><td>Resource Owner</td></tr><tr><td>Consumer</td><td>Client</td></tr><tr><td>Service Provider</td><td>Server</td></tr><tr><td>Consumer Key and Secret</td><td>Client Credentials</td></tr><tr><td>Request Token and Secret</td><td>Temporary Credentials</td></tr><tr><td>Access Token and Secret</td><td>Token Credentials</td></tr></tbody></table><p><strong>1.0의 용어가 더 구별하기 쉽고 직관적이어서 학습하기에 좋으므로 본 글에서는 1.0 용어를 사용한다.</strong> 1.0 용어로 이해한 후에는 1.0a의 용어도 쉽게 받아들일 수 있을 것이다.</p><p>한 가지 짚고 넘어갈 용어로 Secret이 있는데, 서명 방식에서 <strong>Secret은 Service Provider가 Consumer에게 발급하고 둘이 각자 보유하고 있다가 필요할 떄 사용할 뿐 온라인으로 주고 받지 않는 정보</strong>다.</p><h2 id="사전-조건"><a href="#사전-조건" class="headerlink" title="사전 조건"></a>사전 조건</h2><ul><li>Consumer는 Service Provider의 API를 이용할 수 있도록 등록되어 있어야 한다.</li><li>User는 Consumer와 Service Provider 모두를 사용할 수 있는 권한을 가지고 있다.</li></ul><h2 id="Service-Provider로부터-확인-받아야-하는-사항"><a href="#Service-Provider로부터-확인-받아야-하는-사항" class="headerlink" title="Service Provider로부터 확인 받아야 하는 사항"></a>Service Provider로부터 확인 받아야 하는 사항</h2><ul><li>Consumer는 User로부터 권한 부여 요청을 받았다는 사실을 Service Provider로부터 확인 받아야 함 - (1)</li><li>User는 Service Provider의 사용자임을 Service Provider로부터 확인 받아야 함 - (2)</li><li>User는 Consumer에게 권한을 부여했음을 Service Provider로부터 확인 받아야 함 - (3)</li></ul><p>이 3가지 확인을 받기위한 절차를 개략적으로 생각해보자</p><h2 id="절차-개요"><a href="#절차-개요" class="headerlink" title="절차 개요"></a>절차 개요</h2><ol><li><p>User가 Consumer에 글을 쓰고 ‘Service Provider에도 남기기’ 버튼을 누른다.</p></li><li><p>Consumer는 자신의 등록 정보를 바탕으로 Signature를 만들고 Service Provider에게 Signature를 보내서 사용자로부터 권한 부여 요청을 받았음을 Service Provider에게 알리고, Service Provider는 권한 부여 요청을 확인했다는 임시 증표(Request Token)를 저장하고 Request Token을 Consumer에게 발급한다. (1)</p></li><li><p>Consumer는 권한 부여 요청 확인 증표(Request Token)와 함께 User의 요청을 Service Provider의 인가(권한 부여) 화면으로 리다이렉트한다.</p></li><li><p>User가 Service Provider에 로그인 한 상태가 아니라면 로그인 한다. (2)</p></li><li><p>인가 화면에는 ‘Consumer에게 권한 부여’ 버튼이 표시된다.</p></li><li><p>User가 ‘Consumer에게 권한 부여’ 버튼을 클릭하면, Service Provider는 User가 (Request Token을 확인하고) Consumer에게 권한을 부여했음을 확인하고, 확인 코드(Verifier 또는 Authorization_code)를 저장 및 User에게 반환하고 Consumer가 제공하는 callback 화면으로 리다이렉트한다. (3)</p></li><li><p>리다이렉트를 통해 권한 부여 확인 코드를 전달 받은 Consumer는 Consumer Key, Request Token, Verifier 등을 대상으로 Consumer Secret, Request Token Secret를 이용해서 Signature를 만들고 Service Provider에게 Signature를 보낸다.</p></li><li><p>Service Provider는 Consumer가 보낸 Signature를 확인하고 User만 접근할 수 있었던 보호 자원에 대한 접근 증표(Access Token)를 Consumer에게 발급한다.</p></li><li><p>이후 Consumer는 Access Token를 Service Provider에게 보여주면서 User를 대신해서 보호 자원에 접근한다.</p></li></ol><p>6번까지 진행되면 확인해야 할 3가지 사항은 모두 확인했으므로 바로 보호 자원에 대한 Access Token을 발급할 수 있지만, 6번에서 발급하면 증표가 User에게 직접 발급되고 User의 Local Storage나 Session에 남을 수 있으므로 유출 가능성이 발생한다. 따라서 6번에서는 발급하지 않고 8번에서 Consumer에게 발급한다.</p><p>위 과정에서 ‘권한 부여 요청 확인 증표’를 <code>Request Token</code>, ‘권한 부여 확인 코드’를 <code>Verifier 또는 AuthorizationCode</code>, ‘보호 자원 접근 증표’를 <code>Access Token</code>이라고 부른다.</p><h2 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h2><p>위 절차 개요를 좀더 상세하게 시퀀스 다이어그램으로 표현해보면 다음과 같다.</p><p><img src="https://i.imgur.com/quqloI2.png" alt="Imgur"></p><p>(<a href="http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art014" target="_blank" rel="noopener">http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art014</a> 내용 참고하여 재구성)</p><p>초록색 화살표는 브라우저와 웹 서버의 통신을 나타내며, 파란색 화살표는 HTTP API 호출을 나타낸다.</p><p>이제 시퀀스 다이어그램을 토대로 실제 구현해보자.</p><h1 id="OAuth-1-0a-구현-Consumer"><a href="#OAuth-1-0a-구현-Consumer" class="headerlink" title="OAuth 1.0a 구현 - Consumer"></a>OAuth 1.0a 구현 - Consumer</h1><p>첫 번째 시나리오는 직접 구현한 Consumer를 통해 Service Provider인 트위터의 API를 사용해서 트위터에 글을 올리는 것이다. </p><h2 id="사전-조건-1"><a href="#사전-조건-1" class="headerlink" title="사전 조건"></a>사전 조건</h2><p>먼저 트위터에 내가 만들 Consumer 앱을 등록해야 한다. 참고로 OAuth 1.0a에서 Consumer라고 부르는 애플리케이션을 트위터에서는 트위터 앱(Twitter App)이라고 부른다.</p><p>Consumer 앱을 트위터에 등록하려면 먼저 트위터 개발자 계정이 있어야 한다. <a href="https://developer.twitter.com/en/docs/basics/developer-portal/overview" target="_blank" rel="noopener">트위터 개발자 포털</a>에서 개발자 계정을 신청할 수 있다.</p><p>개발자 계정 신청과 트위터 앱 등록 과정 설명은 아래의 화면 캡처로 대신한다.</p><h3 id="트위터-개발자-계정-신청"><a href="#트위터-개발자-계정-신청" class="headerlink" title="트위터 개발자 계정 신청"></a>트위터 개발자 계정 신청</h3><p><img src="https://i.imgur.com/OiGrOKX.png" alt="Imgur"></p><p><img src="https://i.imgur.com/Lp1vUPB.png" alt="Imgur"></p><p><img src="https://i.imgur.com/R1NUNqg.png" alt="Imgur"></p><p><img src="https://i.imgur.com/hV1K0xX.png" alt="Imgur"></p><p><img src="https://i.imgur.com/csco9Qs.png" alt="Imgur"></p><p><img src="https://i.imgur.com/J6ltjT6.png" alt="Imgur"></p><p><img src="https://i.imgur.com/ZgGGlFB.png" alt="Imgur"></p><p><img src="https://i.imgur.com/Ap50ZcF.png" alt="Imgur"></p><p><img src="https://i.imgur.com/AXkdALv.png" alt="Imgur"></p><p><img src="https://i.imgur.com/9QjOwMn.png" alt="Imgur"></p><p><img src="https://i.imgur.com/EJKOIXN.png" alt="Imgur"></p><h3 id="트위터-앱-등록"><a href="#트위터-앱-등록" class="headerlink" title="트위터 앱 등록"></a>트위터 앱 등록</h3><p><img src="https://i.imgur.com/3DWV3GB.png" alt="Imgur"></p><p><img src="https://i.imgur.com/85q36Jq.png" alt="Imgur"></p><p><img src="https://i.imgur.com/ikYSSYN.png" alt="Imgur"></p><p><img src="https://i.imgur.com/4OyDBKp.png" alt="Imgur"></p><p><img src="https://i.imgur.com/P8CcCqg.png" alt="Imgur"></p><p><img src="https://i.imgur.com/SYsQSMF.png" alt="Imgur"></p><h2 id="Consumer-앱-개발"><a href="#Consumer-앱-개발" class="headerlink" title="Consumer 앱 개발"></a>Consumer 앱 개발</h2><p>Consumer 앱은 OAuth 1.0a 흐름을 파악하는데 필요한 최소한의 기능만을 담아 간단하게 개발한다. 기능은 다음과 같다.</p><ul><li>글을 쓸 수 있는 폼 화면</li><li>권한 부여 요청 전송 (시퀀스 다이어그램 2번)</li><li>서명 생성 기능</li><li>접근 토큰 요청 전송 (시퀀스 다이어그램 14번)</li><li>트위터에 글 쓰기 (시퀀스 다이어그램 20번)</li></ul><p>편의상 스프링 부트로 개발하며, 프로젝트 생성 등의 자세한 과정은 생략한다.</p><p>OAuth 1.0a Spec인 <a href="https://tools.ietf.org/html/rfc5849" target="_blank" rel="noopener">RFC-5849</a>를 따라 Consumer가 갖춰야 할 기능을 구현해보자. 전체 소스 코드는 <a href="https://github.com/HomoEfficio/scratchpad-oauth10a-consumer" target="_blank" rel="noopener">여기</a>에 있다.</p><h3 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h3><p>스프링 이니셜라이저에서 다음과 같이 최소한의 starter만 선택해서 프로젝트를 생성한다.</p><p><img src="https://i.imgur.com/DcmkDvi.png" alt="Imgur"></p><h3 id="글-쓰는-폼-화면"><a href="#글-쓰는-폼-화면" class="headerlink" title="글 쓰는 폼 화면"></a>글 쓰는 폼 화면</h3><p>글 쓰는 폼 화면도 최대한 단순하게 구성했다.</p><p><img src="https://i.imgur.com/xEk7x8p.png" alt="Imgur"></p><p>User가 ‘트위터에 남기기’ 버튼을 클릭하면, Consumer 앱이 트위터에 Request Token 발급을 요청한다. 이 부분부터 자세히 살펴보자.</p><h2 id="Request-Token-발급-요청"><a href="#Request-Token-발급-요청" class="headerlink" title="Request Token 발급 요청"></a>Request Token 발급 요청</h2><p>Request Token 발급 요청 내용은 스펙의 <a href="https://tools.ietf.org/html/rfc5849#section-2.1" target="_blank" rel="noopener">2.1 Temporary Credentials</a>에 나와있다. Service Provider에게 전송해야할 정보는 다음과 같다고 예시에 나와 있지만,</p><ul><li><code>oauth_consumer_key</code>: Service Provider로부터 발급받은 Consumer key</li><li><code>oauth_signature_method</code>: 서명 방식. <code>HMAC-SHA1</code>, <code>RSA-SHA1</code>,<code>PLAINTEXT</code>의 3가지 방식이 있다.</li><li><code>oauth_callback</code>: Request Token 발급 후 Service Provider가 제공하는 권한 부여 화면에서 User가 Consumer에게 권한을 부여하면 리다이렉트 되는 Consumer의 callback API URI</li><li><code>oauth_signature</code>: 서명 값</li></ul><p>실제로는 <a href="https://tools.ietf.org/html/rfc5849#section-3.1" target="_blank" rel="noopener">3.1 Making Requests</a>에 나온 것처럼 다음과 같은 정보도 함께 전송해야 한다.</p><ul><li><code>oauth_token</code>: Request Token 발급 요청 시에는 <code>oauth_token</code>이 없으므로 생략 가능</li><li><code>oauth_timestamp</code>: 1970.01.01 00:00:00 기준 요청 당시의 초 값</li><li><code>oauth_nonce</code>: 임의의 문자열 값으로 replay attack을 막는데 사용되며, timestamp, consumer key/secret과 request/access token이 같은 요청에 대해서 nonce 값은 유일해야 한다.</li><li><code>oauth_version</code>: 선택 사항이며 <code>1.0</code>이어야 한다.</li></ul><p>이 규약은 Request Token 발급 요청 뿐아니라 Access Token 발급 요청 시에도 마찬가지로 적용된다.</p><p>대부분 이미 정해져 있거나 임의의 값 등으로 쉽게 구할 수 있지만, <code>oauth_signature</code>는 스펙에 정해진 규칙에 따라 계산 로직을 구현해줘야 한다.</p><p>이 글에서는 3가지 서명 방식 중 <code>HMAC-SHA1</code>만 다룬다. <code>PLAINTEXT</code>는 서명 방식으로 분류하고 있지만 실제로는 서명 방식이 아니며, <code>RSA-SHA1</code>는 shared-secret 대신 공개키/비밀키를 사용한다는 점만 <code>HMAC-SHA1</code>와 다르다.</p><h2 id="Token-Signature"><a href="#Token-Signature" class="headerlink" title="Token Signature"></a>Token Signature</h2><p>토큰 발급 요청을 위한 서명 생성 방법은 <a href="https://tools.ietf.org/html/rfc5849#section-3.4" target="_blank" rel="noopener">3.4 Signature</a>에 나와있다.</p><p>요약하면 다음과 같다.</p><ol><li><p>Signature Base String 생성</p></li><li><p>Signature Base String을 Base64로 인코딩 한 값을 Secret으로 서명</p></li></ol><h3 id="Signature-Base-String-생성"><a href="#Signature-Base-String-생성" class="headerlink" title="Signature Base String 생성"></a>Signature Base String 생성</h3><p>Signature Base String 생성 방식은 코드로 보는 것이 이해하기 쉬울 것 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">generateBaseString</span><span class="params">(AbstractOAuth10aRequestHeader header)</span> </span>&#123;</span><br><span class="line">    String httpMethod = header.getHttpMethod();</span><br><span class="line">    String baseUri = getBaseStringUri(header);</span><br><span class="line">    String requestParameters = getRequestParameters(header);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(httpMethod)</span><br><span class="line">            .append(<span class="string">'&amp;'</span>).append(getPercentEncoded(baseUri))</span><br><span class="line">            .append(<span class="string">'&amp;'</span>).append(getPercentEncoded(requestParameters));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요약하면 Signature Base String은 HTTP 메서드, Base String URI(Token 발급 요청 URI), Token 발급 요청 파라미터를 <a href="https://tools.ietf.org/html/rfc5849#section-3.6" target="_blank" rel="noopener">Percent encoding</a> 한 후 &amp;를 구분자로 이어 붙여서 만든다.</p><p>여기서 주의할 것은 <strong>Java의 <code>URLEncoder.encode</code>는 OAuth 1.0a 스펙에서 말하는 Percent encoding과 차이가 있다는 점이다.</strong> Percent encoding 값이 잘못되면 서명값이 잘못 나오고, 잘못 나온 서명값은 서버 쪽에서 계산한 서명값과 일치하지 않으므로 요청이 계속 실패하게 된다. 서명값이 틀리면 요청에 사용된 여러 데이터중 어떤 데이터가 잘못 되어 서명값이 틀리는지 찾아내는 데 엄청난 고통이 뒤따른다.</p><p>검색해보면 아래와 같은 내용이 나오는데 이걸 사용하면 Request Token 발급과 Access Token 발급에는 성공하지만, 마지막으로 트위터에 특수 문자가 포함된 글을 남길 때 계속 실패한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUrlEncoded</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> URLEncoder.encode(value, StandardCharsets.UTF_8.name())</span><br><span class="line">                .replaceAll(<span class="string">"\\+"</span>, <span class="string">"%20"</span>)</span><br><span class="line">                .replaceAll(<span class="string">"%21"</span>, <span class="string">"!"</span>)</span><br><span class="line">                .replaceAll(<span class="string">"%27"</span>, <span class="string">"'"</span>)</span><br><span class="line">                .replaceAll(<span class="string">"%28"</span>, <span class="string">"("</span>)</span><br><span class="line">                .replaceAll(<span class="string">"%29"</span>, <span class="string">")"</span>)</span><br><span class="line">                .replaceAll(<span class="string">"%7E"</span>, <span class="string">"~"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정말 며칠동안 계속 Trial-Error로 잘못된 부분을 찾느라 고생했는데, 결국 해결사는 스프링이었다. <strong>스프링의 <code>UriUtils</code> 클래스에서 제공하는 <code>UriUtils.encode()</code>와 <code>UriUtils.decode()</code>가 정확히 Percent Encoding을 구현</strong>하고 있어서 최종적으로 올바른 서명값을 계산해낼 수 있었다.</p><h3 id="Token-발급-요청-파라미터"><a href="#Token-발급-요청-파라미터" class="headerlink" title="Token 발급 요청 파라미터"></a>Token 발급 요청 파라미터</h3><p>Base String URI 구성을 마치면 Token 발급 요청 파라미터를 구성해야 한다.</p><p>Token 발급 요청 파라미터는 <a href="https://tools.ietf.org/html/rfc5849#section-3.4.1.3" target="_blank" rel="noopener">3.4.1.3.  Request Parameters</a>에 나와있다. 요약하면 다음과 같다.</p><ol><li>Token 발급 요청 URI에 있는 Query String을 이름/값으로 파싱하고 URL decoding 한다.</li><li>Authorization 헤더에 있는 헤더 정보를 이름/값으로 파싱하고 URL decoding 한다.</li><li>발급 요청이 single-part 이고 <code>Content-Type</code> 헤더 값이 <code>application/x-www-form-urlencoded</code>라면 HTTP 요청 body 값을 이름/값으로 파싱하고 URL decoding 한다.</li><li>위의 값들을 normalization 한다. normalization 방식은 다음과 같다.<ol><li>파라미터 이름과 값을 URL encoding 한다.</li><li>파라미터를 이름 기준 오름차순으로 정렬한다. 이름이 동일할 경우 값 기준 오름차순으로 정렬한다.</li><li>파라미터 이름과 값을 <code>=</code>로 이어 붙인다.</li><li>이어 붙인 파라미터를 <code>&amp;</code>로 이어 붙인다.</li></ol></li></ol><p>스펙에서는 고맙게도 이에 대한 테스트 케이스를 제공해주는데 아래와 같은 토큰 발급 요청이 있다면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /request?b5=%3D%253D&amp;a3=a&amp;c%40=&amp;a2=r%20b HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Authorization: OAuth realm=&quot;Example&quot;,</span><br><span class="line">              oauth_consumer_key=&quot;9djdj82h48djs9d2&quot;,</span><br><span class="line">              oauth_token=&quot;kkk9d7dh3k39sjv7&quot;,</span><br><span class="line">              oauth_signature_method=&quot;HMAC-SHA1&quot;,</span><br><span class="line">              oauth_timestamp=&quot;137131201&quot;,</span><br><span class="line">              oauth_nonce=&quot;7d8f3e4a&quot;,</span><br><span class="line">              oauth_signature=&quot;djosJKDKJSD8743243%2Fjdk33klY%3D&quot;</span><br><span class="line"></span><br><span class="line">c2&amp;a3=2+q</span><br></pre></td></tr></table></figure><p>토큰 발급 요청 파라미터는 다음의 결과값을 갖게 된다.<br>(가독성을 위해 줄바꿈을 적용했으나 그런다고 가독성이 좋아지지는..)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a2=r%20b&amp;a3=2%20q&amp;a3=a&amp;b5=%3D%253D&amp;c%40=&amp;c2=&amp;oauth_consumer_key=9dj</span><br><span class="line">dj82h48djs9d2&amp;oauth_nonce=7d8f3e4a&amp;oauth_signature_method=HMAC-SHA1</span><br><span class="line">&amp;oauth_timestamp=137131201&amp;oauth_token=kkk9d7dh3k39sjv7</span><br></pre></td></tr></table></figure><p>토큰 발급 요청 파라미터를 구하는 로직을 스펙을 읽고 정확하게 파악하는 것이 어렵지만, 일단 파악하면 구현 자체는 어렵지 않다. 필요하다면 <a href="https://github.com/HomoEfficio/scratchpad-oauth10a-consumer/blob/master/src/main/java/io/homo/efficio/scratchpad/oauth10a/consumer/util/OAuth10aSignatureSupport.java" target="_blank" rel="noopener">이걸</a> 참고하면 된다.</p><h3 id="서명-생성"><a href="#서명-생성" class="headerlink" title="서명 생성"></a>서명 생성</h3><p>서명 생성은 <a href="https://tools.ietf.org/html/rfc5849#section-3.4.2" target="_blank" rel="noopener">3.4.2.  HMAC-SHA1</a>에 나와있다. 서명에는 키와 데이터가 필요한데 <code>HMAC-SHA1</code> 방식의 키는 Consumer Secret과 Token Secret을 <code>&amp;</code>로 이어 붙인 값이다.</p><p>Request Token 발급 요청할 때는 Token Secret이 없는 상태이므로 그냥 <code>ConsumerSecret값&amp;</code>이 키가 된다.</p><p>서명에 사용될 데이터는 위에서 구한 토큰 발급 요청 파라미터다.</p><p>서명 값은 <code>javax.crypto.Mac</code> 클래스를 이용해서 계산할 수 있으며, 검색해보면 찾을 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillSignature</span><span class="params">(AbstractOAuth10aRequestHeader header)</span> </span>&#123;</span><br><span class="line">    String key = header.getKey();</span><br><span class="line">    String baseString = generateBaseString(header);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> SecretKeySpec signingKey = <span class="keyword">new</span> SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), OAuth10aConstants.HMAC_SHA1_ALGORITHM_NAME);</span><br><span class="line">        <span class="keyword">final</span> Mac mac = Mac.getInstance(OAuth10aConstants.HMAC_SHA1_ALGORITHM_NAME);</span><br><span class="line">        mac.init(signingKey);</span><br><span class="line">        <span class="keyword">final</span> String signature = Base64.getEncoder().encodeToString(mac.doFinal(baseString.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        header.setOauthSignature(signature);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="괴로운-부분"><a href="#괴로운-부분" class="headerlink" title="괴로운 부분"></a>괴로운 부분</h3><p>결론만 보면 쉬운 것 같지만 <strong>직접 구현한 로직으로 만든 서명이 실제로 맞는지 검증을 하는 쉬운 방법이 없다는 게 OAuth 1.0a Consumer를 구현하는 과정 중에 가장 괴로운 부분이다.</strong> </p><p>서명이 맞는지 확인 하는 유일한 방법은 Service Provider인 트위터에 서명을 전송하고 트위터의 응답을 받아보는 것 밖에 없다. 그런데 서명이 맞지 않을 때는 다음과 같이 401 Authorization Required 만 확인할 수 있을 뿐이고,</p><blockquote><p>org.springframework.web.client.HttpClientErrorException: 401 Authorization Required</p></blockquote><p>디버거를 활용해서 확인해보면 아래와 같이 트위터가 알려주는 정보를 확인할 수는 있는데, 빈 문자열이 반환된다.</p><p><img src="https://i.imgur.com/awb2ePA.png" alt="Imgur"></p><p>빈 문자열이 반환되니 <a href="https://developer.twitter.com/en/docs/basics/response-codes.html" target="_blank" rel="noopener">트위터 응답 코드 문서</a>도 도움이 되지 않는다. 실로 막막하고 괴롭다.</p><p>서버의 서명 검증이라는 것이 결국 HTTP 헤더로 전달받은 정보를 이용해서 계산되므로, 어느 부분이 틀렸는지 더 구체적인 정보를 알려줄 수 있을텐데 보안 때문인지 트위터는 오류 세부 내용을 알려주지 않는다.</p><p>오랜 고생 끝에 결국 성공하고 나서 정리한 최선의 방법론은 다음과 같다.</p><ol><li>Percent Encoding은 스프링에서 제공하는 <code>UriUtils</code> 클래스를 활용해서 처리한다.</li><li>스펙에 나온 Base String URI 테스트 케이스를 통과하도록 Base String URI를 구성하는 로직을 정확하게 구현한다.</li><li>Request Token 발급과 Access Token 발급까지는 Service Provider 별로 다를 게 없고 스펙대로만 구현하면 되므로, 의도대로 동작하지 않으면 스펙을 보고 구현 내용을 점검한다.</li><li>Protected Resources에 대한 접근 요청 규격은 Service Provider 별로 다르므로 Access Token 발급까지는 성공했는데 자원 접근 요청에서 실패한다면 Service Provider의 문서를 꼼꼼히 살펴서 요청 규격을 맞춰준다.</li><li>400 Bad Request 에러가 발생하면 헤더 구성 내용 중 이름 오류나 누락된 항목이 있는지 다시 한 번 살펴보고, 401 Authorization Required 에러가 발생하면 서명값 계산 로직을 다시 살펴본다.</li></ol><p>여기까지 Request Token 발급 요청과 Access Token 발급 요청을 위한 서명 생성까지 다뤘다. 실제 화면으로 작업 흐름을 되짚어 보고 Access Token 발급까지 확인해보자.</p><h3 id="User의-권한-부여-신청"><a href="#User의-권한-부여-신청" class="headerlink" title="User의 권한 부여 신청"></a>User의 권한 부여 신청</h3><p><img src="https://i.imgur.com/ROuYV2h.png" alt="Imgur"></p><h3 id="Consumer가-서명-생성-후-Service-Provider에-전송해서-Request-Token을-발급-받고-Service-Provider가-제공하는-User의-권한-부여-화면으로-리다이렉트"><a href="#Consumer가-서명-생성-후-Service-Provider에-전송해서-Request-Token을-발급-받고-Service-Provider가-제공하는-User의-권한-부여-화면으로-리다이렉트" class="headerlink" title="Consumer가 서명 생성 후 Service Provider에 전송해서 Request Token을 발급 받고, Service Provider가 제공하는 User의 권한 부여 화면으로 리다이렉트"></a>Consumer가 서명 생성 후 Service Provider에 전송해서 Request Token을 발급 받고, Service Provider가 제공하는 User의 권한 부여 화면으로 리다이렉트</h3><p><img src="https://i.imgur.com/KVmocfW.png" alt="Imgur"></p><h3 id="User가-앱-인증을-클릭하면-Consumer의-callback-API로-리다이렉트"><a href="#User가-앱-인증을-클릭하면-Consumer의-callback-API로-리다이렉트" class="headerlink" title="User가 앱 인증을 클릭하면 Consumer의 callback API로 리다이렉트"></a>User가 앱 인증을 클릭하면 Consumer의 callback API로 리다이렉트</h3><p><img src="https://i.imgur.com/BpTOODs.png" alt="Imgur"></p><h3 id="callback-API에서-서명-생성-후-Service-Provider에-전송해서-Access-Token-발급"><a href="#callback-API에서-서명-생성-후-Service-Provider에-전송해서-Access-Token-발급" class="headerlink" title="callback API에서 서명 생성 후 Service Provider에 전송해서 Access Token 발급"></a>callback API에서 서명 생성 후 Service Provider에 전송해서 Access Token 발급</h3><p><img src="https://i.imgur.com/4eia8Qv.png" alt="Imgur"></p><h2 id="보호된-자원에-접근"><a href="#보호된-자원에-접근" class="headerlink" title="보호된 자원에 접근"></a>보호된 자원에 접근</h2><p>Access Token 까지 발급 받았으니 이제 Access Token을 사용해서 보호된 자원(Protected Resources)에 사용자를 대신해서 접근하는 과정만 남았다.</p><p>앞에서도 언급했지만 일단 여기까지 왔으면 서명 생성 로직은 제대로 구현되었다고 볼 수 있다. 보호된 자원에 접근하는 과정과 앞선 Request Token, Access Token 발급 과정 사이의 가장 큰 차이점 두 가지는 다음과 같다.</p><ol><li>보호된 자원에 접근할 때는 드디어 사용자의 데이터(예를 들면 트위터에 남기고자 하는 글)가 처음으로 요청에 포함된다.</li><li>보호된 자원 접근 요청 규격은 Service Provider의 규격을 참고해야 한다.</li></ol><p>차례대로 알아보자.</p><h3 id="자원-접근-요청-발송은-어디에서-해야되나"><a href="#자원-접근-요청-발송은-어디에서-해야되나" class="headerlink" title="자원 접근 요청 발송은 어디에서 해야되나?"></a>자원 접근 요청 발송은 어디에서 해야되나?</h3><p>최초의 글 남기기 요청에서 권한 부여 확인 후 끊김 없이 연속적으로 글 남기가 까지 완료하려면, 일단 <strong>접근 요청을 날리는 위치는 Access Token 발급 요청을 전송하고, Access Token을 반환받는 callback URL API여야 한다.</strong></p><p>Access Token을 받은 후, <code>Session</code>에서 사용자 데이터를 읽어와서 Access Token 정보와 함께 자원 접근 요청을 날리면 된다.</p><h3 id="사용자-데이터-처리"><a href="#사용자-데이터-처리" class="headerlink" title="사용자 데이터 처리"></a>사용자 데이터 처리</h3><p>앞의 작업 흐름 화면에 보면 사용자 데이터는 가장 앞 단계에서 입력된다. 따라서 이 데이터를 Request Token, Access Token 발급 과정을 거쳐서 자원 접근 요청을 보낼때까지 유지시켜줘야 결과적으로 사용자 데이터를 보호된 자원 접근에 사용할 수 있다. 가장 간단한 방법은 <code>Session</code>에 담아두는 것이다.</p><p>시퀀스 다이어그램 6번 과정에서 사용자 데이터(트위터에 남길 글)를 <code>Session</code>에 담아두면 여러 번의 리다이렉트를 거치면서 최종 요청 단계인 20번 과정까지 <code>Session</code>에 사용자 데이터가 유지 된다.</p><p><img src="https://i.imgur.com/quqloI2.png" alt="Imgur"></p><h3 id="자원-접근-요청-규격"><a href="#자원-접근-요청-규격" class="headerlink" title="자원 접근 요청 규격"></a>자원 접근 요청 규격</h3><p>자원 접근 요청 규격은 Service Provider가 정한 규격에 따라야 한다. 트위터에 글을 남기는 요청 규격은 <a href="https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update" target="_blank" rel="noopener">여기</a>에 다음과 같이 예제가 나와 있다.</p><blockquote><p>$ curl –request POST<br>–url ‘<a href="https://api.twitter.com/1.1/statuses/update.json" target="_blank" rel="noopener">https://api.twitter.com/1.1/statuses/update.json</a>?<br>status=Test%20tweet%20using%20the%20POST%20statuses%2Fupdate%20endpoint’<br>–header ‘authorization: OAuth oauth_consumer_key=”YOUR_CONSUMER_KEY”,<br>oauth_nonce=”AUTO_GENERATED_NONCE”, oauth_signature=”AUTO_GENERATED_SIGNATURE”,<br>oauth_signature_method=”HMAC-SHA1”, oauth_timestamp=”AUTO_GENERATED_TIMESTAMP”,<br>oauth_token=”USERS_ACCESS_TOKEN”, oauth_version=”1.0”‘<br>–header ‘content-type: application/json’</p></blockquote><p>POST 방식이지만 사용자 데이터를 request body가 아니라 Query String으로 붙여서 보내고 있다. 따라서 글 남기기 요청 시에도 POST 방식을 쓰되 남길 글을 request body가 아니라 Query String에 붙여서 보내야 하고, 서명 생성 시에도 요청 URL에 Query String이 포함되어야 한다.</p><h3 id="자원-접근-요청-구현-내용"><a href="#자원-접근-요청-구현-내용" class="headerlink" title="자원 접근 요청 구현 내용"></a>자원 접근 요청 구현 내용</h3><p>앞에서 다룬 3가지 주요 내용을 구현한 코드는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/callback"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">requestTokenCredentials</span><span class="params">(HttpServletRequest request, VerifierResponse verifierResponse)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Access Token 발급 요청 전송</span></span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    <span class="keyword">final</span> String requestTokenSecret = (String) session.getAttribute(<span class="string">"RTS"</span>);</span><br><span class="line">    <span class="keyword">final</span> AbstractOAuth10aRequestHeader tcHeader =</span><br><span class="line">            <span class="keyword">new</span> OAuth10aTokenCredentialsRequestHeader(</span><br><span class="line">                    <span class="keyword">this</span>.tokenCredentialsUrl,</span><br><span class="line">                    <span class="keyword">this</span>.consumerKey,</span><br><span class="line">                    <span class="keyword">this</span>.consumerSecret,</span><br><span class="line">                    verifierResponse.getOauth_token(),</span><br><span class="line">                    requestTokenSecret,</span><br><span class="line">                    verifierResponse.getOauth_verifier());</span><br><span class="line">    <span class="keyword">final</span> ResponseEntity&lt;TokenCredentials&gt; responseEntity =</span><br><span class="line">            <span class="keyword">this</span>.twitterService.getCredentials(tcHeader, TokenCredentials.class);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"access_token: &#123;&#125;"</span>, Objects.requireNonNull(responseEntity.getBody()).toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 자원 접근 요청 전송</span></span><br><span class="line">    <span class="keyword">final</span> NextAction nextAction = (NextAction) session.getAttribute(OAuth10aConstants.NEXT_ACTION);</span><br><span class="line">    log.info(<span class="string">"nextAction: &#123;&#125;"</span>, nextAction);    </span><br><span class="line">    <span class="keyword">final</span> OAuth10aProtectedResourcesRequestHeader resourcesRequestHeader =</span><br><span class="line">            <span class="keyword">new</span> OAuth10aProtectedResourcesRequestHeader(</span><br><span class="line">                    nextAction,</span><br><span class="line">                    <span class="keyword">this</span>.consumerKey,</span><br><span class="line">                    <span class="keyword">this</span>.consumerSecret,</span><br><span class="line">                    responseEntity.getBody().getOauth_token(),</span><br><span class="line">                    responseEntity.getBody().getOauth_token_secret());</span><br><span class="line">    log.info(<span class="string">"OAuth10aProtectedResourcesRequestHeader: &#123;&#125;"</span>, resourcesRequestHeader);</span><br><span class="line">    <span class="keyword">final</span> ResponseEntity&lt;Object&gt; actionResponseEntity =</span><br><span class="line">            <span class="keyword">this</span>.twitterService.doNextAction(resourcesRequestHeader, nextAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 접근 요청 후처리</span></span><br><span class="line">    <span class="keyword">if</span> (actionResponseEntity.getStatusCode().equals(HttpStatus.OK)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mention is written!!!"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actionResponseEntity.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실제-글이-트위터에-남겨지는-진행-과정"><a href="#실제-글이-트위터에-남겨지는-진행-과정" class="headerlink" title="실제 글이 트위터에 남겨지는 진행 과정"></a>실제 글이 트위터에 남겨지는 진행 과정</h2><p>전체 과정은 다음과 같이 진행된다.</p><h3 id="글-쓰고-트위터에-남기기-클릭"><a href="#글-쓰고-트위터에-남기기-클릭" class="headerlink" title="글 쓰고 트위터에 남기기 클릭"></a>글 쓰고 트위터에 남기기 클릭</h3><p><img src="https://i.imgur.com/AdU3bB6.png" alt="Imgur"></p><h3 id="Consumer가-서명-생성-후-Service-Provider에-전송해서-Request-Token을-발급-받고-Service-Provider가-제공하는-User의-권한-부여-화면으로-리다이렉트-1"><a href="#Consumer가-서명-생성-후-Service-Provider에-전송해서-Request-Token을-발급-받고-Service-Provider가-제공하는-User의-권한-부여-화면으로-리다이렉트-1" class="headerlink" title="Consumer가 서명 생성 후 Service Provider에 전송해서 Request Token을 발급 받고, Service Provider가 제공하는 User의 권한 부여 화면으로 리다이렉트"></a>Consumer가 서명 생성 후 Service Provider에 전송해서 Request Token을 발급 받고, Service Provider가 제공하는 User의 권한 부여 화면으로 리다이렉트</h3><p><img src="https://i.imgur.com/A2rXtbb.png" alt="Imgur"></p><h3 id="User가-앱-인증을-클릭하면-Consumer의-Callback-API로-리다이렉트"><a href="#User가-앱-인증을-클릭하면-Consumer의-Callback-API로-리다이렉트" class="headerlink" title="User가 앱 인증을 클릭하면 Consumer의 Callback API로 리다이렉트"></a>User가 앱 인증을 클릭하면 Consumer의 Callback API로 리다이렉트</h3><p><img src="https://i.imgur.com/ZsnjElz.png" alt="Imgur"></p><p>Callback API로 리다이렉트 되면 내부적으로 다음 2가지 과정이 진행된다.</p><ol><li>callback API에서 서명 생성 후 Service Provider에 전송해서 Access Token 발급 요청 전송</li><li>Access Token을 발급 받은 후 Service Provider의 자원에 접근 요청 전송(글쓰기 요청 전송)</li></ol><h3 id="접근-요청이-성공하면-화면에-성공-메시지-표시됨"><a href="#접근-요청이-성공하면-화면에-성공-메시지-표시됨" class="headerlink" title="접근 요청이 성공하면 화면에 성공 메시지 표시됨"></a>접근 요청이 성공하면 화면에 성공 메시지 표시됨</h3><p><img src="https://i.imgur.com/7wCyEr2.png" alt="Imgur"></p><h3 id="트위터에-접속하면-글이-써진-것을-확인할-수-있음"><a href="#트위터에-접속하면-글이-써진-것을-확인할-수-있음" class="headerlink" title="트위터에 접속하면 글이 써진 것을 확인할 수 있음"></a>트위터에 접속하면 글이 써진 것을 확인할 수 있음</h3><p><img src="https://i.imgur.com/Ks3ZjrK.png" alt="Imgur"></p><h1 id="매우-귀중한-보너스"><a href="#매우-귀중한-보너스" class="headerlink" title="매우 귀중한 보너스!!"></a>매우 귀중한 보너스!!</h1><p>고생은 나 하나로 족하다. Request Token 발급 요청, Access Token 발급 요청, 자원 접근 요청에 사용되는 서명값 계산 로직을 검증할 수 있는 테스트 케이스를 선사한다.</p><p>중간에 사용되는 <code>*Header</code>나 <code>OAuth10aSignatureSupport</code> 클래스는 구현 방식에 따라 달라질 수 있으니 신경쓰지 말고 아래 나오는 URL, ConsumerKey, ConsumerSecret, RequestTokenKey, RequestTokenSecret, AccessToken, AccessTokenSecret, Nonce, TimeStamp와 Signature 값으로 각자의 구현 로직을 테스트할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth10aSignatureSupportTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OAuth10aSignatureSupport oa10aSigSupport = <span class="keyword">new</span> OAuth10aSignatureSupport();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestToken__sigTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        OAuth10aTemporaryCredentialRequestHeader header = <span class="keyword">new</span> OAuth10aTemporaryCredentialRequestHeader(</span><br><span class="line">                <span class="string">"https://api.twitter.com/oauth/request_token"</span>,</span><br><span class="line">                <span class="string">"YourAppConsumerKey"</span>,</span><br><span class="line">                <span class="string">"YourAppConsumerSecret"</span>,</span><br><span class="line">                <span class="string">"YourAppCallbackURL"</span></span><br><span class="line">        );</span><br><span class="line">        header.setOauthNonce(<span class="string">"NDg0ZDNjOTktYTJlMC00YmI5LThhMDktZDBkZGQ0MDA0ZTIw"</span>);</span><br><span class="line">        header.setOauthTimestamp(<span class="string">"1535288634"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        oa10aSigSupport.fillSignature(header);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        assertThat(header.getOauthSignature()).isEqualTo(<span class="string">"DNpRbry9XwYfEf+KXz4tV5Ufbpk="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessToken__sigTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        OAuth10aTokenCredentialsRequestHeader header = <span class="keyword">new</span> OAuth10aTokenCredentialsRequestHeader(</span><br><span class="line">                <span class="string">"https://api.twitter.com/oauth/access_token"</span>,</span><br><span class="line">                <span class="string">"YourAppConsumerKey"</span>,</span><br><span class="line">                <span class="string">"YourAppConsumerSecret"</span>,</span><br><span class="line">                <span class="string">"YourRequestToken"</span>,</span><br><span class="line">                <span class="string">"YourRequestTokenSecret"</span>,</span><br><span class="line">                <span class="string">"YourOAuthVerifier"</span></span><br><span class="line">        );</span><br><span class="line">        header.setOauthNonce(<span class="string">"ZmRmNDQ5Y2YtN2IwNC00YzFkLTgxODItN2YwZmEzYjRhZTJj"</span>);</span><br><span class="line">        header.setOauthTimestamp(<span class="string">"1535289096"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        oa10aSigSupport.fillSignature(header);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        assertThat(header.getOauthSignature()).isEqualTo(<span class="string">"64lbyOhFJRcmudwWSwrmL1cQhEQ="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">protectedResources__sigTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        NextAction nextAction = <span class="keyword">new</span> NextAction(</span><br><span class="line">                HttpMethod.POST,</span><br><span class="line">                <span class="string">"https://api.twitter.com/1.1/statuses/update.json?status=OAuth10a%20Test"</span>,</span><br><span class="line">                <span class="keyword">null</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        OAuth10aProtectedResourcesRequestHeader header =</span><br><span class="line">                <span class="keyword">new</span> OAuth10aProtectedResourcesRequestHeader(</span><br><span class="line">                        nextAction,</span><br><span class="line">                        <span class="string">"YourAppConsumerKey"</span>,</span><br><span class="line">                        <span class="string">"YourAppConsumerSecret"</span>,</span><br><span class="line">                        <span class="string">"YourAccessToken"</span>,</span><br><span class="line">                        <span class="string">"YourAccessTokenSecret"</span></span><br><span class="line">                );</span><br><span class="line">        header.setOauthTimestamp(<span class="string">"1535272771"</span>);</span><br><span class="line">        header.setOauthNonce(<span class="string">"Y2I0Yjk4ZDItZjg2OS00Y2VjLThkMjgtY2RmMWY0YzZiOTlj"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        oa10aSigSupport.fillSignature(header);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        assertThat(header.getOauthSignature()).isEqualTo(<span class="string">"de5B57uqqbMG/Z/6vm5i5kJaxxA="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스펙따라-만들어보는-OAuth-1-0a-Client&quot;&gt;&lt;a href=&quot;#스펙따라-만들어보는-OAuth-1-0a-Client&quot; class=&quot;headerlink&quot; title=&quot;스펙따라 만들어보는 OAuth 1.0a Client&quot;&gt;&lt;/a&gt;스펙
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="자바" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="OAuth" scheme="http://homoefficio.github.io/tags/OAuth/"/>
    
      <category term="OAuth 1.0a" scheme="http://homoefficio.github.io/tags/OAuth-1-0a/"/>
    
      <category term="Consumer" scheme="http://homoefficio.github.io/tags/Consumer/"/>
    
      <category term="Twitter" scheme="http://homoefficio.github.io/tags/Twitter/"/>
    
      <category term="Request Token" scheme="http://homoefficio.github.io/tags/Request-Token/"/>
    
      <category term="Temporary Credentials" scheme="http://homoefficio.github.io/tags/Temporary-Credentials/"/>
    
      <category term="OAuth verifier" scheme="http://homoefficio.github.io/tags/OAuth-verifier/"/>
    
      <category term="OAuth Callback" scheme="http://homoefficio.github.io/tags/OAuth-Callback/"/>
    
      <category term="Access Token" scheme="http://homoefficio.github.io/tags/Access-Token/"/>
    
      <category term="Token Credentials" scheme="http://homoefficio.github.io/tags/Token-Credentials/"/>
    
      <category term="Percent Encoding" scheme="http://homoefficio.github.io/tags/Percent-Encoding/"/>
    
      <category term="Signature" scheme="http://homoefficio.github.io/tags/Signature/"/>
    
      <category term="HMAC-SHA1" scheme="http://homoefficio.github.io/tags/HMAC-SHA1/"/>
    
      <category term="Spring Boot" scheme="http://homoefficio.github.io/tags/Spring-Boot/"/>
    
      <category term="트위터" scheme="http://homoefficio.github.io/tags/%ED%8A%B8%EC%9C%84%ED%84%B0/"/>
    
      <category term="요청 토큰" scheme="http://homoefficio.github.io/tags/%EC%9A%94%EC%B2%AD-%ED%86%A0%ED%81%B0/"/>
    
      <category term="접근 토큰" scheme="http://homoefficio.github.io/tags/%EC%A0%91%EA%B7%BC-%ED%86%A0%ED%81%B0/"/>
    
      <category term="스프링 부트" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java Quartz Scheduler - Job Chaining 구현</title>
    <link href="http://homoefficio.github.io/2018/08/12/Java-Quartz-Scheduler-Job-Chaining-%EA%B5%AC%ED%98%84/"/>
    <id>http://homoefficio.github.io/2018/08/12/Java-Quartz-Scheduler-Job-Chaining-구현/</id>
    <published>2018-08-12T00:07:12.000Z</published>
    <updated>2019-04-28T17:03:55.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Quartz-Scheduler-Job-Chaining-구현"><a href="#Java-Quartz-Scheduler-Job-Chaining-구현" class="headerlink" title="Java Quartz Scheduler - Job Chaining 구현"></a>Java Quartz Scheduler - Job Chaining 구현</h1><p>Java로 Job Scheduling을 쉽게(참 조심스러운 단어.. ㅋㅋ) 할 수 있게 해주는 <a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">쿼츠(Quartz) 스케줄러</a>가 있다.</p><p>이 사이트에 나와있는 문서들은 여태 본 기술 사이트 문서 중에 가장 맘에 드는 스타일로 구성되어 있다. 길지 않은 설명, 간략하면서도 필요한 정보를 모두 담고 있는 다양한 기본 예제와 실무형 Cookbook까지 정말 마음에 쏙 든다. 게다가 스프링부트 스타터로도 제공되므로 더욱 편리하게 프로젝트에서 사용할 수 있다.</p><p>그런데 옥의 티랄까.. 독립적인 Job은 훌륭한 문서와 쉬운 Fluent API 덕에 간단하게 구현할 수 있는데, 연속적인 Job 실행은 간단하게 구현할 수 있는 방법이 없는 것 같다. 그래서 검색을 해보니 결국에는 Job 실행에 사용되는 Context 객체 안에 다음에 실행할 Job을 넣어주고 스케줄링하는 방식으로 연속적인 Job 실행을 구현할 수 있다. </p><p>그래서 간단하면서도 용도에 맞게 조금만 확장하면 아주 쓸만한 구현 예제를 만들어 봤다. 전체 코드는 <a href="https://github.com/HomoEfficio/quartz-scratchpad" target="_blank" rel="noopener">https://github.com/HomoEfficio/quartz-scratchpad</a> 에 있다.</p><h2 id="Quartz-기초-개념"><a href="#Quartz-기초-개념" class="headerlink" title="Quartz 기초 개념"></a>Quartz 기초 개념</h2><p>쿼츠에 대한 감을 잡는 데는 단 한 줄이면 충분하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.scheduleJob(jobDetail, trigger);</span><br></pre></td></tr></table></figure><ul><li><code>jobDetail</code>에는 Job의 실제 구현 내용과 Job 실행에 필요한 제반 상세 정보가 담겨 있다.</li><li><code>trigger</code>에는 Job을 언제, 어떤 주기로, 언제부터 언제까지 실행할지에 대한 정보가 담겨 있다.</li><li>scheduler는 <code>jobDetail</code>과 <code>trigger</code>에 담긴 정보를 이용해서 실제 Job의 실행 스케줄링을 담당한다.</li></ul><h2 id="Quartz-기초-예제"><a href="#Quartz-기초-예제" class="headerlink" title="Quartz 기초 예제"></a>Quartz 기초 예제</h2><p>쿼츠 스케줄링을 통해 로그를 찍는 간단한 예제를 살펴보자.</p><h3 id="HelloJob"><a href="#HelloJob" class="headerlink" title="HelloJob"></a>HelloJob</h3><p>단순히 로그를 찍는 Job</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.homo.efficio.scratchpad.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> homo.efficio@gmail.com</span></span><br><span class="line"><span class="comment"> * created on 2018-08-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"### Hello Job is being executed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QuartzTest"><a href="#QuartzTest" class="headerlink" title="QuartzTest"></a>QuartzTest</h3><p>HelloJob을 스케줄링하고 실행하는 테스트. 물론 <code>public static void main()</code>으로 해도 무방하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.homo.efficio.scratchpad.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Scheduler;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.JobBuilder.newJob;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.TriggerBuilder.newTrigger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> homo.efficio@gmail.com</span></span><br><span class="line"><span class="comment"> * created on 2018-08-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloJob</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Job 구현 내용이 담긴 HelloJob으로 JobDetail 생성</span></span><br><span class="line">        JobDetail jobDetail = newJob(HelloJob.class)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 실행 시점을 결정하는 Trigger 생성</span></span><br><span class="line">        Trigger trigger = newTrigger()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 스케줄러 실행 및 JobDetail과 Trigger 정보로 스케줄링</span></span><br><span class="line">        Scheduler defaultScheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        defaultScheduler.start();</span><br><span class="line">        defaultScheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        Thread.sleep(<span class="number">3</span> * <span class="number">1000</span>);  <span class="comment">// Job이 실행될 수 있는 시간 여유를 준다</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 스케줄러 종료</span></span><br><span class="line">        defaultScheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="테스트-결과"><a href="#테스트-결과" class="headerlink" title="테스트 결과"></a>테스트 결과</h3><p>다음과 같이 HelloJob에 구현된 로그 출력이 성공적으로 수행된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">00:53:15.137 [DefaultQuartzScheduler_Worker-1] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Hello Job is being executed!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Job-Chaining-기본-틀-구현"><a href="#Job-Chaining-기본-틀-구현" class="headerlink" title="Job Chaining 기본 틀 구현"></a>Job Chaining 기본 틀 구현</h2><p>이제 위의 간단한 HelloJob을 넘어서 Job을 연속적으로 실행할 수 있는 Job Chaining을 구현해보자.</p><p>연속 실행 기능을 가질 추상 클래스인 <code>BaseJob</code>을 만들고, 실제 구현 내용을 담은 HelloJob은 <code>BaseJob</code>을 상속하게 만든다.</p><h3 id="BaseJob"><a href="#BaseJob" class="headerlink" title="BaseJob"></a>BaseJob</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.homo.efficio.scratchpad.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> homo.efficio@gmail.com</span></span><br><span class="line"><span class="comment"> * created on 2018-08-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        doExecute(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(JobExecutionContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HelloJob-1"><a href="#HelloJob-1" class="headerlink" title="HelloJob"></a>HelloJob</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.homo.efficio.scratchpad.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> homo.efficio@gmail.com</span></span><br><span class="line"><span class="comment"> * created on 2018-08-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">extends</span> <span class="title">BaseJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"### Hello Job is being executed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="테스트-재실행"><a href="#테스트-재실행" class="headerlink" title="테스트 재실행"></a>테스트 재실행</h3><p>테스트 코드는 바꿀 필요 없다. 실행해보면 전과 마찬가지로 로그가 성공적으로 출력된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">01:22:41.393 [DefaultQuartzScheduler_Worker-1] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Hello Job is being executed!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="템플릿-메서드-패턴-적용"><a href="#템플릿-메서드-패턴-적용" class="headerlink" title="템플릿 메서드 패턴 적용"></a>템플릿 메서드 패턴 적용</h3><p><code>BaseJob</code>에 템플릿 메서드 패턴을 적용해서 Job 실행 <code>전처리</code>, <code>Job 실행</code>, <code>후처리</code>, <code>다음 Job Scheduling</code>이라는 파이프라인을 구성한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.homo.efficio.scratchpad.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> homo.efficio@gmail.com</span></span><br><span class="line"><span class="comment"> * created on 2018-08-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        beforeExecute(context);</span><br><span class="line">        doExecute(context);</span><br><span class="line">        afterExecute(context);</span><br><span class="line">        scheduleNextJob(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"%%% Before executing job"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(JobExecutionContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"%%% After executing job"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleNextJob</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"$$$ Schedule Next Job"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="테스트-재실행-1"><a href="#테스트-재실행-1" class="headerlink" title="테스트 재실행"></a>테스트 재실행</h3><p>테스트를 재실행해보면 다음과 같이 <code>전처리</code>, <code>Job 실행</code>, <code>후처리</code>, <code>다음 Job 스케줄링</code>이 실행됨을 알 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">01</span>:<span class="number">41</span>:<span class="number">16.254</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% Before executing job</span><br><span class="line">01:41:16.254 [DefaultQuartzScheduler_Worker-1] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Hello Job is being executed!</span><br><span class="line"><span class="number">01</span>:<span class="number">41</span>:<span class="number">16.254</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% After executing job</span><br><span class="line"><span class="number">01</span>:<span class="number">41</span>:<span class="number">16.254</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - $$$ Schedule Next Job</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Job-Chaining-실제-구현"><a href="#Job-Chaining-실제-구현" class="headerlink" title="Job Chaining 실제 구현"></a>Job Chaining 실제 구현</h2><p>여기에서는 쿼츠에 대한 부연 설명이 조금 필요하다.</p><p><code>execute()</code> 메서드에 넘겨지는 <code>JobExecutionContext</code>에는 Job 실행에 필요한 다양한 정보를 담을 수 있다. 그 중에서도 <code>JobDataMap</code>을 이용하면 자유롭게 Key-Value 데이터를 담을 수 있다. 다음과 같이 테스트 코드를 바꿔서 정보를 담아보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloJob</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JobDataMap을 이용해서 원하는 정보 담기</span></span><br><span class="line">    JobDataMap jobDataMap = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">    jobDataMap.put(<span class="string">"JobName"</span>, <span class="string">"Job Chain 1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Job 구현 내용이 담긴 HelloJob으로 JobDetail 생성</span></span><br><span class="line">    JobDetail jobDetail = newJob(HelloJob.class)</span><br><span class="line">            .usingJobData(jobDataMap)  <span class="comment">// &lt;- jobDataMap 주입</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    ... 이하 생략 ...</span><br></pre></td></tr></table></figure><p>그리고 <code>HelloJob</code> 클래스도 <code>JobDataMap</code>에 담긴 정보를 사용하도록 바꿔보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">extends</span> <span class="title">BaseJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"### &#123;&#125; is being executed!"</span>,</span><br><span class="line">                context.getJobDetail().getJobDataMap().get(<span class="string">"JobName"</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트를 재실행하면 다음과 같이 <code>JobDataMap</code>에 담은 정보가 함께 출력된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span>:<span class="number">57</span>:<span class="number">06.889</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% Before executing job</span><br><span class="line">01:57:06.889 [DefaultQuartzScheduler_Worker-1] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Job Chain 1 is being executed!</span><br><span class="line"><span class="number">01</span>:<span class="number">57</span>:<span class="number">06.891</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% After executing job</span><br><span class="line"><span class="number">01</span>:<span class="number">57</span>:<span class="number">06.891</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - $$$ Schedule Next Job</span><br></pre></td></tr></table></figure><p>이제 <code>JobDataMap</code>에 다음 Job에 대한 정보를 담으면 Job Chaining을 할 수 있을 것 같다.</p><h3 id="Chaining-기본-아이디어"><a href="#Chaining-기본-아이디어" class="headerlink" title="Chaining 기본 아이디어"></a>Chaining 기본 아이디어</h3><p>Job과 JobDataMap은 일대일 관계이므로, </p><ul><li>Chaining 할 모든 Job 정보를 큐에 담고, </li><li>그 큐를 처음 실행되는 Job의 <code>JobDataMap</code>에 담은 후에, </li><li>Job 실행이 완료되면 후처리 단계에서 실행이 완료된 Job을 큐에서 하나씩 빼주고,</li><li>다음 Job을 실행할 때 그 큐를 다음 Job의 <code>JobDataMap</code>에 넣어주고 스케줄링</li><li>큐가 비워지면 Chaining은 종료된다. </li></ul><h3 id="Chaining-할-여러-Job-생성"><a href="#Chaining-할-여러-Job-생성" class="headerlink" title="Chaining 할 여러 Job 생성"></a>Chaining 할 여러 Job 생성</h3><p>Job 3개를 Chaining해서 실행할 수 있도록 테스트 코드를 변경한다. </p><p>예제에서는 편의상 3개의 Job에 모두 <code>HelloJob.class</code>만을 사용했지만, 실제로는 서로 다른 클래스를 사용해도 무방하다. 또한 <a href="http://www.quartz-scheduler.org/api/2.2.1/org/quartz/JobBuilder.html" target="_blank" rel="noopener">JobBuilder API</a>를 참고하면 Job마다 원하는 대로 식별자를 줄 수도 있고 오류 시 재실행 옵션 등 다양하게 설정할 수 있다. <a href="http://www.quartz-scheduler.org/api/2.2.1/org/quartz/TriggerBuilder.html" target="_blank" rel="noopener">TriggerBuilder API</a>를 참고하면 <code>Trigger</code>도 원하는 대로 더 다양하게 구성할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloJob</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Job 1 구성</span></span><br><span class="line">        JobDataMap jobDataMap1 = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        jobDataMap1.put(<span class="string">"JobName"</span>, <span class="string">"Job Chain 1"</span>);</span><br><span class="line">        JobDetail jobDetail1 = newJob(HelloJob.class)</span><br><span class="line">                .usingJobData(jobDataMap1)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Job 2 구성</span></span><br><span class="line">        JobDataMap jobDataMap2 = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        jobDataMap2.put(<span class="string">"JobName"</span>, <span class="string">"Job Chain 2"</span>);</span><br><span class="line">        JobDetail jobDetail2 = newJob(HelloJob.class)</span><br><span class="line">                .usingJobData(jobDataMap2)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Job 3 구성</span></span><br><span class="line">        JobDataMap jobDataMap3 = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        jobDataMap3.put(<span class="string">"JobName"</span>, <span class="string">"Job Chain 3"</span>);</span><br><span class="line">        JobDetail jobDetail3 = newJob(HelloJob.class)</span><br><span class="line">                .usingJobData(jobDataMap3)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><h3 id="Job-정보를-JobDataMap에-저장"><a href="#Job-정보를-JobDataMap에-저장" class="headerlink" title="Job 정보를 JobDataMap에 저장"></a>Job 정보를 JobDataMap에 저장</h3><p>실행할 모든 Job의 <code>JobDetail</code>를 첫 번째 <code>JobDetail</code>의 <code>JobDataMap</code>에 담는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 실행할 모든 Job의 JobDetail를 jobDetail1의 JobDataMap에 담는다.</span></span><br><span class="line">List&lt;JobDetail&gt; jobDetailQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">jobDetailQueue.add(jobDetail1);</span><br><span class="line">jobDetailQueue.add(jobDetail2);</span><br><span class="line">jobDetailQueue.add(jobDetail3);</span><br><span class="line"><span class="comment">// 주의사항: 아래와 같이 jopDataMap1에 저장하면 반영되지 않는다.</span></span><br><span class="line"><span class="comment">// jobDataPam1.put("JobDetailQueue", jobDetailQueue);</span></span><br><span class="line"><span class="comment">// 아래와 같이 jobDetail1에서 getJobDataMap()으로 새로 가져온 JobDataMap에 저장해야 한다.</span></span><br><span class="line">jobDetail1.getJobDataMap().put(<span class="string">"JobDetailQueue"</span>, jobDetailQueue);</span><br></pre></td></tr></table></figure><p>테스트 코드의 나머지 부분은 변경할 것이 없다.</p><p>나머지는 <code>BaseJob</code>에서 처리한다.</p><h3 id="후처리-단계에서-완료된-Job을-큐에서-제거"><a href="#후처리-단계에서-완료된-Job을-큐에서-제거" class="headerlink" title="후처리 단계에서 완료된 Job을 큐에서 제거"></a>후처리 단계에서 완료된 Job을 큐에서 제거</h3><p><code>BaseJob</code>의 후처리 메서드인 <code>afterExecute()</code>를 다음과 같이 작성해서 큐에서 완료된 Job을 제거한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"%%% After executing job"</span>);</span><br><span class="line">    Object object = context.getJobDetail().getJobDataMap().get(<span class="string">"JobDetailQueue"</span>);</span><br><span class="line">    List&lt;JobDetail&gt; jobDetailQueue = (List&lt;JobDetail&gt;) object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (jobDetailQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        jobDetailQueue.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다음-Job-스케줄링"><a href="#다음-Job-스케줄링" class="headerlink" title="다음 Job 스케줄링"></a>다음 Job 스케줄링</h3><p><code>scheduleNextJob()</code> 메서드를 다음과 같이 변경해서, 완료된 Job이 제거된 큐를 <code>JobDataMap</code>에 담고 즉시 실행하는 <code>Trigger</code>를 만들어서 스케줄링 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleNextJob</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"$$$ Schedule Next Job"</span>);</span><br><span class="line">    Object object = context.getJobDetail().getJobDataMap().get(<span class="string">"JobDetailQueue"</span>);</span><br><span class="line">    List&lt;JobDetail&gt; jobDetailQueue = (List&lt;JobDetail&gt;) object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (jobDetailQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        JobDetail nextJobDetail = jobDetailQueue.get(<span class="number">0</span>);</span><br><span class="line">        nextJobDetail.getJobDataMap().put(<span class="string">"JobDetailQueue"</span>, jobDetailQueue);</span><br><span class="line">        Trigger nowTrigger = newTrigger().startNow().build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 아래의 팩토리 메서드는 이름이 같으면 여러번 호출해도 항상 동일한 스케줄러를 반환한다.</span></span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">            scheduler.start();</span><br><span class="line">            scheduler.scheduleJob(nextJobDetail, nowTrigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="테스트-재실행-2"><a href="#테스트-재실행-2" class="headerlink" title="테스트 재실행"></a>테스트 재실행</h3><p>다음과 같이 Job 1, 2, 3이 모두 연속적으로 실행되는 것을 확인할 수 있다. 각 Job마다 서로 다른 워커 스레드에서 실행되는 것도 확인할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.650</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% Before executing job</span><br><span class="line">02:33:47.650 [DefaultQuartzScheduler_Worker-1] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Job Chain 1 is being executed!</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.651</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% After executing job</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.652</span> [DefaultQuartzScheduler_Worker-<span class="number">1</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - $$$ Schedule Next Job</span><br><span class="line">...</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.655</span> [DefaultQuartzScheduler_Worker-<span class="number">2</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% Before executing job</span><br><span class="line">02:33:47.656 [DefaultQuartzScheduler_Worker-2] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Job Chain 2 is being executed!</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.656</span> [DefaultQuartzScheduler_Worker-<span class="number">2</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% After executing job</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.656</span> [DefaultQuartzScheduler_Worker-<span class="number">2</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - $$$ Schedule Next Job</span><br><span class="line">...</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.658</span> [DefaultQuartzScheduler_Worker-<span class="number">3</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% Before executing job</span><br><span class="line">02:33:47.658 [DefaultQuartzScheduler_Worker-3] INFO io.homo.efficio.scratchpad.quartz.HelloJob - ### Job Chain 3 is being executed!</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.658</span> [DefaultQuartzScheduler_Worker-<span class="number">3</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - %%% After executing job</span><br><span class="line"><span class="number">02</span>:<span class="number">33</span>:<span class="number">47.659</span> [DefaultQuartzScheduler_Worker-<span class="number">3</span>] INFO io.homo.efficio.scratchpad.quartz.BaseJob - $$$ Schedule Next Job</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>예제에서는 단순함을 위해 연속적으로 실행될 여러 Job을 관리하는 객체를 따로 만들지 않고 테스트 객체가 그 역할을 담당했지만, 실무에서는 예를 들면 <code>Batch</code> 같은 객체를 두고 그 안에 <code>List&lt;Job&gt;</code>을 둬서 책임 분리를 하는 것도 좋다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><blockquote><p>쿼츠 스케줄러(Quartz Scheduler)는 문서화가 정말로 잘 되어 있고 API 설계도 잘 되어 있어서 정말 금방 익혀서 사용할 수 있다.</p><p>다만, 연속적으로 Job을 실행할 수 있는 Job Chaining이 기본 사항으로 지원되지 않아 아쉽지만,</p><p>템플릿 메서드 패턴을 적용하면 어렵지 않게 Job Chaining을 구현해서 적용할 수 있다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-Quartz-Scheduler-Job-Chaining-구현&quot;&gt;&lt;a href=&quot;#Java-Quartz-Scheduler-Job-Chaining-구현&quot; class=&quot;headerlink&quot; title=&quot;Java Quartz Schedu
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="Java" scheme="http://homoefficio.github.io/tags/Java/"/>
    
      <category term="자바" scheme="http://homoefficio.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="Quartz" scheme="http://homoefficio.github.io/tags/Quartz/"/>
    
      <category term="Scheduler" scheme="http://homoefficio.github.io/tags/Scheduler/"/>
    
      <category term="Job Chaining" scheme="http://homoefficio.github.io/tags/Job-Chaining/"/>
    
      <category term="Template Method Pattern" scheme="http://homoefficio.github.io/tags/Template-Method-Pattern/"/>
    
      <category term="쿼츠" scheme="http://homoefficio.github.io/tags/%EC%BF%BC%EC%B8%A0/"/>
    
      <category term="스케줄러" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC/"/>
    
      <category term="Job 연속 실행" scheme="http://homoefficio.github.io/tags/Job-%EC%97%B0%EC%86%8D-%EC%8B%A4%ED%96%89/"/>
    
      <category term="Job 순차 실행" scheme="http://homoefficio.github.io/tags/Job-%EC%88%9C%EC%B0%A8-%EC%8B%A4%ED%96%89/"/>
    
      <category term="템플릿 메서드 패턴" scheme="http://homoefficio.github.io/tags/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>EOS 계정 생성</title>
    <link href="http://homoefficio.github.io/2018/07/09/EOS-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1/"/>
    <id>http://homoefficio.github.io/2018/07/09/EOS-계정-생성/</id>
    <published>2018-07-08T15:18:11.000Z</published>
    <updated>2019-04-28T17:03:55.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EOS-계정-생성"><a href="#EOS-계정-생성" class="headerlink" title="EOS 계정 생성"></a>EOS 계정 생성</h1><p>공식 문서 <a href="https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos#section-creating-an-account" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos#section-creating-an-account</a> 를 기준으로 약간의 커스터마이징과 과도한 친절함을 가미했다.</p><p>블록체인의 상태에 영향을 미치는 액션을 수행하려면 계정이 필요하다.</p><p><code>cleos</code>를 써서 <code>nodeos</code>로 하여금 계정을 생성하고 생성된 계정을 블록체인에 발행하게 할 수 있다. 계정을 생성하려면 기존 계정과 기존 계정의 key가 필요하다. 이를 위해 지갑이 필요하며, 지갑을 사용하려면 <code>keosd</code>를 실행해야 한다.</p><p>또한 계정을 생성하고 발행할 <code>nodeos</code>를 실행해서 EOS 노드를 띄워야 한다.</p><p>이런 관계는 아래 그림을 보면 더 쉽게 이해할 수 있다.</p><p><img src="https://i.imgur.com/nnJYbmt.png" alt="Imgur"></p><h2 id="keosd-실행"><a href="#keosd-실행" class="headerlink" title="keosd 실행"></a>keosd 실행</h2><p>계정 생성을 하려면 <code>keosd</code>와 <code>nodeos</code>를 동시에 띄워야 하는데, <code>keosd</code>를 <code>cleos</code>를 통하지 않고 직접 실행하면 8888 포트에서 실행되는데 <code>nodeos</code>도 8888 포트에서 실행되게 설정되어 있으므로 <code>keosd</code>의 설정을 변경해야 하는데, 아래 두 가지 방식 중 하나를 택해서 <code>keosd</code>를 실행하면 된다. 여기에서는 <code>keosd</code> 실행 시 옵션 지정 방식으로 진행한다.</p><h3 id="keosd-설정-파일-수정"><a href="#keosd-설정-파일-수정" class="headerlink" title="keosd 설정 파일 수정"></a>keosd 설정 파일 수정</h3><p><code>keosd</code> 설정 파일은 <code>--data-dir</code>로 지갑 데이터 저장 위치를 따로 지정하지 않았다면 기본값으로 <code>~/eosio-wallet/</code>에 저장된 <code>config.ini</code> 파일이다. <code>http-server-address = 127.0.0.1:8888</code>로 되어 있는 것을 <code>http-server-address = 127.0.0.1:8899</code>로 변경한다.</p><p><img src="https://i.imgur.com/QETOABh.png" alt="Imgur"></p><h3 id="keosd-실행-시-옵션-지정"><a href="#keosd-실행-시-옵션-지정" class="headerlink" title="keosd 실행 시 옵션 지정"></a>keosd 실행 시 옵션 지정</h3><p>다음과 같이 혹시 실행 중일 수 있는 <code>keosd</code>를 종료하고 새로 <code>keosd</code>를 실행한다. EOSIO 빌드 및 설치 과정에서 <code>make install</code>을 해줬다면 어느 디렉터리에서 실행해도 무방하다.</p><blockquote><p>pkill keosd</p><p>keosd --http-server-address=localhost:8899</p><p>1.0.9부터는 아래와 같이 --http-validate-host=false를 추가해줘야 cleos로 계정 생성 시 에러가 발생하지 않는다.</p><p>keosd --http-server-address=localhost:8899 --http-validate-host=false</p></blockquote><p><img src="https://i.imgur.com/W2LvKKU.png" alt="Imgur"></p><h2 id="nodeos-실행"><a href="#nodeos-실행" class="headerlink" title="nodeos 실행"></a>nodeos 실행</h2><p>새로운 터미널에서 <code>nodeos</code> 명령으로 EOS 노드를 띄운다.</p><blockquote><p>nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin --http-validate-host=false</p></blockquote><p><em><code>nodeos</code> 명령으로 EOS 노드를 띄우는 자세한 내용은 <a href="https://homoefficio.github.io/2018/06/06/EOS-Single-Node-Testnet-실행/">EOS Single Node Testnet 실행</a>을 참고한다.</em></p><p><img src="https://i.imgur.com/PQ3oqEt.png" alt="Imgur"></p><h2 id="계정-생성-준비"><a href="#계정-생성-준비" class="headerlink" title="계정 생성 준비"></a>계정 생성 준비</h2><h3 id="사전-준비"><a href="#사전-준비" class="headerlink" title="사전 준비"></a>사전 준비</h3><p>EOS 블록체인에서 계정을 생성하려면 여러가지 사전 준비가 필요하다.</p><ul><li>nodeos: 계정 생성도 트랜잭션이므로 nodeos가 실행되어 있어야 한다.</li><li>이미 존재하는 계정: 계정 생성이 이미 존재하는 계정이 실행하는 트랜잭션이므로 이미 존재하는 계정이 필요하다.</li><li>이미 존재하는 계정의 키가 연동된 지갑: 계정 생성의 주체인 authorizing_account의 서명, 즉 authorizing_account의 개인키가 필요하며, 개인키를 읽어올 수 있도록 authorizing_account의 개인키가 연동된 지갑이 있어야한다.</li><li>keosd: 지갑을 사용하므로, <code>keosd</code>가 실행되어 있어야 한다.</li><li>새로 생성할 계정의 owner 자격에 사용될 공개키</li><li>새로 생성할 계정의 active 자격에 사용될 공개키</li></ul><p>Single Node Testnet 에는 EOS 노드를 부트스트랩하는 <code>eosio</code> 계정 하나만 존재하므로, 최초의 사용자 계정을 만들 때는 <code>eosio</code> 계정을 사용할 수 밖에 없다. 그리고 <code>eosio</code> 계정으로 서명을 하므로 <code>eosio</code> 계정의 비밀키가 필요하다.</p><p><code>eosio</code> 계정의 비밀키는 리눅스의 경우 <code>~/.local/share/eosio/nodeos/config/config.ini</code>, 맥의 경우 <code>~/Libraries/Application Support/eosio/nodeos/config/config.ini</code> 파일 안에 <code>signature-provider</code>라는 항목의 <code>KEY</code>에 명시되어 있다.</p><h3 id="이미-존재하는-계정의-키가-연동된-지갑-생성"><a href="#이미-존재하는-계정의-키가-연동된-지갑-생성" class="headerlink" title="이미 존재하는 계정의 키가 연동된 지갑 생성"></a>이미 존재하는 계정의 키가 연동된 지갑 생성</h3><p>아래의 명령으로 계정 생성에 사용되는 <code>eosio</code> 계정의 키와 연동된 지갑 <code>temp</code>를 만든다.</p><blockquote><p>cleos --wallet-url=<a href="http://localhost:8899" target="_blank" rel="noopener">http://localhost:8899</a> wallet create -n temp</p></blockquote><p>!15</p><p>아래와 같이 지갑 목록을 조회하면 <code>temp</code> 지갑이 표시되며, 지갑 이름 옆의 <code>*</code> 표시는 지갑의 잠금이 해제되어 있음을 의미한다.</p><p>!16</p><h3 id="새로-생성할-계정에-사용될-키-생성"><a href="#새로-생성할-계정에-사용될-키-생성" class="headerlink" title="새로 생성할 계정에 사용될 키 생성"></a>새로 생성할 계정에 사용될 키 생성</h3><p>새로 생성할 계정의 <code>owner_key</code>, <code>active_key</code>에 사용될 키 두 개 생성</p><blockquote><p>cleos create key</p></blockquote><p>!17</p><p><img src="https://i.imgur.com/ecbRbVy.png" alt="Imgur"></p><h3 id="계정-생성-명령"><a href="#계정-생성-명령" class="headerlink" title="계정 생성 명령"></a>계정 생성 명령</h3><p>계정 생성 명령은 다음과 같다.</p><blockquote><p>cleos create account ${authorizing_account} ${new_account} ${owner_key} ${active_key}</p></blockquote><ul><li><code>${authorizing_account}</code>: 새 계정을 생성해서 블록체인에 발행하는 역할을 담당하는 기존 계정</li><li><code>${new_account}</code>: 새로 생성될 계정의 이름</li><li><code>${owner_key}</code>: 새로 생성될 계정의 owner 자격(authority)에 할당될 공개키</li><li><code>${active_key}</code>: 새로 생성될 계정의 active 자격(authority)에 할당될 공개키</li></ul><h4 id="새-계정-이름-규칙"><a href="#새-계정-이름-규칙" class="headerlink" title="새 계정 이름 규칙"></a>새 계정 이름 규칙</h4><ul><li>12글자까지 허용</li><li>허용되는 문자: <code>.12345abcdefghijklmnopqrstuvwxyz</code></li></ul><h4 id="owner-자격-owner-authority"><a href="#owner-자격-owner-authority" class="headerlink" title="owner 자격(owner authority)"></a>owner 자격(owner authority)</h4><p>계정의 소유권을 나타내는 자격이다. owner 자격을 필요로 하는 트랜잭션은 별로 없지만 소유자 권한을 변경하는 액션에는 owner 자격이 필요하다.</p><p>owner 자격에 할당된 키는 콜드 저장소(cold storage)에 저장하는 것이 좋으며 누구와도 공유하지 말아야 한다.</p><p>도용된 권한(permission)을 복구하는데도 owner 자격이 필요하다.</p><h4 id="active-자격-active-authority"><a href="#active-자격-active-authority" class="headerlink" title="active 자격(active authority)"></a>active 자격(active authority)</h4><p>송/수금, 블록 생산자(BP, Block Producer) 투표 및 고차원의 계정 사항 변경에 사용되는 자격이다. 대부분의 트랜잭션은 이 active 자격으로 생성할 수 있다.</p><h3 id="계정-생성"><a href="#계정-생성" class="headerlink" title="계정 생성"></a>계정 생성</h3><p>계정 생성 과정을 이해하기 위해 먼저 앞서 다룬 사전 조건과 시나리오를 정리해보자.</p><h4 id="authorizing-account-계정-생성을-실행하는-계정"><a href="#authorizing-account-계정-생성을-실행하는-계정" class="headerlink" title="${authorizing_account}(계정 생성을 실행하는 계정)"></a>${authorizing_account}(계정 생성을 실행하는 계정)</h4><p>Single Node Testnet에 이미 존재하는 유일한 계정은 Single Node를 실행할 때 사용되는 <code>eosio</code>밖에 없다. 따라서 처음 커스텀 계정을 생성할 때는 <code>eosio</code> 계정을 사용해야 한다. 이는 <code>eosio</code> 계정의 비밀키도 알아야 한다는 의미이며 비밀키 확인 방법은 위 ‘사전 준비’ 부분에 나와있다.</p><h4 id="new-account"><a href="#new-account" class="headerlink" title="${new_account}"></a>${new_account}</h4><p>새 계정 이름은 규칙에 맞에 임의로 지정하면 된다. 예제에서는 <code>homo.efficio</code>로 한다.</p><h4 id="owner-key-active-key"><a href="#owner-key-active-key" class="headerlink" title="${owner_key}, ${active_key}"></a>${owner_key}, ${active_key}</h4><p>새로 생성될 계정의 owner 자격과 active 자격에 사용할 키는 앞서 <a href="https://homoefficio.github.io/2018/06/06/EOS-지갑-만들기-및-Key-연동/">EOS 지갑 만들기 및 Key 연동</a>에서 ‘Homo-Efficio’ 지갑에 연동했던 두 개의 키의 공개키를 사용한다.</p><ul><li>owner 자격에 사용할 <code>${owner_key}</code>: <code>EOS5pBeZiRgKRrLCCCFZ23EuP2d7XXK8UhYdbRSauXjyGrPjApLAW</code></li><li>active 자격에 사용할 <code>${active_key}</code>: <code>EOS8cQKoirjCNSVVywC7WwhuzSg1bC5Q5vG5YhDmAcwf3bVoPys3e</code></li></ul><h4 id="시나리오-이해"><a href="#시나리오-이해" class="headerlink" title="시나리오 이해"></a>시나리오 이해</h4><p>계정 생성 시나리오를 정리하면 다음과 같다.</p><blockquote><p><code>homo.efficio</code>라는 신규 계정 생성에 <code>eosio</code>라는 기존 계정을 사용하며,</p><p>‘Homo-Efficio’ 지갑에 연동했던 두 개의 키를 새로 생성할 계정의 <code>owner_key</code>, <code>active_key</code>로 설정한다.</p></blockquote><p>그림으로 나타내면 다음과 같다.</p><p><img src="https://i.imgur.com/YNsQPK1.png" alt="Imgur"></p><p>결국에는 키를 매개체로 해서 <code>Homo-Efficio</code>라는 지갑과 <code>homo.efficio</code>라는 계정이 간접적으로 연결되는 모양새다. 위 그림을 토대로 새 계정이 생성된 후 새 계정과 지갑의 관계를 정리해보면 다음과 같다.</p><blockquote><p><code>homo.efficio</code>라는 계정으로 어떤 트랜잭션을 발생시킬 때</p><p>필요한 키 정보를 <code>Homo-Efficio</code>라는 지갑에서 가져온다.</p></blockquote><h2 id="계정-생성-실행"><a href="#계정-생성-실행" class="headerlink" title="계정 생성 실행"></a>계정 생성 실행</h2><h3 id="오류-테스트"><a href="#오류-테스트" class="headerlink" title="오류 테스트"></a>오류 테스트</h3><p>시험 삼아 길이가 12자를 넘는 계정 이름으로 계정을 생성해보면 다음과 같은 에러가 발생한다.</p><p><img src="https://i.imgur.com/sRJcHHm.png" alt="Imgur"></p><h3 id="지갑-잠금-오류"><a href="#지갑-잠금-오류" class="headerlink" title="지갑 잠금 오류"></a>지갑 잠금 오류</h3><p>지갑 잠금 해제 되지 않은 상태에서 계정 생성을 실행하면 다음과 같은 에러가 발생한다.</p><p><img src="https://i.imgur.com/vdL9ahu.png" alt="Imgur"></p><p>지갑 잠금 오류는 <code>keosd</code> 실행 화면에도 로그가 찍힌다.</p><p><img src="https://i.imgur.com/MKyVMjT.png" alt="Imgur"></p><h3 id="지갑-잠금-해제-후-계정-생성"><a href="#지갑-잠금-해제-후-계정-생성" class="headerlink" title="지갑 잠금 해제 후 계정 생성"></a>지갑 잠금 해제 후 계정 생성</h3><p>계정 생성의 주체인 <code>eosio</code> 계정의 키를 연동하는 지갑가 연동되어 있는 지갑을 해제한 후, <code>homo.efficio</code> 계정 생성을 실행하면 다음과 같은 에러가 발생한다.</p><p><img src="https://i.imgur.com/Sj1QugF.png" alt="Imgur"></p><p>이 에러는 <code>keosd</code> 관련 오류가 아니므로 <code>keosd</code> 화면에는 별다른 로그가 찍히지 않지만, <code>nodeos</code> 화면에 더 자세한 에러 로그가 찍힌다.</p><p><img src="https://i.imgur.com/Ak37Z07.png" alt="Imgur"></p><p>에러 내용은 serialization 수행 시간이 초과된 것이 원인인 것 같다.</p><p>혹시 잠금 해제해야할 지갑이 <code>Homo-Efficio</code>가 아니라 <code>default</code> 지갑인가 싶어서 다음과 같이 <code>Homo-Efficio</code> 지갑을 다시 잠그고 <code>default</code> 지갑을 잠금 해제한 후 다시 계정 생성을 시도하면, 이번에는 계정이 이미 있다는 에러가 발생한다.</p><p><img src="https://i.imgur.com/CnPqN3N.png" alt="Imgur"></p><p><code>nodeos</code> 화면에 더 자세한 로그가 찍힌다.</p><p><img src="https://i.imgur.com/MgN1qwB.png" alt="Imgur"></p><p><code>cleos get account homo.efficio</code> 명령으로 계정을 확인해보면 계정이 생성되어 있는 것으로 나온다.</p><p><img src="https://i.imgur.com/OpWGCPH.png" alt="Imgur"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EOS-계정-생성&quot;&gt;&lt;a href=&quot;#EOS-계정-생성&quot; class=&quot;headerlink&quot; title=&quot;EOS 계정 생성&quot;&gt;&lt;/a&gt;EOS 계정 생성&lt;/h1&gt;&lt;p&gt;공식 문서 &lt;a href=&quot;https://developers.eos.io/e
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="EOS" scheme="http://homoefficio.github.io/tags/EOS/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="이오스" scheme="http://homoefficio.github.io/tags/%EC%9D%B4%EC%98%A4%EC%8A%A4/"/>
    
      <category term="development" scheme="http://homoefficio.github.io/tags/development/"/>
    
      <category term="개발" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="dapp" scheme="http://homoefficio.github.io/tags/dapp/"/>
    
      <category term="디앱" scheme="http://homoefficio.github.io/tags/%EB%94%94%EC%95%B1/"/>
    
      <category term="Wallet" scheme="http://homoefficio.github.io/tags/Wallet/"/>
    
      <category term="Account" scheme="http://homoefficio.github.io/tags/Account/"/>
    
      <category term="nodeos" scheme="http://homoefficio.github.io/tags/nodeos/"/>
    
      <category term="keosd" scheme="http://homoefficio.github.io/tags/keosd/"/>
    
      <category term="cleos" scheme="http://homoefficio.github.io/tags/cleos/"/>
    
      <category term="지갑" scheme="http://homoefficio.github.io/tags/%EC%A7%80%EA%B0%91/"/>
    
      <category term="계정" scheme="http://homoefficio.github.io/tags/%EA%B3%84%EC%A0%95/"/>
    
  </entry>
  
  <entry>
    <title>EOS 지갑 만들기 및 Key 연동</title>
    <link href="http://homoefficio.github.io/2018/06/06/EOS-%EC%A7%80%EA%B0%91-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%B0%8F-Key-%EC%97%B0%EB%8F%99/"/>
    <id>http://homoefficio.github.io/2018/06/06/EOS-지갑-만들기-및-Key-연동/</id>
    <published>2018-06-05T23:55:13.000Z</published>
    <updated>2019-04-28T17:03:55.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EOS-지갑-만들기-및-Key-연동"><a href="#EOS-지갑-만들기-및-Key-연동" class="headerlink" title="EOS 지갑 만들기 및 Key 연동"></a>EOS 지갑 만들기 및 Key 연동</h1><p>공식 문서인 <a href="https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos</a> 를 기준으로 약간의 커스터마이징과 과도한 친절함을 가미했다.</p><h2 id="EOSIO-아키텍처-다시-보기"><a href="#EOSIO-아키텍처-다시-보기" class="headerlink" title="EOSIO 아키텍처 다시 보기"></a>EOSIO 아키텍처 다시 보기</h2><p><img src="https://i.imgur.com/nnJYbmt.png" alt="Imgur"></p><p>이 글에서는 위 3가지 컴포넌트 중 <code>cleos</code>와 <code>keosd</code>에 대해 알아본다.</p><h2 id="지갑과-계정"><a href="#지갑과-계정" class="headerlink" title="지갑과 계정"></a>지갑과 계정</h2><h3 id="지갑-Wallet"><a href="#지갑-Wallet" class="headerlink" title="지갑(Wallet)"></a>지갑(Wallet)</h3><p>지갑은 블록체인의 상태에 영향을 미치는 연산을 승인할 때 필요한 공개키-비밀키 쌍을 담고 있는 저장소다. 지갑 데이터는 <code>keosd</code>에 의해 관리 되지만 대부분 직접 <code>keosd</code> 명령을 실행하지 않고 <code>cleos</code>를 통해 <code>keosd</code>를 실행한다.</p><p><code>keosd</code>는 지갑 파일을 기본 옵션으로 <code>~/eosio-wallet</code> 디렉터리에 저장한다.</p><h3 id="계정-Account"><a href="#계정-Account" class="headerlink" title="계정(Account)"></a>계정(Account)</h3><p>계정은 블록체인에 대한 접근 권한을 가진 식별자라고 할 수 있다. <code>nodeos</code>가 계정의 발행과 블록체인에 대한 계정 관련 액션(action)을 관리하지만, <code>cleos</code>를 통해서도 관리할 수 있다.</p><h3 id="지갑과-계정의-관계"><a href="#지갑과-계정의-관계" class="headerlink" title="지갑과 계정의 관계"></a>지갑과 계정의 관계</h3><p>직관적으로는 계정이 지갑을 가지고 있을 것 같지만, EOS의 지갑과 계정은 직접적인 관계가 없다. 계정은 지갑의 존재를 모르고, 지갑은 계정의 존재를 모른다. 둘 사이에 직접적인 관계가 없음은 위의 EOSIO 아키텍처 그림에서도 알 수 있다. <code>nodeos</code>와 <code>keosd</code> 사이에는 직접적인 관계가 없고 서로의 존재를 모른다.</p><p>둘 사이에 간접적이나마 관계가 발생하는 것은 서명이 필요할 때다. 지갑을 사용하면 보안을 위해 암호화되어 잠금 처리를 할 수 있는 로컬 저장 공간에서 서명을 효율적으로 가져올 수 있다. 키 조회를 담당하는 <code>keosd</code>와 키를 사용하는 서명을 필요로 하는 액션 처리를 담당하는 <code>nodeos</code> 사이에서 <code>cleos</code>가 효과적인 중재자 역할을 담당한다.</p><h2 id="지갑-목록-확인"><a href="#지갑-목록-확인" class="headerlink" title="지갑 목록 확인"></a>지갑 목록 확인</h2><p><img src="https://i.imgur.com/GDyaXFi.png" alt="Imgur"></p><p>위 캡처 화면 내용은 다음과 같다.</p><ol><li><p><code>cleos wallet</code> 명령으로 <code>keosd</code>를 실행하기 전에는 <code>~/eosio-wallet</code> 디렉터리는 생성되어 있지 않다.</p></li><li><p><code>cleos wallet list</code> 명령을 실행하면 <code>keosd</code>가 실행되고 지갑 목록이 표시된다. 아직 지갑을 생성하지 않았으므로 지갑 목록은 비어 있다. 이처럼 <code>cleos wallet</code> 명령을 통해 <code>keosd</code>가 자동으로 실행되므로 별도로 직접 <code>keosd</code> 명령을 실행할 필요가 없다.</p></li><li><p><code>ps -ef | grep keosd</code> 명령을 실행하면 <code>keosd</code>가 실행되어 있고 <code>http://127.0.0.1/8900</code>으로 접근할 수 있음을 알 수 있다.</p></li><li><p><code>keosd</code>가 실행되면서 <code>~/eosio-wallet</code> 디렉터리와 <code>keosd</code> 설정 파일인 <code>config.ini</code> 파일이 생성된다.</p></li></ol><h2 id="지갑-생성"><a href="#지갑-생성" class="headerlink" title="지갑 생성"></a>지갑 생성</h2><p>지갑의 생성도 다음과 같이 <code>cleos</code> 명령을 통해 실행한다. 지갑은 <code>nodeos</code>의 실행 여부와 관계없이 생성될 수 있다.</p><blockquote><p>cleos wallet create</p></blockquote><p><img src="https://i.imgur.com/aykCLV4.png" alt="Imgur"></p><p>이름이 default인 지갑은 이제 <code>keosd</code>의 관리 대상에 포함되며, 생성된 지갑의 마스터 패스워드가 생성되고 화면에 표시된다. 이 패스워드로 지갑 파일의 잠금을 해제할 수 있으므로 분실되지 않도록 잘 보관해야 한다.</p><p><code>keosd</code>는 지갑 파일을 <code>~/eosio-wallet</code> 폴더에 저장한다(eos/programs/keosd/main.cpp 에 하드코딩 되어 있음).</p><blockquote><p>ll ~/eosio-wallet</p></blockquote><p><img src="https://i.imgur.com/E7AjVZC.png" alt="Imgur"></p><p><em>참고: 공식 문서(<a href="https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos</a>) 에는 <code>keosd</code>의 <code>--data-dir</code> 옵션으로 지갑 파일이 저장되는 데이터 폴더를 지정할 수 있다고 언급되어 있다. 하지만 이후 내용에서 <code>keosd</code>를 직접 실행하는 부분이 없고 <code>cleos</code>만을 사용하며, <code>keosd</code>를 사용하지 않으므로 <code>--data-dir</code>를 써서 지갑 데이터가 저장될 위치를 따로 지정할 기회가 없고, 결국 기본값대로 <code>~/eosio-wallet</code> 폴더에 지갑 파일이 생성된다.</em></p><p><code>-n</code> 옵션을 이용하면 이름을 지정해서 지갑을 생성할 수도 있다. <del>따옴표를 이용하면 공백이 포함된 이름도 가능하다.</del> 이 글을 처음 쓸 때는 공백이 허용됐었는데 아래 화면과 같이 2018-06-07에 관련 소스가 변경되어 <strong>공백은 허용되지 않고 알파벳과 숫자, <code>._-</code>만 허용</strong>된다.</p><p><img src="https://i.imgur.com/7OHbxxl.png" alt="Imgur"></p><p><del>따라서 아래에 나오는, 공백이 포함된 <code>Homo Efficio</code>는 더이상 유효하지 않으며 <code>Homo-Efficio</code>라고 썼다고 가정하자(다시 다 캡처해서 올리자니 눈물이.. ㅠㅜ).</del> 다시 캡처해서 업데이트 완료.</p><blockquote><p>cleos wallet create -n Homo-Efficio</p></blockquote><p><img src="https://i.imgur.com/gLIL4rG.png" alt="Imgur"></p><h2 id="지갑-목록-확인-1"><a href="#지갑-목록-확인-1" class="headerlink" title="지갑 목록 확인"></a>지갑 목록 확인</h2><blockquote><p>cleos wallet list</p></blockquote><p><img src="https://i.imgur.com/2dZ310g.png" alt="Imgur"></p><p>생성한 지갑 목록이 표시된다. <code>*</code>표는 지갑이 잠금 해제(unlocked) 되어 있음을 의미한다.</p><p><code>cleos wallet create</code> 명령으로 생성된 지갑은 편의상 잠금 해제된다.</p><h2 id="지갑-잠금"><a href="#지갑-잠금" class="headerlink" title="지갑 잠금"></a>지갑 잠금</h2><p>아래와 같이 ‘Homo-Efficio’ 지갑을 잠그고 지갑 목록을 확인하면 ‘Homo-Efficio’ 지갑 옆에는 <code>*</code> 표시가 나타나지 않는다.</p><blockquote><p>cleos wallet lock -n Homo-Efficio</p><p>cleos wallet list</p></blockquote><p><img src="https://i.imgur.com/xW91sHG.png" alt="Imgur"></p><p>지갑이 잠긴 상태에서는 블록체인에 상태 변화를 일으키는 액션을 수행할 수 없다.</p><h2 id="지갑-열기"><a href="#지갑-열기" class="headerlink" title="지갑 열기"></a>지갑 열기</h2><p>이제 <code>keosd</code>를 종료하고 다시 시작하면 어떤 현상이 발생하는지 알아보자.</p><p><code>cleos wallet stop</code> 명령으로 <code>keosd</code>를 종료할 수도 있고, </p><p><img src="https://i.imgur.com/P8Xsg3T.png" alt="Imgur"></p><p>브라우저에서 <code>http://localhost:8900/v1/keosd/stop</code>에 접속해서 <code>keosd</code>를 종료할 수도 있다.</p><p><img src="https://i.imgur.com/fhcKGJr.png" alt="Imgur"></p><p><code>ps -ef | grep keosd</code>로 확인하면 <code>keosd</code> 프로세스가 죽은 것을 확인할 수 있다.</p><p><img src="https://i.imgur.com/Uj5I3g7.png" alt="Imgur"></p><p>다시 <code>cleos wallet list</code> 명령을 실행하면 <code>keosd</code>가 자동으로 실행되지만 앞에서 생성한 지갑 목록은 표시되지 않는다.</p><p><img src="https://i.imgur.com/n6e6JDW.png" alt="Imgur"></p><p>이유는 <code>cleos wallet create</code>로 지갑을 생성했을 때는 지갑이 잠금해제 된 상태로 만들어지고 열린(open) 상태가 되지만, <code>keosd</code>가 종료되면 지갑은 자동으로 잠금 상태가 되고 닫힌 상태가 되기 때문이다.</p><p><code>cleos wallet open</code> 명령을 실행하면 <code>default</code> 지갑이 열리고 <code>cleos wallet list</code> 명령을 실행하면 지갑 목록에 표시되지만, 잠금 상태는 해제되지 않으므로 <code>*</code>는 표시되지 않는다.</p><p><img src="https://i.imgur.com/NjyKtDO.png" alt="Imgur"></p><p><code>cleos wallet unlock</code> 명령을 실행하고 패스워드를 입력하면 <code>default</code> 지갑이 잠금 해제 되어 <code>*</code>가 표시된다.</p><p><img src="https://i.imgur.com/f9sE5RX.png" alt="Imgur"></p><p>이름을 지정해서 만든 ‘Homo-Efficio’ 지갑도 열고, 잠금해제 한다.</p><p><img src="https://i.imgur.com/bfROC9w.png" alt="Imgur"></p><h2 id="Key-생성-및-지갑-연동"><a href="#Key-생성-및-지갑-연동" class="headerlink" title="Key 생성 및 지갑 연동"></a>Key 생성 및 지갑 연동</h2><p>EOSIO의 공개키/비밀키를 생성하는 방법은 여러가지가 있지만, 일단 <code>cleos</code>를 사용해서 만들어보자.</p><blockquote><p>cleos create key</p></blockquote><p><img src="https://i.imgur.com/DvhU7nF.png" alt="Imgur"></p><p>거듭 강조하지만 튜토리얼 말고 실제 사용할 때는 Private key를 아무에게도 노출해서는 안되며 분실되지 않도록 잘 보관해야 한다.</p><p>‘Homo-Efficio’ 지갑에 방금 생성한 key를 연동해보자. 역시 <code>cleos</code>를 사용한다.</p><blockquote><p>cleos wallet import -n Homo-Efficio PRIVATE_KEY_VALUE</p></blockquote><p><img src="https://i.imgur.com/fmOi9sd.png" alt="Imgur"></p><p>연동할 때 입력한 비밀키의 쌍인 공개키 값이 화면에 표시된다. 앞에서 공개키/비밀키 생성 시 Public key로 표시된 값과 같다.</p><p>하나의 지갑에 여러개의 키를 연동할 수 있다. 다음과 같이 키 쌍을 하나더 생성하고 연동해보자.</p><p><img src="https://i.imgur.com/2yxG8zF.png" alt="Imgur"></p><p><code>cleos wallet keys</code> 명령을 사용하면 잠금 해제된 모든 지갑에 연동된 공개키의 목록이 표시된다.</p><blockquote><p>cleos wallet keys</p></blockquote><p><img src="https://i.imgur.com/oX2XZpd.png" alt="Imgur"></p><p><em>참고: 키 2개를 연동한 Homo-Efficio를 지정해서 공개키를 조회했는데 3개가 조회되어 나온다. 이유는 지갑을 생성하면 따로 연동하지 않아도 기본으로 1개의 키(default 지갑에 연동된 것과 같은 키)가 새로 생성한 지갑에 연동되기 때문 -&gt; 이 부분은 v1.0.4에서 패치되어 default 지갑에 연동된 것과 같은 키는 지갑에 연동되지 않고 사용자가 직접 지갑에 연동한 키만 연동된다. 따라서 v1.0.4 이후 버전에서는 직접 연동한 2개만 화면에 표시된다.</em></p><p><del>특정 지갑에 연동된 키 목록만을 조회하는 방법은 없는 것 같다.</del> EOSIO 1.0.2 에서는 다음과 같이 <code>private_keys</code> 서브명령으로 특정 지갑에 연동된 공개키/비밀키 쌍 목록을 조회할 수 있다. 실행하려면 지갑의 비밀번호가 필요하며 비밀키까지 같이 확인할 수 있다.</p><blockquote><p>cleos wallet private_keys</p></blockquote><p><img src="https://i.imgur.com/nMamX8Q.png" alt="Imgur"></p><blockquote><p>cleos wallet private_keys -n Homo-Efficio</p></blockquote><p><img src="https://i.imgur.com/JOhBJGs.png" alt="Imgur"></p><p><em>참고: 키 2개를 연동한 Homo-Efficio를 지정해서 비밀키를 조회했는데 3개가 조회되어 나온다. 이유는 지갑을 생성하면 따로 연동하지 않아도 기본으로 1개의 키(default 지갑에 연동된 것과 같은 키)가 새로 생성한 지갑에 연동되기 때문 -&gt; 이 부분은 v1.0.4에서 패치되어 default 지갑에 연동된 것과 같은 키는 지갑에 연동되지 않고 사용자가 직접 지갑에 연동한 키만 연동된다. 따라서 v1.0.4 이후 버전에서는 직접 연동한 2개만 화면에 표시된다.</em></p><p><code>cleos wallet create_key</code> 명령을 사용하면 <code>cleos create key</code>와 <code>cleos wallet import</code> 두 번의 명령으로 하던 작업을 한 번의 명령으로 실행할 수 있다.</p><p><img src="https://i.imgur.com/l0svF16.png" alt="Imgur"></p><blockquote><p>cleos wallet keys</p></blockquote><p><img src="https://i.imgur.com/SG4coWx.png" alt="Imgur"></p><blockquote><p>cleos wallet private_keys -n Homo-Efficio</p></blockquote><p><img src="https://i.imgur.com/QZNJkNB.png" alt="Imgur"></p><p><em>참고: 3개가 아니라 4개가 나오는 이유는 앞서 말한 것과 같음</em></p><h2 id="지갑-백업"><a href="#지갑-백업" class="headerlink" title="지갑 백업"></a>지갑 백업</h2><p>지갑의 백업은 단순하다 <code>~/eosio-wallet</code> 디렉터리에 있는 지갑 파일을 다른 곳으로 복사해서 백업하면 된다.</p><p><img src="https://i.imgur.com/qIVEGAq.png" alt="Imgur"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EOS-지갑-만들기-및-Key-연동&quot;&gt;&lt;a href=&quot;#EOS-지갑-만들기-및-Key-연동&quot; class=&quot;headerlink&quot; title=&quot;EOS 지갑 만들기 및 Key 연동&quot;&gt;&lt;/a&gt;EOS 지갑 만들기 및 Key 연동&lt;/h1&gt;&lt;p&gt;공식
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="EOS" scheme="http://homoefficio.github.io/tags/EOS/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="이오스" scheme="http://homoefficio.github.io/tags/%EC%9D%B4%EC%98%A4%EC%8A%A4/"/>
    
      <category term="development" scheme="http://homoefficio.github.io/tags/development/"/>
    
      <category term="개발" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="dapp" scheme="http://homoefficio.github.io/tags/dapp/"/>
    
      <category term="디앱" scheme="http://homoefficio.github.io/tags/%EB%94%94%EC%95%B1/"/>
    
      <category term="Wallet" scheme="http://homoefficio.github.io/tags/Wallet/"/>
    
      <category term="Account" scheme="http://homoefficio.github.io/tags/Account/"/>
    
      <category term="nodeos" scheme="http://homoefficio.github.io/tags/nodeos/"/>
    
      <category term="keosd" scheme="http://homoefficio.github.io/tags/keosd/"/>
    
      <category term="cleos" scheme="http://homoefficio.github.io/tags/cleos/"/>
    
      <category term="지갑" scheme="http://homoefficio.github.io/tags/%EC%A7%80%EA%B0%91/"/>
    
  </entry>
  
  <entry>
    <title>EOS Single Node Testnet 실행</title>
    <link href="http://homoefficio.github.io/2018/06/06/EOS-Single-Node-Testnet-%EC%8B%A4%ED%96%89/"/>
    <id>http://homoefficio.github.io/2018/06/06/EOS-Single-Node-Testnet-실행/</id>
    <published>2018-06-05T23:45:33.000Z</published>
    <updated>2019-04-28T17:03:55.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EOS-Single-Node-Testnet-실행"><a href="#EOS-Single-Node-Testnet-실행" class="headerlink" title="EOS Single Node Testnet 실행"></a>EOS Single Node Testnet 실행</h1><p>공식 문서인 <a href="https://developers.eos.io/eosio-nodeos/docs/local-single-node-testnet" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/local-single-node-testnet</a> 를 기준으로 약간의 커스터마이징과 과도한 친절함을 가미했다.</p><h2 id="사전-조건"><a href="#사전-조건" class="headerlink" title="사전 조건"></a>사전 조건</h2><p><a href="https://homoefficio.github.io/2018/06/06/EOS-소스-구성-빌드-및-테스트/">https://homoefficio.github.io/2018/06/06/EOS-소스-구성-빌드-및-테스트/</a> 에서와 같이 빌드를 성공적으로 마치면 아래와 같이 build 디렉토리에 빌드 결과물이 생성된다.</p><p><img src="https://i.imgur.com/3JFK47Y.png" alt="Imgur"></p><h2 id="EOSIO-아키텍처-다시-보기"><a href="#EOSIO-아키텍처-다시-보기" class="headerlink" title="EOSIO 아키텍처 다시 보기"></a>EOSIO 아키텍처 다시 보기</h2><p><img src="https://i.imgur.com/nnJYbmt.png" alt="Imgur"></p><p>이 글에서는 위 3가지 컴포넌트 중 <code>nodeos</code> 실행에 대해 알아본다.</p><h2 id="nodeos-실행"><a href="#nodeos-실행" class="headerlink" title="nodeos 실행"></a>nodeos 실행</h2><blockquote><p>cd build/programs/nodeos</p><p>./nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin</p><p>1.0.9 부터는<br>./nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin --http-validate-host=false</p></blockquote><ul><li><code>-e</code>: 체인이 stale 상태이더라도 블록을 생성할 수 있도록 한다.</li><li><code>-p</code>: 실행될 노드에 의해 제어되는 블록 생산자의 계정 이름을 지정한다.<ul><li>예제에서는 <code>eosio</code>가 블록 생산자 계정이며, <code>eosio</code> 계정의 Key는 <code>nodeos</code>의 설정 파일인 <code>~/.local/share/eosio/config/config.ini</code>(Mac OS: <code>~/Library/Application Support/eosio/nodeos/config/config.ini</code>)에서 확인할 수 있다.</li></ul></li><li><code>--plugin</code>: <code>nodeos</code>에서 사용할 플러그인을 지정한다. 여러번 지정할 수 있다.<ul><li>예제에서는 <code>eosio::chain_api_plugin</code>, <code>eosio::history_api_plugin</code> 플러그인을 사용한다.</li></ul></li></ul><p>위와 같이 실행하면 아래와 같이 싱글 노드로 구성된 테스트넷이 실행되고, 블록도 매우 빠른 속도(0.5초)로 계속 생성된다.</p><p><img src="https://i.imgur.com/BJNM5Et.png" alt="Imgur"></p><p>싱글 노드로 구성된 테스트넷에는 아래 그림과 같이 <code>keosd</code>, <code>cleos</code>, <code>nodeos</code> 모두 하나의 호스트 안에서 실행된다.</p><p><img src="https://i.imgur.com/ehc7Jpa.png" alt="Imgur"></p><p><code>nodeos</code>가 실행되면 아래와 같이 <code>~/.local/share/eosio</code>(Mac OS: <code>~/Library/Application Support/eosio</code>) 디렉터리에 테스트넷 관련 데이터 및 설정 파일이 생성된다.</p><p><img src="https://i.imgur.com/dOsfBVI.png" alt="Imgur"></p><p><code>~/.local/share/eosio/nodeos/config/config.ini</code>(Mac OS: <code>~/Library/Application Support/eosio/nodeos/config/config.ini</code>) 파일에 여러가지 네트워크 설정 사항이 담겨 있다.</p><p><code>~/.local/share/eosio/nodeos/data</code>(Mac OS: <code>~/Library/Application Support/eosio/nodeos/data</code>) 디렉터리에는 공유 메모리, 로그 등 EOS 블록체인 관련 여러 런타임 데이터가 저장된다. 데이터 디렉터리의 위치는 <code>nodeos</code> 실행 시 <code>--data-dir</code> 옵션으로 다른 위치를 지정할 수도 있다.</p><p><code>nodeos</code>는 CTRL+C로 종료할 수 있으며 화면은 다음과 같다. #184번 블록까지 생성한 후 종료되었다.</p><p><img src="https://i.imgur.com/pgbzFRE.png" alt="Imgur"></p><p>다시 <code>./nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin</code> 명령으로 실행하면 다음과 같이 #185번 블록부터 다시 블록 생성이 이어진다.</p><p><img src="https://i.imgur.com/pbCVcz1.png" alt="Imgur"></p><h2 id="cleos-에서-nodeos-정보-확인"><a href="#cleos-에서-nodeos-정보-확인" class="headerlink" title="cleos 에서 nodeos 정보 확인"></a>cleos 에서 nodeos 정보 확인</h2><p><code>nodeos</code>를 실행한 터미널 말고 다른 새 터미널의 eos 디렉터리에서 아래 명령 실행</p><blockquote><p>./build/programs/cleos/cleos --url <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> get info</p></blockquote><p><img src="https://i.imgur.com/99DPIh2.png" alt="Imgur"></p><h2 id="nodeos-종료"><a href="#nodeos-종료" class="headerlink" title="nodeos 종료"></a>nodeos 종료</h2><p><code>CTRL+C</code>로 종료한다. 더 우아한 방법이 있을거라 생각했지만 <code>nodeos --help</code>로 확인해본 결과 종료 옵션은 없는 것 같다. </p><p>계속 켜두어도 되지만 다음 과정인 지갑 만들기 및 Key 연동에서는 <code>nodeos</code>를 사용하지 않으므로 종료해도 무방하다.</p><p>이것으로 <code>nodeos</code> 실행을 마쳤다. 다음에는 <a href="https://homoefficio.github.io/2018/06/06/EOS-지갑-만들기-및-Key-연동/">EOS 지갑 만들기 및 Key 연동</a>에서 지갑을 만들고 Key를 생성해서 연동하는 방법을 알아본다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EOS-Single-Node-Testnet-실행&quot;&gt;&lt;a href=&quot;#EOS-Single-Node-Testnet-실행&quot; class=&quot;headerlink&quot; title=&quot;EOS Single Node Testnet 실행&quot;&gt;&lt;/a&gt;EOS Sing
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="EOS" scheme="http://homoefficio.github.io/tags/EOS/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="이오스" scheme="http://homoefficio.github.io/tags/%EC%9D%B4%EC%98%A4%EC%8A%A4/"/>
    
      <category term="development" scheme="http://homoefficio.github.io/tags/development/"/>
    
      <category term="개발" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="dapp" scheme="http://homoefficio.github.io/tags/dapp/"/>
    
      <category term="디앱" scheme="http://homoefficio.github.io/tags/%EB%94%94%EC%95%B1/"/>
    
      <category term="Testnet" scheme="http://homoefficio.github.io/tags/Testnet/"/>
    
      <category term="테스트넷" scheme="http://homoefficio.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%84%B7/"/>
    
  </entry>
  
  <entry>
    <title>EOS Visual Studio Code 개발 환경 구성</title>
    <link href="http://homoefficio.github.io/2018/06/06/EOS-Visual-Studio-Code-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1/"/>
    <id>http://homoefficio.github.io/2018/06/06/EOS-Visual-Studio-Code-개발-환경-구성/</id>
    <published>2018-06-05T23:31:22.000Z</published>
    <updated>2019-04-28T17:03:55.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EOS-Visual-Studio-Code-개발-환경-구성"><a href="#EOS-Visual-Studio-Code-개발-환경-구성" class="headerlink" title="EOS Visual Studio Code 개발 환경 구성"></a>EOS Visual Studio Code 개발 환경 구성</h1><p><a href="https://infinitexlabs.com/setup-ide-for-eos-development/" target="_blank" rel="noopener">https://infinitexlabs.com/setup-ide-for-eos-development/</a> 를 참고해서 작성한 EOS 개발 환경 구성</p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><h3 id="다운로드-및-설치"><a href="#다운로드-및-설치" class="headerlink" title="다운로드 및 설치"></a>다운로드 및 설치</h3><p><a href="https://code.visualstudio.com/docs/setup/linux" target="_blank" rel="noopener">https://code.visualstudio.com/docs/setup/linux</a> 참고해서 .deb 파일 다운로드 후 설치</p><h3 id="VS-Code-Extension-설치"><a href="#VS-Code-Extension-설치" class="headerlink" title="VS Code Extension 설치"></a>VS Code Extension 설치</h3><p>아래와 같이 Extension 버튼을 누르고</p><p><img src="https://i.imgur.com/etrHfut.png" alt="Imgur"></p><p>다음 항목을 차례로 설치한다.</p><ul><li><p>C/C++ by MicroSoft</p></li><li><p>CMake by twxs</p></li><li><p>CMake Tools by vector-of-bool</p></li><li><p>WebAssembly Dmitriy Tsvettsikh</p></li></ul><p><img src="https://i.imgur.com/ml1iOWX.png" alt="Imgur"></p><p>Extension은 아래와 같이 <code>~/.vscode</code> 아래에 설치된다.</p><p><img src="https://i.imgur.com/5mhpfwG.png" alt="Imgur"></p><h2 id="EOS-프로젝트-열기"><a href="#EOS-프로젝트-열기" class="headerlink" title="EOS 프로젝트 열기"></a>EOS 프로젝트 열기</h2><p>VS Code에는 IntelliJ나 Eclipse에 익숙한 개발자에게는 살짝 당황스러운 것이 <code>New Project...</code>나 <code>Import...</code> 같은 메뉴가 없다.</p><p>아래 화면과 같이 Explorer 버튼을 누른 후 Open Folder를 클릭해서 EOS 프로젝트 루트 폴더를 지정한다.</p><p><img src="https://i.imgur.com/ZnIGQD8.png" alt="Imgur"></p><p>열고 나면 다음과 같이 파일 변화를 감지하는 watch가 제대로 동작을 할 수 없다고 나온다.</p><p><img src="https://i.imgur.com/VGfTDvh.png" alt="Imgur"></p><p>버튼을 눌러보면 <a href="https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc" target="_blank" rel="noopener">여기</a> 로 이동해서 아래와 같은 내용이 표시된다.</p><p><img src="https://i.imgur.com/gcvmYnM.png" alt="Imgur"></p><p>대략 워크스페이스가 너무 많은 파일을 가지고 있는 게 문제라는 얘기인데, 설명에 나온 것처럼 <code>/etc/sysctl.conf</code> 파일을 열어서 아래의 내용을 추가해준다. 524,288개의 파일까지 변경 감지가 가능하다는 설정이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.inotify.max_user_watches=524288</span><br></pre></td></tr></table></figure><p>파일을 저장하고 <code>sudo sysctl -p</code> 명령을 실행해서 설정 내용을 적용한다.</p><p>아래 화면을 보면 설정 내용을 적용하기 전에는 8192 였고, 설정 후 524288 이 적용되었음을 확인할 수 있다.</p><p><img src="https://i.imgur.com/lAFDUyE.png" alt="Imgur"></p><p>언어 팩 설치 관련 팝업은 아래와 같이 설정 아이콘을 누르고 Don’t Show Again 을 클릭해서 다시 안 보이게 할 수도 있고, 설치해서 한글로 사용할 수도 있다.</p><p><img src="https://i.imgur.com/SQEEum1.png" alt="Imgur"></p><h2 id="작업-편의를-위한-Tasks-작성"><a href="#작업-편의를-위한-Tasks-작성" class="headerlink" title="작업 편의를 위한 Tasks 작성"></a>작업 편의를 위한 Tasks 작성</h2><p>일반적인 컴파일, 빌드를 위한 Tasks와 스마트 컨트랙의 ABI를 만들어내는 Tasks를 작성한다.</p><p><code>SHIFT+CTRL+P</code>를 눌러서 Command Palette를 띄우고 <code>Tasks</code>를 입력한 후 <code>Configure Task</code>를 선택한다.</p><p><img src="https://i.imgur.com/KmYnWqz.png" alt="Imgur"></p><p><code>Create tasks.json file from template</code>를 선택한다.</p><p><img src="https://i.imgur.com/KmYnWqz.png" alt="Imgur"></p><p><code>Others</code>를 선택한다.</p><p><img src="https://i.imgur.com/0akpWnP.png" alt="Imgur"></p><p>아래와 같이 <code>.vscode</code> 폴더 아래에 <code>tasks.json</code> 파일 템플릿이 표시된다.</p><p><img src="https://i.imgur.com/B41aoV5.png" alt="Imgur"></p><p><code>tasks.json</code> 파일 내용을 다음과 같이 수정한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"reveal"</span>: <span class="string">"always"</span>,</span><br><span class="line">    <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"CMake"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"sh $&#123;workspaceRoot&#125;/.vscode/scripts/compile.sh"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Build"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"sh $&#123;workspaceRoot&#125;/.vscode/scripts/build.sh"</span>            </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Generate ABI"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"sh $&#123;workspaceRoot&#125;/.vscode/scripts/generate.sh $&#123;fileDirname&#125; $&#123;fileBasenameNoExtension&#125;"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각 Task에 해당하는 셸 파일을 작성한다.</p><h3 id="compile-sh"><a href="#compile-sh" class="headerlink" title="compile.sh"></a>compile.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p build</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 필요한 모든 빌드 파일 생성</span></span><br><span class="line">cmake -G <span class="string">'Unix Makefiles'</span> -DCMAKE_BUILD_TYPE=Debug ..</span><br></pre></td></tr></table></figure><h3 id="build-sh"><a href="#build-sh" class="headerlink" title="build.sh"></a>build.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p build</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 필요한 모든 빌드 파일 생성</span></span><br><span class="line">cmake -G <span class="string">'Unix Makefiles'</span> -DCMAKE_BUILD_TYPE=Debug ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 빌드</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="generate-sh"><a href="#generate-sh" class="headerlink" title="generate.sh"></a>generate.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Current working directory -"</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">eosiocpp -g <span class="variable">$2</span>.abi <span class="variable">$2</span>.cpp</span><br></pre></td></tr></table></figure><h2 id="Tasks를-위한-단축키-설정"><a href="#Tasks를-위한-단축키-설정" class="headerlink" title="Tasks를 위한 단축키 설정"></a>Tasks를 위한 단축키 설정</h2><p><code>compile</code>, <code>build</code>, <code>generate</code> task를 편리하게 실행할 수 있는 단축키를 등록한다. </p><p><code>File &gt; Preferences &gt; Keyboard Shortcuts</code> 클릭</p><p><img src="https://i.imgur.com/UdBaQzE.png" alt="Imgur"></p><p><code>keybindings.json</code> 클릭</p><p><img src="https://i.imgur.com/VEluHdM.png" alt="Imgur"></p><p>아래와 같이 단축키를 등록한다. 기존의 단축키와 충돌만 나지 않는다면 취향에 맞게 다른 키를 등록할 수도 있다. </p><p><img src="https://i.imgur.com/aO5SviF.png" alt="Imgur"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EOS-Visual-Studio-Code-개발-환경-구성&quot;&gt;&lt;a href=&quot;#EOS-Visual-Studio-Code-개발-환경-구성&quot; class=&quot;headerlink&quot; title=&quot;EOS Visual Studio Code 개발 환경 구
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="EOS" scheme="http://homoefficio.github.io/tags/EOS/"/>
    
      <category term="Visual Studio Code" scheme="http://homoefficio.github.io/tags/Visual-Studio-Code/"/>
    
      <category term="vscode" scheme="http://homoefficio.github.io/tags/vscode/"/>
    
      <category term="IDE" scheme="http://homoefficio.github.io/tags/IDE/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="이오스" scheme="http://homoefficio.github.io/tags/%EC%9D%B4%EC%98%A4%EC%8A%A4/"/>
    
      <category term="development" scheme="http://homoefficio.github.io/tags/development/"/>
    
      <category term="개발" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="dapp" scheme="http://homoefficio.github.io/tags/dapp/"/>
    
      <category term="디앱" scheme="http://homoefficio.github.io/tags/%EB%94%94%EC%95%B1/"/>
    
      <category term="개발 환경" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD/"/>
    
      <category term="비주얼 스튜디오 코드" scheme="http://homoefficio.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>EOS 소스 구성, 빌드 및 테스트</title>
    <link href="http://homoefficio.github.io/2018/06/06/EOS-%EC%86%8C%EC%8A%A4-%EA%B5%AC%EC%84%B1-%EB%B9%8C%EB%93%9C-%EB%B0%8F-%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    <id>http://homoefficio.github.io/2018/06/06/EOS-소스-구성-빌드-및-테스트/</id>
    <published>2018-06-05T23:28:37.000Z</published>
    <updated>2019-04-28T17:03:55.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EOS-소스-구성-빌드-및-테스트"><a href="#EOS-소스-구성-빌드-및-테스트" class="headerlink" title="EOS 소스 구성, 빌드 및 테스트"></a>EOS 소스 구성, 빌드 및 테스트</h1><p><a href="https://github.com/EOSIO/eos/releases/tag/v1.0.0" target="_blank" rel="noopener">EOSIO 1.0.0</a>이 출시되었다. </p><p>공식 문서인 <a href="https://github.com/EOSIO/eos/wiki/Local-Environment" target="_blank" rel="noopener">https://github.com/EOSIO/eos/wiki/Local-Environment</a> 를 기준으로 약간의 커스터마이징과 과도한 친절함을 가미했다. </p><p>참고로 이 글은 EOSIO 1.0.0의 바로 앞 버전인 <a href="https://github.com/EOSIO/eos/releases/tag/dawn-v4.2.0" target="_blank" rel="noopener">EOSIO Dawn 4.2</a>를 기준으로 작성되었으나 EOSIO 1.0.0 에서도 그대로 적용할 수 있다. <em>EOS는 버전업이 상당히 잦다. 내용 일부는 버전업에 맞춰 계속 업데이트 한다.</em></p><h2 id="EOSIO-아키텍처"><a href="#EOSIO-아키텍처" class="headerlink" title="EOSIO 아키텍처"></a>EOSIO 아키텍처</h2><p>EOSIO는 여러개의 컴포넌트로 구성되어 있다. 가장 중요한 3가지는 다음과 같다.</p><ul><li><code>nodeos</code>: 서버 사이드 블록체인 노드</li><li><code>cleos</code>: 블록체인과의 상호작용 및 지갑 관리 컴포넌트인 <code>keosd</code>에 대한 CLI(명령행 인터페이스)</li><li><code>keosd</code>: EOSIO 지갑 관리 컴포넌트</li></ul><p>위 3가지 컴포넌트의 관계는 다음 그림과 같다.</p><p><img src="https://i.imgur.com/nnJYbmt.png" alt="Imgur"></p><h2 id="사전-조건"><a href="#사전-조건" class="headerlink" title="사전 조건"></a>사전 조건</h2><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>공식 문서에 아래와 같이 안내 되어 있다. 이 글은 Linux Mint 18.3에서 빌드하고 작성했다.</p><ol><li>Amazon 2017.09 and higher.</li><li>Centos 7.</li><li>Fedora 25 and higher (Fedora 27 recommended).</li><li>Mint 18.</li><li>Ubuntu 16.04 (Ubuntu 16.10 recommended).</li><li>MacOS Darwin 10.12 and higher (MacOS 10.13.x recommended).</li></ol><h3 id="용량"><a href="#용량" class="headerlink" title="용량"></a>용량</h3><ul><li>RAM: 8G 이상</li><li>Disk: 20G 이상</li></ul><h2 id="소스-가져오기"><a href="#소스-가져오기" class="headerlink" title="소스 가져오기"></a>소스 가져오기</h2><p>문서에는 EOSIO의 리포지토리를 직접 clone하도록 안내하고 있지만, Pull Request도 보내면서 개발하려면 각자 fork 뜬 리포지토리를 clone하는 것이 좋다.</p><p>각자 fork 뜬 리포지토리의 URL을 <code>https://github.com/YOUR_USERNAME/eos</code>라고 하면, 다음과 같이 clone 하면 된다.</p><blockquote><p>$ git clone <a href="https://github.com/YOUR_USERNAME/eos" target="_blank" rel="noopener">https://github.com/YOUR_USERNAME/eos</a> --recursive</p></blockquote><h2 id="빌드"><a href="#빌드" class="headerlink" title="빌드"></a>빌드</h2><p>EOSIO 에서 제공하는 빌드 스크립트를 실행하면 된다.</p><blockquote><p>$ cd eos</p><p>$ ./eosio_build.sh</p></blockquote><h3 id="자잘한-버그-수정"><a href="#자잘한-버그-수정" class="headerlink" title="자잘한 버그 수정"></a>자잘한 버그 수정</h3><blockquote><p>아래 기술한 빌드 스크립트 에러는 이미 Pull Request가 받아들여져서 현재 릴리스 버전인 EOSIO 1.0.1 에서는 발생하지 않으나, 참고로 내용만 남겨둔다.</p></blockquote><p>그런데 우분투 용 빌드 스크립트에는 의존 관계 구성 관련 사소한 버그가 있어서, 빌드 스크립트를 살짝 고치고 Pull Request를 날려두었다.</p><p><a href="https://github.com/EOSIO/eos/pull/2979/files" target="_blank" rel="noopener">https://github.com/EOSIO/eos/pull/2979/files</a></p><p>이 글을 보는 시점에 Pull Request가 반영되어있다면 아래 내용은 무시하고 다음 단원으로 건너뛰면 된다.</p><p>원본 그대로 실행하면 먼저 다음과 같이 라이브러리를 설치해야 한다는 안내가 나온다. </p><p><img src="https://i.imgur.com/FdCnNY9.png" alt="Imgur"></p><p>메시지가 살짝 깨져 나오지만 일단 넘어가고, 1 을 입력하고 엔터를 치면 설치가 안 되고 다음과 같은 에러가 난다.</p><p><img src="https://i.imgur.com/9EyuWR0.png" alt="Imgur"></p><p>위의 Pull Request 링크를 참고해서 <code>scripts/eosio_build_ubuntu.sh</code>파일을 수정하고 다시 <code>./eosio_build.sh</code>를 실행해서, 라이브러리 설치 문의 시 1을 입력하고 엔터를 치면 다음과 같이 라이브러리 설치가 정상적으로 진행된다.</p><p><img src="https://i.imgur.com/uI88CPW.png" alt="Imgur"></p><h2 id="기다림"><a href="#기다림" class="headerlink" title="기다림"></a>기다림</h2><p>라이브러리 설치 후 Boost, mongoDB, LLVM 등도 빌드하는데 넉넉 잡아 120분 정도 소요되었다. 느긋한 기다림이 필요하다. 생산 되는 로그량도 20,000라인을 넘는다.</p><p>몇 가지 화면 캡처를 떠놨으니 미리 구경해보자.</p><h3 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h3><p>별 문제없이 설치된다.</p><p><img src="https://i.imgur.com/QS1BX2K.png" alt="Imgur"></p><h3 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h3><p>별 문제없이 설치된다.</p><p><img src="https://i.imgur.com/TgsjIC5.png" alt="Imgur"></p><p><img src="https://i.imgur.com/KhhsDyP.png" alt="Imgur"></p><p><img src="https://i.imgur.com/AvnGEG0.png" alt="Imgur"></p><h3 id="secp256k1-zkp"><a href="#secp256k1-zkp" class="headerlink" title="secp256k1-zkp"></a>secp256k1-zkp</h3><p>mongoDB 설치까지 완료된 후 지루할만 하니 에러가 나준다(이것도 Pull Request가 받아들여져서 더는 발생하지 않을 것이다).</p><p><img src="https://i.imgur.com/HqkYJ7q.png" alt="Imgur"></p><p><code>aclocal</code>이 없다는 얘긴데 <code>automake</code>를 설치하면 해결된다.</p><blockquote><p>$ sudo apt install automake</p></blockquote><p><img src="https://i.imgur.com/Dy1kTfc.png" alt="Imgur"></p><p><code>automake</code> 설치 완료 되면 다시 <code>./eosio_build.sh</code>를 실행한다.</p><p><img src="https://i.imgur.com/tkyTrmz.png" alt="Imgur"></p><p>아까 받아둔 파일이 있어서 문제라고 하니 개뿐하게 지워주고, 다시 <code>./eosio_build.sh</code>를 실행한다.</p><p><img src="https://i.imgur.com/QBGDIzg.png" alt="Imgur"></p><h3 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h3><p>이제 secp256k1-zkp도 깔끔하게 설치되고 다음 단계인 LLVM으로 넘어간다. LLVM은 별 문제없이 설치된다.</p><p><img src="https://i.imgur.com/KOsUI6Q.png" alt="Imgur"></p><p><img src="https://i.imgur.com/zICvgid.png" alt="Imgur"></p><h3 id="EOSIO"><a href="#EOSIO" class="headerlink" title="EOSIO"></a>EOSIO</h3><p>이제 드디어 EOSIO 설치로 넘어간다. EOSIO는 별 문제없이 설치된다.</p><p><img src="https://i.imgur.com/wcPRLJl.png" alt="Imgur"></p><p><img src="https://i.imgur.com/G4bcK1s.png" alt="Imgur"></p><p>드디어 빌드가 완성 되었다. 총 90분 정도 걸렸다고 나오는데, 중간에 오류 나기 전에 설치되는 것들까지 감안하면 CPU i5-2500 3.3GHz, RAM 8G 정도로 넉넉잡아 2시간은 걸린 것 같다.</p><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>위 빌드 결과에 안내해준 대로 테스트를 수행해보자.</p><blockquote><p>export PATH=${HOME}/opt/mongodb/bin:$PATH</p><p>/home/hanmomhanda/opt/mongodb/bin/mongod -f /home/hanmomhanda/opt/mongodb/mongod.conf &amp;</p><p>cd /home/hanmomhanda/gitRepo/crypto/eos/build</p><p>make test</p></blockquote><p><img src="https://i.imgur.com/EVWbJK4.png" alt="Imgur"></p><p><img src="https://i.imgur.com/SQh7tA0.png" alt="Imgur"></p><p>테스트도 시간은 10여분 정도 걸렸지만 문제없이 모두 통과한다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p><code>/eos/build</code> 디렉터리에서 <code>sudo make install</code>을 실행해서 설치하면 실행 파일이 v1.1.0 부터는 <code>/usr/local/eosio/bin</code>에 설치된다(1.0.#에서는 <code>/usr/local/bin</code>에 설치됐었다). 따라서, <code>sudo update-alternatives --install /usr/local/bin/nodeos nodeos /usr/local/eosio/bin/nodeos 1</code>와 같이 해줘야 PATH 설정 없이도 편리하게 사용할 수 있다.</p><p><img src="https://i.imgur.com/jgB2MUx.png" alt="Imgur"></p><p><img src="https://i.imgur.com/lu1eUF2.png" alt="Imgur"></p><p><img src="https://i.imgur.com/ljgjYaO.png" alt="Imgur"></p><h2 id="원본-리포지토리-upstream-와-Fork-리포지토리-Sync"><a href="#원본-리포지토리-upstream-와-Fork-리포지토리-Sync" class="headerlink" title="원본 리포지토리(upstream)와 Fork 리포지토리 Sync"></a>원본 리포지토리(upstream)와 Fork 리포지토리 Sync</h2><h3 id="upstream-remote-추가"><a href="#upstream-remote-추가" class="headerlink" title="upstream remote 추가"></a>upstream remote 추가</h3><p><a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/" target="_blank" rel="noopener">https://help.github.com/articles/configuring-a-remote-for-a-fork/</a> 를 참고해서 다음을 실행한다.</p><ol><li><p>현재 remote 확인</p><blockquote><p>$ git remote -v</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin  https://github.com/YOUR_USERNAME/eos.git (fetch)</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/eos.git (push)</span><br></pre></td></tr></table></figure></li><li><p>원본 리포지토리를 가리키는 upstream 추가</p><blockquote><p>$ git remote add upstream <a href="https://github.com/EOSIO/eos.git" target="_blank" rel="noopener">https://github.com/EOSIO/eos.git</a></p></blockquote></li><li><p>upstream 확인</p><blockquote><p>$ git remote -v</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">origin    https://github.com/YOUR_USERNAME/eos.git (fetch)</span><br><span class="line">origin    https://github.com/YOUR_USERNAME/eos.git (push)</span><br><span class="line">upstream  https://github.com/EOSIO/eos.git (fetch)</span><br><span class="line">upstream  https://github.com/EOSIO/eos.git (push)</span><br></pre></td></tr></table></figure></li></ol><h3 id="원본-리포지토리와-Sync"><a href="#원본-리포지토리와-Sync" class="headerlink" title="원본 리포지토리와 Sync"></a>원본 리포지토리와 Sync</h3><p>EOSIO 프로젝트가 진행되면서 버전이 올라가면 로컬 개발 환경의 버전도 맞춰줘야 한다.</p><p>그냥 일반적인 remote 리포지토리와 Sync하는 것과 다르지 않다.</p><p><a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="noopener">https://help.github.com/articles/syncing-a-fork/</a> 를 참고하되, <code>git merge</code> 뿐아니라 <code>git rebase</code>도 물론 쓸 수 있다.</p><p>로컬의 master 브랜치에서 다음과 같이 <code>git fetch upstream</code>으로 EOSIO 의 최신 내용을 가져온다.</p><blockquote><p>git fetch upstream</p></blockquote><p><img src="https://i.imgur.com/LNdlV8e.png" alt="Imgur"></p><p>rebase로 EOSIO의 최신 버전을 베이스로 설정한다(merge도 가능).</p><blockquote><p>git rebase upstream/master</p></blockquote><p><img src="https://i.imgur.com/iKwaDpp.png" alt="Imgur"></p><p>다음 명령으로 submodule도 업데이트한다.</p><blockquote><p>git submodule update --init --recursive</p></blockquote><p><img src="https://i.imgur.com/HMxnI2o.png" alt="Imgur"></p><p>추적하지 않는 파일이라고 표시된 파일은 IDE(Clion)과 테스트 설정 파일로 무시하거나 <code>.gitignore</code>에 추가해서 버전관리 대상에서 제외하면 된다.</p><h3 id="Fork-리포지토리-Sync"><a href="#Fork-리포지토리-Sync" class="headerlink" title="Fork 리포지토리 Sync"></a>Fork 리포지토리 Sync</h3><p>원본 리포지토리와 Sync를 완료한 로컬 리포지토리에서 다음 명령으로 Fork 리포지토리로 강제 푸쉬를 날리면 된다.</p><blockquote><p>git push -f origin master</p></blockquote><h2 id="새-버전으로-다시-빌드"><a href="#새-버전으로-다시-빌드" class="headerlink" title="새 버전으로 다시 빌드"></a>새 버전으로 다시 빌드</h2><p>빌드 스크립트로 새 버전을 다시 빌드한다.</p><blockquote><p>./eosio_build.sh</p></blockquote><p>boost 등 의존 라이브러리 버전이 변경된 경우 재설치하므로 20분 가량 소요되며, boost 버전 관련 다음과 같은 에러가 발생한다(발생하지 않으면 boost 버전 변경 작업 불필요).</p><p><img src="https://i.imgur.com/e5ML3FO.png" alt="Imgur"></p><p><code>~/.bashrc</code>에 지정해둔 boost 관련 버전을 1.67로 변경해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export BOOST_ROOT=~/opt/boost_1_67_0</span><br><span class="line">export BOOST_INCLUDEDIR=~/opt/boost_1_67_0/include</span><br></pre></td></tr></table></figure><p>이전 버전의 빌드 캐시가 남아있는 build 디렉터리를 삭제하고 다시 빌드 스크립트를 실행하면 약 15분 후 빌드가 성공적으로 마무리 된다.</p><blockquote><p>rm -rf build/</p><p>./eosio_build.sh</p></blockquote><p><img src="https://i.imgur.com/Lz3OG75.png" alt="Imgur"></p><p>빌드 후 테스트 및 설치는 앞에서 서술한 테스트 과정을 그대로 반복하면 된다.</p><p>이것으로 로컬 환경에서 EOSIO 소스를 빌드하는 작업을 마쳤다. 다음 <a href="https://homoefficio.github.io/2018/06/06/EOS-Single-Node-Testnet-실행/">EOS Single Node Testnet 실행</a>에서 빌드 결과물로 단일 노드 EOS 테스트넷을 실행해보자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EOS-소스-구성-빌드-및-테스트&quot;&gt;&lt;a href=&quot;#EOS-소스-구성-빌드-및-테스트&quot; class=&quot;headerlink&quot; title=&quot;EOS 소스 구성, 빌드 및 테스트&quot;&gt;&lt;/a&gt;EOS 소스 구성, 빌드 및 테스트&lt;/h1&gt;&lt;p&gt;&lt;a h
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="EOS" scheme="http://homoefficio.github.io/tags/EOS/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="이오스" scheme="http://homoefficio.github.io/tags/%EC%9D%B4%EC%98%A4%EC%8A%A4/"/>
    
      <category term="development" scheme="http://homoefficio.github.io/tags/development/"/>
    
      <category term="개발" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="dapp" scheme="http://homoefficio.github.io/tags/dapp/"/>
    
      <category term="디앱" scheme="http://homoefficio.github.io/tags/%EB%94%94%EC%95%B1/"/>
    
      <category term="개발 환경" scheme="http://homoefficio.github.io/tags/%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD/"/>
    
  </entry>
  
  <entry>
    <title>블록체인 한 번에 이해하기</title>
    <link href="http://homoefficio.github.io/2017/11/19/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/"/>
    <id>http://homoefficio.github.io/2017/11/19/블록체인-한-번에-이해하기/</id>
    <published>2017-11-19T04:07:38.000Z</published>
    <updated>2019-04-28T17:03:55.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.imaso.co.kr/archives/248" target="_blank" rel="noopener">마이크로소프트웨어 2017년 10월호</a>에 기고한 ‘가볍게 읽어 보는 블록 체인 이야기’를 토대로 작성한 글입니다.</p></blockquote><blockquote><p>전편 <a href="http://homoefficio.github.io/2016/01/23/BlockChain-기초-개념/">http://homoefficio.github.io/2016/01/23/BlockChain-기초-개념/</a> 에서 예고했던 후속편이기도 합니다.</p></blockquote><blockquote><p>기부</p><ul><li>Bitcoin: 1QofbPJxE9b39SrhCLhCWGsBj8cv299qd</li><li>Ethereum: 0x4d8029ceace5ef7369843d2ee6c11ed39561bddc</li></ul></blockquote><h1 id="블록체인-한-번에-이해하기"><a href="#블록체인-한-번에-이해하기" class="headerlink" title="블록체인 한 번에 이해하기"></a>블록체인 한 번에 이해하기</h1><p>2017년도 벌써 3/4가 지나갔다. 올 한해를 정리해보기엔 좀 이른 시간이지만, 그래도 이 시점에서 중간 점검 차 한 번 짚어보자. 소프트웨어 업계에서 올해 1~9월 사이에 일어났던 많은 일 들 가운데 가장 큰 이슈로 무엇을 꼽을 수 있을까?</p><p>여러 이슈가 있겠지만, 필자의 짧은 생각으로는 비트코인에 대한 관심의 폭증과 그에 따른 암호화 화폐 시장의 급등락과 ICO(Initial Coin Offering)를 꼽고 싶다.</p><p><img src="https://i.imgur.com/PA4MRZ0.png" alt="Imgur"></p><p><img src="https://i.imgur.com/QitEtsa.png" alt="Imgur"></p><p><img src="http://i.imgur.com/uMx3ujw.png" alt="Imgur"></p><p>주변에서 몇 억을 벌었다는 이야기도 심심치 않게 들을 수 있고, 그에 못지 않게 많은 돈을 잃었다는 이야기도 들을 수 있다. 길게 볼 것 없이 올해 초 대비만 하더라도 변동성이 크긴 했지만 비트코인과 기타 암호화 화폐의 가격이 급등한 것은 사실이다. </p><p>그래서 거품이다, 17세기 유럽의 튤립 광풍과 다를게 없다 등의 이야기도 많이 들을 수 있다. 분명 가격으로만 보면 틀린 말이 아닐 수도 있다. 게다가 개발자가 아닌 일반인의 관점에서 보면 아무래도 기술적인 내용은 이해하기 어렵고, 가격 급등락에 의한 여러 에피소드는 이해하기 쉬울 테니, 가격에 대한 면이 부각되는 것은 어쩔 수 없는 일이기는 하다.</p><p>하지만 마이크로소프트웨어라는 이 잡지를 보고 있는 우리는 소프트웨어를 다루는 개발자들이다. 그리고 비트코인도 당연하지만 소프트웨어다. 그럼에도 불구하고, 우리나라에서는 개발자들마저 비트코인을 바라보는 관점이 일반인의 관점과 크게 다르지 않은 것 같다. </p><p>그래서 이번 기회에 개발자답게, 일반인들보다 조금 더 깊게 탐험해 보고, 어떤 의미를 가지고 있는지 알아보자.</p><h2 id="비트코인과-블록-체인"><a href="#비트코인과-블록-체인" class="headerlink" title="비트코인과 블록 체인"></a>비트코인과 블록 체인</h2><p>제목은 블록 체인 이야기라고 써놓고, 서두에서는 비트코인 얘기만 했다. 비트코인과 블록 체인이 무엇인지 구별하는 것이 좋겠다는 의도에서 일부러 그렇게 기술했는데, 다음과 같이 구별할 수 있다.</p><blockquote><p>블록 체인은 비트코인의 바탕이 되는 ‘체계’이며,</p><p>비트코인은 블록 체인을 ‘화폐’에 응용한 결과물이다.</p></blockquote><p><strong>블록 체인이 바탕</strong>이고, <strong>비트코인은 블록 체인 바탕위에서 구현된 하나의 서비스 또는 상품</strong>이라고 할 수 있다. 그래서 <strong>블록 체인은 비트코인 뿐아니라 다른 코인의 바탕이 될 수도 있고 실제로도 그렇다. 또한 블록 체인은 코인 뿐아니라 다른 서비스나 상품의 바탕이 될 수도 있다</strong>.</p><p>재미있는 것은 블록 체인이 비트코인의 바탕이 되는 체계이지만, 블록 체인이 만들어지고 비트코인이 만들어진 것이 아니라 비트코인을 만들기 위해 고민하던 중에 블록 체인이라는 기술이 탄생했다는 점이다.</p><p>이제부터 블록 체인이 어떻게 비트코인이라는 화폐의 바탕이 되는 체계가 될 수 있는지 알아보자. 먼저 화폐가 무엇인지 짧게 되새겨 보자.</p><h2 id="화폐는-믿음이다"><a href="#화폐는-믿음이다" class="headerlink" title="화폐는 믿음이다"></a>화폐는 믿음이다</h2><p>현대 사회에서 화폐란 무엇일까? 너무 모호한 것 같으니 질문을 바꿔보자. 현대 사회에서 화폐의 ‘실체’란 무엇일까? </p><p>과거에는 금이나 은 등 실제 실물이 화폐의 역할을 담당했지만, 점차 그 실물에 대한 교환 증서가 화폐의 역할을 담당하게 되었고, 1971년의 닉슨 쇼크 이후에는 사실상 그 실물(금)에 대한 교환도 보장해 주지 않는 불태환 화폐가 되었고, 2008년 금융 위기 이후에는 양적 완화라는 미명 하에 막대한 양의 화폐를 찍어내기도 했다. 그럼에도 불구하고 여전히 우리는 그 화폐를 가지고 큰 문제 없이 살아가고 있다. 어째서 이런 일이 가능할까?</p><blockquote><p>화폐는 ‘믿음’이다.</p></blockquote><p>그렇다. 사실 우리는 화폐를 믿고 있다. <strong>화폐의 실체는 바로 믿음</strong>이다. 금으로 교환해준다는 보장은 사라졌지만, 화폐로 여전히 치킨을 먹고 맥주를 마실 수 있다고 모두가 믿고 있다. 화폐는 모두의 ‘신뢰’를 받고 있는 것이다. 비트코인이 가상 화폐, 디지털 화폐 또는 암호화 화폐처럼 화폐라는 용어를 달고 있는 이유도 ‘신뢰’할 만한 대상이 될 수 있기 때문이다. 그 <strong>신뢰의 원천이 바로 블록 체인</strong>이다.</p><p>그럼 블록 체인이 어떻게 신뢰의 원천이 될 수 있는지 차례차례 알아보자.</p><h2 id="분산-공개-장부"><a href="#분산-공개-장부" class="headerlink" title="분산 공개 장부"></a>분산 공개 장부</h2><p>A가 B에게 만원을 보내는 상황을 생각해보자. A가 은행 사이트에 접속해서 로그인하고, 잔액을 확인하고, B의 계좌 정보를 입력한 후에, 공인인증서나 OTP 등의 비밀번호를 입력하고 확인 버튼을 누르면, A의 잔액에서 만원이 차감되고, B의 잔액에 만원이 더해진다. </p><p>개인의 재산이 오가는 이 송금 과정은 매우 중요하다. 그래서 송금 거래에 필요한 모든 확인 과정은 은행에서 수행되며, 그 기록도 은행에 저장되고 외부로는 공개되지 않는다. </p><p>그래서 송금에 대해 우리가 믿는 곳은 은행 하나다. 송금 과정에 있어서의 모든 것이 은행 하나에 집중되어 있다. 이는 바꿔 말하면 <strong>은행이 바로 단일 실패 지점</strong>(Single Point of Failure)이라는 말이다. 즉, 거래 은행의 서버가 정상적으로 동작하지 않거나, 은행의 기록이 사라지게 되면 우리는 재산을 잃게 된다.</p><p>컴퓨팅 분야에서 이런 단일 실패 지점 문제를 해결하는 보편적인 방법은 고가용성 처리, 쉽게 말해 다중화다. 2중, 3중으로 복제나 분산처리를 해서 단일 실패 지점을 없애는 전략을 취한다. 은행 시스템도 이런 다중화 처리가 되어 있으므로 앞에서 말한 어처구니 없는 불상사는 쉽게 일어나지 않는다. 소프트웨어 뿐 아니라 보안 담당 직원 배치, 보안 담당 장비 도입 등으로 더 한층 위험을 낮춘다. 하지만 이런 조치를 위해서는 많은 비용이 필요하다. </p><p>블록 체인은 이 문제를 완전히 다른 각도에서 바라본다(각주: 설명의 단순화를 위해 이후로 퍼블릭 블록 체인만을 대상으로 한다). 즉, 거래 정보를 감추지 않고 모두에게 공개하고, 누구나 거래 정보를 생성할 수 있으며, 거래 정보를 모두에게 복사해서 사본을 저장하고 그 사본끼리 동기화시킨다. 쉽게 말해 <strong>2중화, 3중화 정도가 아니라 수천중화, 수만중화 처리를 해서 기록이 사라지는 일을 원천적으로 막아버린다</strong>. 그래서 블록 체인을 거대한 분산 공개 장부라고 부르기도 한다.</p><blockquote><p>블록 체인은 거대한 분산 공개 장부다.</p></blockquote><p>이렇게 수천 수만의 분산 처리를 통해 기록의 멸실은 막을 수 있지만, 이것만으로는 멸실만큼이나 위험한 기록의 위/변조까지 막을 수는 없다. 블록 체인은 이 문제를 암호학의 도움을 받아서 해결한다.</p><h2 id="디지털-서명"><a href="#디지털-서명" class="headerlink" title="디지털 서명"></a>디지털 서명</h2><p>개발자라면 디지털 서명에 대해 희미하게라도 알고 있겠지만, 블록 체인을 얘기할 때 빼놓을 수 없는 중요한 부분이므로 다시 한 번 짚고 넘어가자.</p><p>디지털 서명은 비대칭키와 해쉬 함수를 이용해서 다음과 같은 방식으로 데이터의 진위 여부를 확인할 수 있게 해준다.</p><p><img src="http://i.imgur.com/tQT0d3D.png" alt="Imgur"></p><p><strong>블록 체인에 담겨 있는 모든 거래 정보에는 이렇게 디지털 서명이 포함</strong>되어 있어서 <strong>거래 정보가 진본임을 신뢰</strong>할 수 있다.</p><h2 id="블록이란"><a href="#블록이란" class="headerlink" title="블록이란?"></a>블록이란?</h2><p>자 이제부터 진짜 블록 체인의 내부로 들어가 볼 차례다. 블록 체인이라는 체인을 이루는 원소인 블록은 무엇일까? </p><blockquote><p>블록은 유효한 거래 정보의 묶음이다.</p></blockquote><p>“A가 B에게 100원을 송금한다.”와 같은 것이 하나의 거래이며, <strong>하나의 블록에는 여러 개의 거래가 포함</strong>된다. 블록에 대해 더 구체적으로 이해하려면 실제 구현체를 살펴보는 것이 효율적이다. 그래서 블록 체인의 최초 구현체인 비트코인을 기준으로 블록과 블록 체인에 대해 살펴볼 것이다. 구현체마다 세부적인 방식은 다를 수도 있지만 큰 줄기는 거의 같다.</p><p>비트코인의 블록 하나에는 평균 약 1,800개의 거래 정보가 포함될 수 있으며, 블록 하나의 물리적인 크기는 평균 0.98Mbyte이다(출처: <a href="https://blockchain.info/charts)" target="_blank" rel="noopener">https://blockchain.info/charts)</a>. 블록은 블록 헤더와 거래 정보, 기타 정보로 구성된다.</p><ul><li>블록 헤더는 <code>version</code>, <code>previousblockhash</code>, <code>merklehash</code>, <code>time</code>, <code>bits</code>, <code>nonce</code> 이렇게 6개의 정보로 구성된다.</li><li>거래 정보는 입출금과 관련한 여러가지 정보를 가지고 있다.</li><li>기타 정보는 블록 내에 있는 정보 중에서 블록 헤더와 거래 정보에 해당하지 않는 정보를 말하며, 블록 해쉬 계산에 사용되지 않는다.</li></ul><p>이 중에서 블록 체인의 메커니즘을 이해하는 데 중요한 열쇠가 되는 정보는 <strong>블록 헤더</strong>다.</p><h3 id="블록-헤더"><a href="#블록-헤더" class="headerlink" title="블록 헤더"></a>블록 헤더</h3><p>블록 헤더는 다음의 6가지 정보로 구성된다.</p><ol><li>version : 소프트웨어/프로토콜 버전</li><li>previousblockhash : 블록 체인에서 바로 앞에 위치하는 블록의 블록 해쉬</li><li>merklehash : 개별 거래 정보의 거래 해쉬를 2진 트리 형태로 구성할 때, 트리 루트에 위치하는 해쉬값</li><li>time : 블록이 생성된 시간</li><li>bits : 난이도 조절용 수치</li><li>nonce : 최초 0에서 시작하여 조건을 만족하는 해쉬값을 찾아낼때까지의 1씩 증가하는 계산 회수</li></ol><p>블록 헤더가 중요한 이유는 <strong>블록의 식별자 역할을 하는 블록 해쉬가 이 블록 헤더의 6가지 정보를 입력값으로 해서 구해지기 때문</strong>이다.</p><h3 id="블록-해쉬"><a href="#블록-해쉬" class="headerlink" title="블록 해쉬"></a>블록 해쉬</h3><p>블록의 식별자 역할을 하는 <strong>블록 해쉬는 6가지의 블록 헤더 정보를 입력값으로 하고, 여기에 SHA256 해쉬 함수를 적용해서 계산되는 값</strong>으로, 32바이트의 숫자값이다. <strong>이름은 블록 해쉬이지만 그 값은 블록 전체를 해쉬한 값이 아니라, 블록 헤더를 해쉬한 값</strong>이다.</p><p>지금까지의 내용을 바탕으로 블록 해쉬를 구하는 과정을 그림으로 나타내면 다음과 같다.</p><p><img src="http://i.imgur.com/KFtqafZ.png" alt="Imgur"></p><p>개별 거래 정보는 결국 머클 트리의 해쉬값인 <code>merklehash</code> 값으로 집약된다. 블록 헤더의 6가지 정보 중에서 <code>version</code>, <code>previousblockhash</code>, <code>merklehash</code>, <code>time</code>, <code>bits</code> 이렇게 5가지는 블록 해쉬를 만드는 시점에서 이미 확정되어 변하지 않는 값이다. 하지만 마지막 <code>nonce</code>는 확정되어 있지 않고 새로 구해야 하는 값이다. <strong>이 <code>nonce</code> 값을 구해서 최종적으로 블록 해쉬 값을 구하고, 이 블록 해쉬값을 식별자로 가지는 유효한 블록을 만들어내는 것이 바로 작업 증명(Proof of Work), 흔히 말하는 채굴</strong>이다.</p><p>작업 증명에 대해 알아보기 전에, 이제 블록이 무엇인지 기술적인 수준에서 알게 되었으니 블록이 이어져서 만들어지는 블록 체인도 기술적인 관점에서 정리해보자.</p><h2 id="블록-체인이란"><a href="#블록-체인이란" class="headerlink" title="블록 체인이란?"></a>블록 체인이란?</h2><p>블록 체인은 앞에서는 거대한 분산 공개 장부라고 했는데, 기술적으로는 <strong>블록이 이어져서 만들어진 블록의 집합체</strong>라고 말할 수 있다.</p><p>블록들은 어떻게 이어져 있는걸까? 앞에서 살펴본 블록 헤더의 6가지 정보 중의 하나인 <code>previousblockhash</code> 값은 현재 생성하고 있는 블록 바로 이전에 만들어진 블록의 블록 해쉬값이다. 블록은 바로 앞의 블록 해쉬 값을 포함하는 방식으로 앞의 블록과 이어지게 된다. </p><p><img src="http://i.imgur.com/IHS979r.png" alt="Imgur"></p><p>어디서 많이 본 자료 구조 아닌가? 그렇다. <strong>블록 체인은 사실 링크드 리스트</strong>다.</p><blockquote><p>블록 체인은 블록으로 이루어진 링크드 리스트다.</p></blockquote><p>블록 체인을 기술적인 측면에서도 살펴봤으니 이제 그 내부로 조금 더 깊게 들어가보자.</p><h2 id="블록-체인의-첫번째-핵심-작업-증명"><a href="#블록-체인의-첫번째-핵심-작업-증명" class="headerlink" title="블록 체인의 첫번째 핵심 - 작업 증명"></a>블록 체인의 첫번째 핵심 - 작업 증명</h2><p>자료 구조 관점에서는 링크드 리스트일 뿐인 블록 체인이 신뢰의 원천이 될 수 있는 첫번째 핵심 요소는 <strong>작업 증명(Proof of Work)</strong>이다.</p><p>앞에서 <code>nonce</code>값을 구해서 최종적으로 블록 해쉬값을 구하고, 이 블록 해쉬값을 식별자로 가지는 유효한 블록을 만들어내는 것이 작업 증명이라고 했다. 결국 <code>nonce</code> 값을 구하는 것이 작업 증명의 핵심이다. <code>nonce</code>값을 구하는 방법을 알아보기 전에 먼저 <code>nonce</code>값이란 어떤 값을 의미하는 지 알아야 한다.</p><blockquote><p><code>nonce</code>값은, 이 <code>nonce</code>값을 입력값 중의 하나로 해서 계산되는 블록 해쉬값이 특정 숫자보다 작아지게 하는 값을 말한다.</p></blockquote><p>그럼 이 <code>nonce</code>값은 어떻게 구할 수 있을까? 위의 설명에서 맨 마지막 부분을 떼어보면 <strong>해쉬값이 특정 숫자보다 작아지게 하는 값</strong>이라고 한다. 해쉬 함수의 특성상, 어떤 해쉬값(A라고 하면)을 결과로 나오게 하는 입력값을 찾으려면, A에서 역산을 하는 방식으로는 찾을 수 없고, 결과가 A가 될 때까지 무작위로 입력값을 계속 바꿔가면서 해쉬값을 계산해보면서 찾아낼 수 밖에 없다. </p><p>그렇다면 어떤 블록 해쉬값이 어떤 특정 숫자보다 작아지게 하려면, 블록 해쉬의 입력값을 계속 바꿔가면서 구한 해쉬값이 특정 숫자보다 낮은지 비교하는 작업을 계속 반복하는 수 밖에 없다. </p><p>블록 해쉬의 입력값은 블록 헤더고, 블록 헤더에는 6가지 정보가 담겨 있으며, 이 중에서 5가지는 값이 고정되어 변경할 수 없고, 오직 <code>nonce</code>만 값을 바꿀 수 있다. </p><p>즉, 이 <code>nonce</code>값을 계속 바꿔가면서 계산한 해쉬값이 어떤 특정 숫자보다 작다면, 그 때의 <code>nonce</code>값이 새로 만들어지는 블록의 <code>nonce</code>값으로 확정되고, 특정 숫자 보다 작게 나온 그 해쉬값이 새로 생성되는 블록의 블록 해쉬값으로 최종 확정되며 작업 증명이 끝나게 된다. </p><p>이 과정을 그림과 함께 살펴보자. 아래 그림은 블록해쉬가 <code>000000a84...</code>라는 특정값보다 작게 나오게 하는 <code>nonce</code>값을 구하는 과정을 나타내고 있다.</p><p><img src="http://i.imgur.com/caPbxeH.png" alt="Imgur"></p><p>앞에서 설명한 대로 <code>nonce</code> 외의 모든 항목의 값은 이미 정해져 있다.</p><p><code>nonce</code> 값이 0 일 때의 해쉬를 구해보니 <code>000000a84...</code>보다 큰 <code>fa8cbaeed...</code> 가 나와서 작업 증명에 실패 했다.</p><p>다시 <code>nonce</code>가 1 일 때의 해쉬를 구해보니 <code>932d16e2e...</code> 가 나와서 또 실패.. <code>nonce</code>가 2 일 때의 해쉬, 3 일 때의 해쉬.. 를 계속 반복해서 구하고 실패하다가, <code>nonce</code>가 82,764,351 일 때의 해쉬를 구해보니 드디어 <code>000000a84...</code> 보다 작은 <code>000000a83...</code>이 나와서 작업 증명에 성공했다.</p><p>그렇다면 작업 증명 성공 여부의 기준이 되는  <code>000000a84...</code>라는 값은 어떻게 정해지나? 그 값은 작업 난이도에 의해 결정되는데 이 부분은 핵심은 아니므로 그보다 더 중요한 보상에 대해 알아보자.</p><h3 id="보상"><a href="#보상" class="headerlink" title="보상"></a>보상</h3><p>이렇게 <code>nonce</code> 값을 구하는 채굴 작업에는 엄청나게 많은 횟수의 해쉬 계산이 필요하며 그런 계산을 수행하는 채굴기와 그 채굴기를 돌릴 수 있는 막대한 양의 전기라는 비용이 든다. 그래서 이런 비용에 대한 보상이 없다면 아무도 채굴을 하지 않을 것이다. </p><p>비트코인에서의 <strong>보상은 새로 발행되는 비트코인과 해당 블록에 포함되는 거래의 거래 수수료의 합</strong>이다. 비트코인의 새로운 발행은, 채굴자가 블록을 처음 구성할 때 채굴자의 지갑으로 일정량의 비트코인이 입금되는 거래를 그 블록의 첫 거래(generation transaction)로 추가하는 방식으로 이루어진다. </p><p><img src="http://i.imgur.com/djOnK4M.png" alt="Imgur"></p><p>새로 발행되는 비트코인은 최초에 50BTC에서 시작해서 블록 체인에 21만개의 블록이 추가될 때마다 절반으로 줄어들어 2017년 7월 현재는 블록 당 12.5BTC가 새로 발행되며, 보상의 일부로서 채굴자에게 주어진다.</p><p>거래 수수료는 각 거래 당사자끼리 자율적으로 정할 수 있고, 거래가 블록에 추가되는 우선 순위를 결정하는데 거래 수수료가 입력값으로 사용되기도 한다.</p><blockquote><p>보상은 <code>nonce</code> 값을 찾아내고, 그 결과 새로운 블록을 블록 체인에 추가해서, </p><p>해당 블록에 포함된 모든 거래를 유효한 거래로 확정시켜준 대가라고 할 수 있다.</p></blockquote><h2 id="블록-체인의-두번째-핵심-충돌-해소"><a href="#블록-체인의-두번째-핵심-충돌-해소" class="headerlink" title="블록 체인의 두번째 핵심 - 충돌 해소"></a>블록 체인의 두번째 핵심 - 충돌 해소</h2><p>블록 체인의 첫번째 핵심은 작업 증명이며, 이는 블록 단위에서 처리되는 일이다. 블록 체인의 두번째 핵심은 <strong>충돌 해소</strong>인데, 이는 블록 단위가 아니라 블록 체인 단위에서 처리되는 일이다. 어떤 충돌을 의미하는 것인지 또 왜 해소시켜야 하는지 알려면 블록 체인을 분산 환경에서 바라볼 필요가 있다.</p><h3 id="거래-정보의-전파"><a href="#거래-정보의-전파" class="headerlink" title="거래 정보의 전파"></a>거래 정보의 전파</h3><p>앞에서 블록 체인은 거대한 분산 공개 장부라고 했다. 이 <strong>분산 공개 장부는 여러 개의 노드에 복사</strong>되어 있으며, <strong>여러 개의 노드는 p2p로 연결되어 블록 체인 네트워크를 형성</strong>한다. 그리고 하나의 거래 정보가 발생하면 이 거래 정보는 블록 체인 네트워크에 분산되어 있는 수많은 노드에 전파되어야 한다.</p><p>다음 그림과 같이 사용자 F가 지갑 앱에서 C에게 수수료 0.001BTC와 함께 1.6BTC를 보내면, 지갑 앱은 블록 체인 네트워크 상의 노드 A에 거래 정보를 전송한다. </p><p><strong>거래 정보를 받은 노드 A는 먼저 해당 거래의 유효성을 검증한 후에 그 거래를 아직 블록 생성 작업이 시작되지 않은 후보 블록에 추가하고, 인접한 다른 노드에 그 거래 정보를 전파</strong>한다. </p><p>거래 정보를 전파받은 노드 B도 마찬가지 방식으로 블록 체인 네트워크 상의 다른 노드에게 거래 정보를 전파하며, 이 거래는 결국 블록 체인 네트워크 전체 노드에 전파된다.</p><p><img src="http://i.imgur.com/QPLJbWM.png" alt="Imgur"></p><h3 id="블록의-생성-및-전파"><a href="#블록의-생성-및-전파" class="headerlink" title="블록의 생성 및 전파"></a>블록의 생성 및 전파</h3><p>블록에 거래 정보가 채워지면 노드는 블록을 생성한다. 이때 캐나다에 있던 노드와 호주에 있던 노드는 상당히 멀리 떨어져 있으므로, 각 블록에 담겨 있는 거래의 내용과 순서는 아래와 같이 서로 다를 수 있다.</p><p><img src="http://i.imgur.com/AraOlPF.png" alt="Imgur"></p><p>새로 만들어질 블록은 다음 그림(출처: Mastering Bitcoin - <a href="http://chimera.labs.oreilly.com/books/1234000001802/ch08.html#forks" target="_blank" rel="noopener">http://chimera.labs.oreilly.com/books/1234000001802/ch08.html#forks</a>) 과 같이 현재 마지막 블록인 파랑블록(P블록)의 다음에 추가될 예정이다.</p><p><img src="https://i.imgur.com/Tfn6Gu7.png" alt="Imgur"></p><p>이 때 캐나다의 노드와 호주의 노드가 거의 동시에 <code>nonce</code> 값을 찾아서 블록을 성공적으로 생성했다. 캐나다의 노드가 생성한 블록을 빨강블록(A블록)이라 하고, 호주의 노드가 생성한 블록을 초록블록(B블록)이라하면, 생성 후 전파 과정은 다음 그림(출처: Mastering Bitcoin - <a href="http://chimera.labs.oreilly.com/books/1234000001802/ch08.html#forks" target="_blank" rel="noopener">http://chimera.labs.oreilly.com/books/1234000001802/ch08.html#forks</a>) 과 같다.</p><p><img src="https://i.imgur.com/6ceiHDs.png" alt="Imgur"></p><p>캐나다 노드의 <strong>인접 노드에서는 전달받은 빨강블록의 블록 해쉬를 다시 계산해서 그 값이 정말로 특정한 숫자보다 작은 올바른 값인지 검증한 후에, 자신이 가지고 있던 파랑블록에 빨강블록을 추가</strong>한다. </p><p>호주 노드에 인접한 노드에서도 마찬가지 방식으로 기존의 파랑노드에 초록노드가 추가된다. 이 방식이 계속되면서 빨강블록과 초록블록은 전 세계에 분산되어 있는 노드에 전파된다.</p><h3 id="블록-체인의-분기"><a href="#블록-체인의-분기" class="headerlink" title="블록 체인의 분기"></a>블록 체인의 분기</h3><p>포르투갈에 있는 노드에는 빨강블록이 먼저 전파된 후에 초록블록이 전파파되었다. 포르투갈 노드에서는 늦게 도착한 초록블록은 무시된다. </p><p>러시아에 있는 노드도 나름 열심히 <code>nonce</code> 값을 구하고 있었으나, 구하기 전에 아쉽게도 초록블록을 먼저 전달받아서 초록블록을 검증한 후 파랑블록 다음에 초록블록을 추가했다. 초록블록에 이을 새로운 블록의 <code>nonce</code>값을 구하기 시작하고, 잠시 후 빨강블록을 전달받았다. 늦게 도착한 빨강블록은 러시아 노드에서는 무시된다. </p><p>이번에는 러시아 노드가 가장 먼저 <code>nonce</code> 값을 구해서 새로 분홍블록(X블록)을 생성하고 초록블록 다음에 분홍블록을 추가한 후에 다음 그림(출처: Mastering Bitcoin - <a href="http://chimera.labs.oreilly.com/books/1234000001802/ch08.html#forks" target="_blank" rel="noopener">http://chimera.labs.oreilly.com/books/1234000001802/ch08.html#forks</a>) 과 같이 인접 노드에 전파했다. </p><p><img src="https://i.imgur.com/VCQiHbJ.png" alt="Imgur"></p><p>포르투갈에 있던 노드에는 파랑블록 다음에 빨강블록이 추가되어 있는 상태였는데, 파랑블록, 초록블록에 이어진 새로운 분홍블록을 전달받았다. 포르투갈에 있던 노드에는 다음과 같이 블록 체인의 분기가 발생한다.</p><p><img src="http://i.imgur.com/GOSBL5l.png" alt="Imgur"></p><p>빨강블록과 초록블록의 내용은 서로 다르다. 블록 체인은 신뢰의 원천이 되는 체계라고 했는데, 이렇게 정보가 갈라지는 체계를 믿을 수 있는걸까?</p><h3 id="어느-블록-체인을-믿을-것인가"><a href="#어느-블록-체인을-믿을-것인가" class="headerlink" title="어느 블록 체인을 믿을 것인가?"></a>어느 블록 체인을 믿을 것인가?</h3><p>블록 체인에서는 이렇게 분기가 발생해서 충돌이 일어날 때 어느 블록 체인을 믿을 것인가에 대한 기준이 마련되어 있다. 그렇지 않으면 분산되어 있는 장부 내용의 동기화가 깨지기 때문이다. 그 기준은 다음과 같다. </p><blockquote><p>블록 체인에 분기가 발생하여 충돌하게 될 때는 더 많은 작업 증명이 수행되어 길이가 더 긴 블록을 선택한다.</p></blockquote><p>그래서 포르투갈 노드에 더 긴 블록 체인을 가진 분홍블록이 전파되는 순간, 빨강블록은 파랑블록에서의 연결이 끊어지고 고아가 된다. </p><p><img src="https://i.imgur.com/7fF9iu6.jpg" alt="Imgur"></p><p><strong>블록 생성은 평균 10분이 소요될 정도로 연산량이 큰 작업이며, 따라서 앞에서 발생한 것처럼 A블록과 B블록이 거의 동시에 생성되어 분기가 발생할 가능성은 그리 높지 않다</strong>. 그리고 <strong>길이가 같은 블록 체인이 충돌하더라도 머지 않아 블록 체인의 길이가 달라져서 분기에 의한 충돌이 해소되는 순간이 금방 다가온다</strong>. </p><p>아래의 그림은 길이가 긴 블록 체인에 의해 고아가 되는 블록의 수를 나타내는데, 최근 1년간 대부분 2개 이하, 최대 3개 이내에서 블록 체인의 분기에 의한 충돌이 해소됨을 알 수 있다.</p><p><img src="http://i.imgur.com/9KGZ5oK.png" alt="Imgur"></p><p>하지만 일시적으로나마 이런 분기 상태가 발생할 수 있기 때문에, 실제 거래 상황에서는 보통 어떤 거래가 포함된 블록 이후로 3-5개의 블록이 더 추가된 후에야 그 거래를 최종적으로 유효한 것으로 확정한다. 일시적으로 분기가 발생하더라도 그 이후로 3-5개의 블록이 추가되는 과정에서 분기 상태가 해소되고 결국 하나의 블록 체인만 남기 때문이다.</p><h3 id="고아가-된-A블록에-있던-거래-중-유실되는-거래가-생기지-않을까"><a href="#고아가-된-A블록에-있던-거래-중-유실되는-거래가-생기지-않을까" class="headerlink" title="고아가 된 A블록에 있던 거래 중 유실되는 거래가 생기지 않을까?"></a>고아가 된 A블록에 있던 거래 중 유실되는 거래가 생기지 않을까?</h3><p>빨강블록에 있던 거래 중에서 초록블록에 포함되지 않았던 거래T가 있을 수 있다. 그럼 빨강블록이 고아가 되면 거래T는 결국 유실되는 것이 아닐까하는 의문이 들 수 있다. </p><p>하지만 <strong>유실은 발생하지 않는다</strong>. <strong>거래T는 초록블록에는 포함되지 않았더라도 분홍블록 또는 분홍블록 이후의 블록에 결국에는 포함되게 된다</strong>. 왜냐하면, 분홍블록은 초록블록을 부모로 해서 생성되는데 거래T가 초록블록에 포함되지 않았으므로, 초록블록에 이어 생성되는 분홍블록 또는 분홍블록 이후의 블록에서는 거래T를 아직 블록 체인에 포함되지 않은 다른 거래들과 마찬가지로 취급하며 블록에 추가하기 떄문이다.</p><h3 id="이중-지불-문제"><a href="#이중-지불-문제" class="headerlink" title="이중 지불 문제"></a>이중 지불 문제</h3><p>디지털은 복사가 가능하므로 이중 지불이라는 문제가 항상 따라다닌다. 블록 체인도 예외는 아니다. 예외는 아닌 정도가 아니라 수많은 노드에 복제되는 방식이므로 이중 지불 문제가 반드시 생길 것 같다.</p><p>일단 동일한 기기에 담긴 지갑에서는 이중 지불을 할 수 없다. 예를 들어 하나의 기기에 설치되어 있는 지갑의 잔액이 5만원일 때, 이 지갑에서 5만원을 지불하는 순간 잔액이 0이 되고, 다시 5만원을 지불할 수 없기 때문이다.</p><p>그래서 이중 지불은 보통 물리적으로 떨어진 두 개의 지점에서 생각해 볼 수 있는 문제다. 장부가 복제되어 있으므로 캐나다에서도 내 잔액은 5만원이고, 호주에서도 내 잔액은 5만원이다. 그럼 캐나다에서도 A에게 5만원을 보내고, 이 거래가 아직 도달하지 않은 호주에서도 B에게 5만원을 보내면 어떻게 될까?</p><p>시작할 때는 멀리 떨어진 두 곳에서 이중 지불이 실행 되었지만, 두 거래는 블록 체인 네트워크를 타고 전파되다가 어디에선가 반드시 만나게 되어있다. 그 만나는 지점에서는 두 거래 사이에 반드시 선후 관계가 생긴다. 그 지점에 먼저 도달한 거래는 유효한 거래로 인정되지만 늦게 도달한 거래는 이미 잔액이 0인 상태에서 5만원을 보내게 되므로 무효한 거래로 버려지게 된다.</p><p>따라서 이중 지불된 거래 중 하나는 결국에는 무효화되는 방식으로 이중 지불 문제가 해결된다.</p><h2 id="블록-체인의-세번째-핵심-완료된-거래-정보의-변경-불가"><a href="#블록-체인의-세번째-핵심-완료된-거래-정보의-변경-불가" class="headerlink" title="블록 체인의 세번째 핵심 - 완료된 거래 정보의 변경 불가"></a>블록 체인의 세번째 핵심 - 완료된 거래 정보의 변경 불가</h2><p>거래 정보의 해쉬값은 해당 거래가 포함된 블록의 <code>merklehash</code> 계산에 입력값으로 사용되고, <code>merklehash</code>는 블록 해쉬의 계산에 입력값으로 사용된다. 블록 해쉬는 다음 블록(M이라 하면)의 <code>previousblockhash</code> 값으로 저장되며, 이 <code>previousblockhash</code>은 M블록의 블록 헤더 정보로서, M블록의 블록 해쉬를 계산하는데 입력값으로 사용된다.</p><p><img src="https://i.imgur.com/Dtzjz6F.png" alt="Imgur"></p><p>따라서, 어떤 거래 정보가 변경되면 그 거래 정보가 포함된 머클트리의 <code>merklehash</code>가 변경되고, <code>merklehash</code>가 변경되면 블록 해쉬가 변경된다. </p><p>그러면 아래 그림에서 빨간색 밑줄로 표시한 변경된 블록 #1의 블록 해쉬와 그 다음 블록인 블록 #2의 블록 헤더에 <code>previousblockhash</code>로 저장된 값이 달라지게 된다. 따라서 체인을 유지하려면 블록 #2의 <code>previousblockhash</code> 값을 갱신한 후에 블록 #2의 <code>nonce</code> 값을 다시 구해서 블록 해쉬를 새로 구해야 하고, 연이어 블록 #3, #4의 블록 해쉬도 모두 새로 계산해야 한다. </p><p><img src="https://i.imgur.com/3SUjFxR.png" alt="Imgur"></p><p>그리고 블록 해쉬는 작업 증명의 해답(<code>nonce</code> 값)을 찾아내야 구할 수 있으므로, <strong>거래 정보를 변경한 블록부터 그 이후의 모든 블록을 순서대로 다시 채굴해야 한다</strong>.</p><p>블록 하나 채굴하는데 평균 10분이 소요되므로 어떤 악의적인 노드가 바로 앞의 블록의 거래 정보를 변경하고 채굴하는 그 10분 동안, 다른 선의의 노드들은 거래 정보가 변경되지 않은 원래의 블록체인에 계속 블록을 이어 나가게 된다. 그래서 그 <strong>10분 후에는 악의적인 노드의 블록 체인의 길이는 다른 선의의 노드들이 보유한 블록 체인의 길이보다 1개 더 짧아지게 되고, 두 블록 체인이 만나게 되는 순간 길이가 짧은 블록 체인은 버려지게 된다</strong>.</p><blockquote><p>완료된 거래 정보를 변경하려면,</p><p>변경하려는 거래 정보가 포함된 블록부터 그 이후의 모든 블록을 순서대로 다시 채굴해서 새로운 블록 체인(A)를 만들어야 하는데,</p><p>그동안에도 변경 되지 않은 원래의 블록 체인에는 다른 노드들에 의해 블록이 계속 추가되고 A보다 길이가 길어지게 되므로,</p><p>A는 폐기되며 완료된 거래 정보의 변경은 실패하게 된다.</p></blockquote><p>그런데 악의적인 노드가 다른 노드들보다 연산 능력이 훨씬 뛰어나다고 가정해보자. </p><p>그렇다면 악의적인 노드에 있는 블록 체인에 블록이 추가되는 속도가 다른 블록 체인에 블록이 추가되는 속도보다 더 빠를 것이고, 언젠가는 악의적인 노드의 블록 체인의 길이가 가장 길어지게 된다. 이렇게 되는 순간 악의적인 노드에 의해 변경된 거래 정보가 유효한 거래 정보로서 전체 블록 체인 네트워크에 퍼지게 되며 과거 거래 정보의 변경이 성공하게 된다. 이를 <strong>51% 공격</strong>이라고 한다.</p><p>하지만 경제적인 관점에서 생각해보면 이런 일이 발생할 가능성은 사실상 없다. 일단, 거래 정보가 변경될 수 있다는 사실이 알려지는 순간 블록 체인의 신뢰는 깨지게 된다. </p><p><strong>만약 악의적인 노드가 오랫동안 가장 큰 연산 능력을 가지고 있었다면, 악의적인 노드가 생성한 블록이 많을 것이고 그에 따른 보상액도 많이 보유하고 있을 것이다. 이런 상황에서 블록 체인의 신뢰가 붕괴되면 큰 피해를 보는 쪽은 악의적인 노드 자신</strong>이기 떄문에 거래 정보를 변경할 경제적 동기가 없다. </p><p><strong>악의적인 노드가 갑자기 많은 연산 능력을 가지게 되었다고 해도, 블록 체인의 신뢰 붕괴로 가치가 사라진 블록을 채굴해봤자 앞으로 가져갈 수 있는 경제적 이익은 없다</strong>. 따라서, <strong>경제적으로 이익을 볼 수 없는 거래 정보의 변경은 사실상 발생하지 않게 된다</strong>.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>지금까지 블록 체인이 어떻게 비트 코인이라는 암호화 화폐의 신뢰의 원천이 될 수 있는가라는 물음에 대한 답을 찾아봤다. 정리해보면 다음과 같다.</p><blockquote><p>블록 체인은 </p><ul><li>거대한 분산 공개 장부이며, 그 장부 안에 포함된 개별 거래는 모두 디지털 서명이 붙어 있어서 은행이나 다른 제3자의 개입이 없어도 진본임을 보증할 수 있다.</li><li>수천, 수만노드에 분산 되어 있어서 어느 한 지점에 장애나 공격이 발생하더라도 블록 체인이라는 네트워크 전체는 문제 없이 계속 돌아갈 수 있다.</li><li>작업 증명이라는 수학적 계산 작업과 경제 관점에서의 논리를 통해 위/변조가 사실상 불가능한 구조를 갖게 되어, 그 안에 기록된 거래들은 은행같은 중앙의 보증 기관이 없이도 신뢰할 수 있는 거래로서 확정될 수 있다.</li><li>분산 환경에 전파되는 과정에서 분기가 발생할 수 있으나, 가장 길이가 긴 블록 체인을 유효한 블록 체인으로 선택한다. </li></ul></blockquote><p>블록 체인에도 여러 가지 도전적인 과제들이 있고, 그중에서 가장 중요한 것은 블록 체인의 확장성 문제다. 여기에서 그런 내용을 모두 다룰 수는 없겠지만, 지금까지 펼쳐놓은 이야기가 앞으로 블록 체인에 대한 자료를 접할 때 이해의 폭을 넓혀줄 수 있는 발판이 되어줄 수 있기를 바란다.</p><p>블록 체인은 거래 당사자간의 신뢰 확보를 위해 중앙 기관을 필요로 하지 않는 탈중앙화(Decentralization)를 달성한 최초의 소프트웨어 기술이다. </p><p>비트코인은 화폐에 한정되어 있지만 이더리움이나 최근 개발되고 있는 EOS나 IOTA, 국내에서 개발되는 BlockchainOS 등은 단순한 화폐를 넘어서 블록 체인 위에서 당사자간의 계약을 프로그램으로 실행시킬 수 있는 탈중앙화 플랫폼을 지향하고 있다. </p><p><strong>블록 체인이 세상을 바꿀 수 있는 기술이라고 평가받는 이유도 이처럼 탈중앙화 플랫폼의 바탕이 되기 때문</strong>이다. </p><p>좀더 나은 세상을 만드는데 기여할 수 있는 기회의 문이 천천히 하지만 분명히 열리고 있다.</p><h2 id="FAQ로-정리해보는-블록-체인"><a href="#FAQ로-정리해보는-블록-체인" class="headerlink" title="FAQ로 정리해보는 블록 체인"></a>FAQ로 정리해보는 블록 체인</h2><h3 id="블록을-생성하는데-성공한-단-한-명의-채굴자만-보상을-받는건가"><a href="#블록을-생성하는데-성공한-단-한-명의-채굴자만-보상을-받는건가" class="headerlink" title="블록을 생성하는데 성공한 단 한 명의 채굴자만 보상을 받는건가?"></a>블록을 생성하는데 성공한 단 한 명의 채굴자만 보상을 받는건가?</h3><p>그렇다. 그래서 이론적으로는 평생 채굴기를 돌려도 단 하나의 블록도 생성하지 못할 수도 있다. 그래서 실제로는 채굴 풀(pool)을 형성해서 <code>nonce</code> 값을 찾는 계산 작업을 분담하고, 해당 풀에서 블록이 생성되면 풀에 참가한 채굴자들끼리 각자의 배분 기준에 의해 보상액을 배분 받는 방식으로 채굴 시장이 운영된다.</p><h3 id="작업-난이도는-무엇인가"><a href="#작업-난이도는-무엇인가" class="headerlink" title="작업 난이도는 무엇인가?"></a>작업 난이도는 무엇인가?</h3><p>블록 해쉬가 특정 숫자보다 낮게 나올 때의 <code>nonce</code> 값을 찾아내는 것이 작업 증명이라고 했다. <strong>작업 난이도는 <code>nonce</code> 값 계산의 어려운 정도</strong>를 나타낸다. 작업 난이도는 블록 헤더 정보에서 <code>bits</code>라는 값으로 조절된다.</p><p>앞에서 블록 해쉬는 32바이트의 숫자라고 했는데, 이해를 쉽게 하기 위해 블록 해쉬를 부호 없는 1바이트의 숫자라고 해보자. 그럼 1바이트의 숫자값을 블록 해쉬값으로 산출하는 해쉬 함수는 0 ~ 255 사이의 값을 결과로 산출한다.</p><p>블록 해쉬가 128보다 작아야 한다고 하면, 0 ~ 255 사이의 값을 산출하는 해쉬 함수를 적용해서 128보다 작은 블록 해쉬값이 나올 확률은 <code>128보다 작은 수(0~127)의 개수 = 128</code>/<code>해쉬 함수가 산출할 수 있는 모든 값(0~255)의 개수 = 256</code>, 즉, <code>128/256</code>이므로, 50%의 확률이다.</p><p>블록 해쉬가 64보다 작아야 한다면 64/256, 즉 25%의 확률로 <code>nonce</code> 값을 구할 수 있다. 블록 해쉬가 32보다 작아야 한다면 확률은 12.5%로 줄어든다. 여기서 128, 64, 32라는 특정 숫자가 바로 블록 헤더 정보의 <code>bits</code>이다.</p><p>실제로 <code>bits</code>의 값이 128, 256 이런 식으로 저장되지는 않고, 지수와 계수를 사용하는 별도의 표현 방식이 있다.</p><p>난이도는 2,160개의 블록이 생성되는데 소요되는 시간이 평균 시간인 21,600분(10분/블록 * 2,160블록)보다 오래 걸리면 낮아지고, 적게 걸리면 높아지는 방식으로, 대략 21,600분을 주기로 전체적으로 평균 10분이 소요되는 하나의 난이도가 전체에 적용된다. 따라서 채굴자가 늘어나서 블록을 생성하는데 소요되는 시간이 줄어들게 되면, 정해진 주기에 따라 난이도가 높아져서 결국에는 평균적으로 10분이 소요되게 된다.</p><blockquote><p>블록 헤더의 <code>bits</code>는 <code>nonce</code> 값을 계산하는데 기준이 되는 특정 숫자를 나타내며,</p><p>블록체인 전체에 걸쳐 일률적으로 적용되는 숫자다.</p></blockquote><h3 id="비트코인-지갑에도-블록-체인의-모든-거래-정보가-저장되나"><a href="#비트코인-지갑에도-블록-체인의-모든-거래-정보가-저장되나" class="headerlink" title="비트코인 지갑에도 블록 체인의 모든 거래 정보가 저장되나?"></a>비트코인 지갑에도 블록 체인의 모든 거래 정보가 저장되나?</h3><p>비트코인 지갑은 송수금 거래를 가능하게 해주는 클라이언트 소프트웨어이며, 거래 정보를 블록 체인 네트워크에 전파해야 하므로 블록 체인 네트워크의 노드이기도 하다. 하지만, 지갑은 작업 증명 계산을 하지 않기 때문에 블록 체인의 모든 거래 정보를 저장할 필요가 없고, 저장하지도 않는다. 블록 체인 네트워크에 참여하는 노드는 여러 종류가 있으며, 지갑에는 블록 체인의 전체 거래 정보가 저장되지는 않는다.</p><h3 id="채굴-보상이-줄어든다면-채굴에-의해-유지되는-블록-체인이-지속될-수-있나"><a href="#채굴-보상이-줄어든다면-채굴에-의해-유지되는-블록-체인이-지속될-수-있나" class="headerlink" title="채굴 보상이 줄어든다면 채굴에 의해 유지되는 블록 체인이 지속될 수 있나?"></a>채굴 보상이 줄어든다면 채굴에 의해 유지되는 블록 체인이 지속될 수 있나?</h3><p>비트코인을 예로 들면 채굴 보상은 비트코인으로 지급되며, 지급되는 양은 비트코인 기준으로는 줄어들지만 비트코인 자체의 가치가 늘어난다면 보상 자체가 줄어드는 것은 아니다. 몇 년전에 채굴 보상이 50BTC 이고 현재 보상이 12.5BTC로 1/4로 줄었다고 하더라도, 비트코인 자체의 가치는 4배가 훨씬 넘게 증가했기 때문에 실질 보상액은 오히려 늘어났다고 볼 수 있다. </p><p>이처럼 디플레이션 화폐라는 비트코인의 특징은 비트코인의 가격을 높이는 중요한 요인이기도 하다. 하지만 신규 발행 비트코인이 0이 되는 시점(약 2100년 이후)에는 어떤 모습일까? 결국 남는 보상은 수수료뿐이므로 수수료를 극대화 하거나 소요 비용을 낮추는 쪽으로 흘러갈 것이다.</p><p>결국 블록 사이즈를 키워서 블록 안에 더 많은 거래를 담아서 수수료 수입을 높이거나, 난이도를 낮춰서 채굴 비용을 낮추는 방식 또는 둘의 조합으로 전개될 가능성이 높다.</p><hr><blockquote><p>기부</p><ul><li>Bitcoin: 1QofbPJxE9b39SrhCLhCWGsBj8cv299qd</li><li>Ethereum: 0x4d8029ceace5ef7369843d2ee6c11ed39561bddc</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.imaso.co.kr/archives/248&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;마이크로소프트웨어 2017년 10월호&lt;/a&gt;에 기고한 ‘가볍게 읽어 보는 블록 체인 
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="비트코인" scheme="http://homoefficio.github.io/tags/%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/"/>
    
      <category term="FinTech" scheme="http://homoefficio.github.io/tags/FinTech/"/>
    
      <category term="핀테크" scheme="http://homoefficio.github.io/tags/%ED%95%80%ED%85%8C%ED%81%AC/"/>
    
      <category term="Cryptocurrency" scheme="http://homoefficio.github.io/tags/Cryptocurrency/"/>
    
      <category term="Consensus" scheme="http://homoefficio.github.io/tags/Consensus/"/>
    
      <category term="암호화폐" scheme="http://homoefficio.github.io/tags/%EC%95%94%ED%98%B8%ED%99%94%ED%8F%90/"/>
    
      <category term="Bitcoin" scheme="http://homoefficio.github.io/tags/Bitcoin/"/>
    
      <category term="합의 알고리듬" scheme="http://homoefficio.github.io/tags/%ED%95%A9%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EB%93%AC/"/>
    
  </entry>
  
  <entry>
    <title>(번역) IOTA-Transaction-Confirmation-Consensus</title>
    <link href="http://homoefficio.github.io/2017/11/19/IOTA-Transaction-Confirmation-Consensus/"/>
    <id>http://homoefficio.github.io/2017/11/19/IOTA-Transaction-Confirmation-Consensus/</id>
    <published>2017-11-19T03:52:18.000Z</published>
    <updated>2019-04-28T17:03:55.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IOTA Donations: QPLGOG9PMIMUAW9UDMUNZQHPXZPXDNGLBEIHILXHWHIOFHLIHPDDERXAJQKUQDEORMHSUWVZQE9JYSHIWADIIPAOJD</p></blockquote><blockquote><p>IOTA Donations for Korean version: RLNVZQOKBZRUNZUHDLNMW9XVRVTOBMNLZKXBW9PYMBCOGPCVAEMNUESFD9OGCZVILOACELXGXHIWSXWYCDMXXHNIUX</p></blockquote><h1 id="IOTA-트랜잭션-확정-및-합의"><a href="#IOTA-트랜잭션-확정-및-합의" class="headerlink" title="IOTA 트랜잭션, 확정 및 합의"></a>IOTA 트랜잭션, 확정 및 합의</h1><p>이 글은 <a href="https://github.com/noneymous/iota-consensus-presentation/blob/master/README.md" target="_blank" rel="noopener">https://github.com/noneymous/iota-consensus-presentation/blob/master/README.md</a> 를 원저자의 허락을 받고 번역한 글입니다.</p><h2 id="탱글-초기-상태"><a href="#탱글-초기-상태" class="headerlink" title="탱글 초기 상태"></a>탱글 초기 상태</h2><p><img src="https://i.imgur.com/xCzNwSB.png" alt="Imgur"></p><p>블록 체인 기술에서는 하나의 정적 블록이 여러 개의 트랜잭션을 담고 있고, 그런 정적 블록을 시간 순으로 정렬된 시퀀스로 구성합니다. IOTA는 블록 체인과 다르게 시간 순서로 된 정적 블록의 시퀀스를 만들지 않습니다. 대신에 하나의 트랜잭션이 다른 트랜잭션에 병렬적으로 추가될 수 있습니다. 이제부터 그림과 설명을 통해 IOTA에서 트랜잭션을 어떻게 추가하고 검증하며 합의를 이루는지 알아보겠습니다.</p><p>위의 그림에는 탱글(Tangle) 네트워크가 나와있습니다. 앞으로 나올 여러 시나리오는 이 그림을 바탕으로 진행됩니다. </p><p>초록색 네모는 네트워크에서 높은 신뢰도를 가진 확정된 트랜잭션을 나타내고, 파란색 네모는 부분적으로 확정된, 즉 낮은 신뢰도로 확정된 트랜잭션을 나타냅니다. 회색 네모는 아직 아무 검증도 받지 못한 트랜잭션을 나타냅니다. 노란색 네모는 방금 새로 생긴 트랜잭션을 나타냅니다. 나중에 나올 빨간색 네모는 충돌이 있거나 유효하지 않은 트랜잭션을 나타냅니다. 회색 네모나 노란색 네모처럼 아직 검증 받지 않은 트랜잭션을 팁이라고 합니다.</p><p>위의 그림에서 <code>α</code>는 비정상적인 트랜잭션 입니다. <code>α</code>는 <code>h</code>와 <code>l</code>를 참조하고 있는데, <code>α</code>는 자기가 추가될 때 팁이었던 <code>l</code>과 함께, 이미 <code>l</code>에 의해 참조되고 있으므로 명백하게 팁이 아닌 상태인 <code>h</code>를 참조하기 때문입니다. 비정상적이긴 하지만 문제가 되지는 않으며 현재 시점에서는 네트워크에서 그냥 용인됩니다.</p><h2 id="새-트랜잭션-추가"><a href="#새-트랜잭션-추가" class="headerlink" title="새 트랜잭션 추가"></a>새 트랜잭션 추가</h2><p><img src="https://i.imgur.com/VEhr0LW.png" alt="Imgur"></p><p>탱글 사용자가 새 트랜잭션 <code>1</code>을 추가하려면 <code>w</code>과 <code>x</code> 두 개의 팁을 무작위로 선택하고, 그 <code>w</code>과 <code>x</code>를 검증해야 합니다. 검증이란 팁의 시그너처, 작업 증명(스팸 방지를 위한 낮은 난이도의 작업 증명)을 검사하고, 팁이 직간접적으로 참조하는 과거의 트랜잭션과 충돌이 없는지 확인하는 것을 말합니다. 선택한 팁에 문제가 없다면 사용자는 그 두 개의 팁 <code>w</code>와 <code>x</code>를 참조하는 새 트랜잭션 <code>1</code>을 탱글에 추가합니다.</p><p>선택된 두 개의 팁 <code>w</code>와 <code>x</code>에 의해 직간접적으로 참조되지 않는 트랜잭션(회색 경계 밖에 있는 <code>l</code>, <code>o</code>, <code>r</code>, <code>t</code>, <code>v</code>, <code>y</code>, <code>z</code>)은 <code>1</code>이 탱글에 추가되는 과정에서는 검증되지 않습니다. 이 트랜잭션들은 나중에 다른 트랜잭션이 추가될 때 검증됩니다. </p><h2 id="다른-트랜잭션의-추가"><a href="#다른-트랜잭션의-추가" class="headerlink" title="다른 트랜잭션의 추가"></a>다른 트랜잭션의 추가</h2><p><img src="https://i.imgur.com/y9vIdMj.png" alt="Imgur"></p><p><code>1</code>이 추가됨과 거의 동시(직전이든 직후든 상관없음)에 다른 사용자가 새로운 트랜잭션 <code>2</code>를 <code>1</code>과는 다른 위치에 추가하려고 합니다. <code>2</code>는 두 개의 팁 <code>y</code>와 <code>z</code>를 선택해서 앞에서 설명한 것처럼 검증합니다. <code>1</code>에 의해 검증되었던 <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, <code>f</code>, <code>g</code>, <code>h</code>, <code>i</code>, <code>j</code>, <code>k</code>, <code>m</code>, <code>n</code>은 <code>2</code>에 의해서도 또 한 번 검증되고, <code>l</code>, <code>o</code>, <code>r</code>, <code>t</code>, <code>v</code>, <code>y</code>, <code>z</code>는 <code>2</code>에 의해 검증됩니다. </p><h2 id="탱글-상태의-변화"><a href="#탱글-상태의-변화" class="headerlink" title="탱글 상태의 변화"></a>탱글 상태의 변화</h2><p><img src="https://i.imgur.com/Byjez9N.png" alt="Imgur"></p><p><code>1</code>과 <code>2</code>에 의한 검증 경로를 겹쳐보면 위의 그림과 같습니다. 어떤 트랜잭션은 <code>1</code>이나 <code>2</code>중 한 쪽에 의해서만 확정되고, 어떤 트랜잭션은 <code>1</code>, <code>2</code> 모두에 의해 확정됩니다. 현재 시점에 존재하는 팁 모두에 의해 검증되고 확정된 트랜잭션들은 ‘완전 확정’되었다고 합니다. 그래서 <code>n</code>은 새롭게 전체 확정되어 탱글에서 더 깊숙히 들어가고 초록색 네모로 바뀝니다. <code>1</code> 또는 <code>2</code>에 추가되는 자손 트랜잭션들은 <code>n</code>을 계속해서 재검증하게 될 것입니다. </p><p>여기서 알 수 있는 것은?</p><ul><li><p>어떤 사용자도 모든 트랜잭션을 확인하고 검증할 필요는 없습니다. 모든 사용자는 2개의 트랜잭션과 그의 조상 트랜잭션을 선택하고 검증하면 됩니다. 이를 통해 탱글의 일부분을 검증하게 되겠죠. 다른 사용자들은 다른 팁과 조상 트랜잭션을 선택하고 검증할테고, 이 모두의 총합은 결국 탱글 전체를 검증하게 됩니다.</p></li><li><p>시간이 지나서 한 트랜잭션이 충분히 많은 검증을 받으면, 이 트랜잭션은 탱글에 새로 추가되는 모든 트랜잭션의 검증 경로에 직간접적으로 포함됩니다. 이런 트랜잭션은 완전히 검증되었다고 볼 수 있으며 새 트랜잭션이 추가될 때마다 계속 검증되고 확정될 것입니다. 그럼 이 트랜잭션은 모든 사용자(또는 기계)로부터 확정되었다고 가정할 수 있으며, 높은 확실성을 가지고 있다고 가정할 수 있습니다.</p></li><li><p>확정 여부를 검사하려면 송금자로부터 IOTA를 받는 수금자는 자신에게 지불하는 정보를 담고 있는 트랜잭션이 탱글에 존재하는 모든 팁으로부터(또는 좀더 낮은, 예를 들어 80%의 확실성만으로도 괜찮다면 80%의 팁으로부터) 직간접적으로 참조되고 있는지만 검사하면 됩니다. 해당 트랜잭션을 별도로 다시 검증하거나 비슷한 절차를 거칠 필요가 없습니다. 주의: 수천 개의 팁이 존재할 수 있으므로 모든 팁의 부모를 검사하는 대신에 무작위 샘플을 선정해서 통계적인 평가를 하는 것도 가능합니다.</p></li></ul><p>팁의 갯수가 너무 작으므로 <code>n</code>은 아직 확정되었다고 볼 수는 없습니다. 더 많은 팁을 포함하고 있는 다음 그림에서 설명을 이어갑니다.</p><h2 id="확정도"><a href="#확정도" class="headerlink" title="확정도"></a>확정도</h2><p><img src="https://i.imgur.com/6Ct1D5Y.png" alt="Imgur"></p><p>이번에는 팁의 갯수가 더 많은 확장된 그림으로 살펴봅시다. 새 팁은 각자의 검증 경로가 있고, 그림에서 옅은색 영역으로 표시되어 있습니다. 영역이 겹칠 수록 색이 짙어지는 것을 유심히 보면 어떤 트랜잭션이 얼마나 많은 팁에 의해 검증되는지와 그에 따른 확정도가 어느 정도인지 알 수 있습니다.</p><p>IOTA를 받는 수금자는 허용 확정도를 스스로 정할 수 있습니다. 트랜잭션 속도가 거래 금액보다 더 중요하다면(즉, 액수가 매우 작은 마이크로 트랜잭션 또는 0원 짜리 트랜잭션), 또는 송금자가 믿을 만한 친구라면 75%의 확정도면 충분할 겁니다. 허용 확정도가 75%라면, 다시 말해 4개 팁 중에서 3개의 팁으로부터 검증을 받으면 되는 수준이라면, 그림에 표시된 4개의 팁 중 <code>2</code>, <code>3</code>, <code>4</code> 세 개의 팁으로부터 검증 받은 <code>l</code>, <code>o</code>, <code>t</code>는 확정되었다고 볼 수 있습니다.</p><h2 id="전파-지연"><a href="#전파-지연" class="headerlink" title="전파 지연"></a>전파 지연</h2><p><img src="https://i.imgur.com/Pyuvqxc.png" alt="Imgur"></p><p>작업증명이 오래 걸릴 수도 있고, 트랜잭션의 전파가 지연될 수 있으므로 이론적으로는 <code>5</code> 같은 느린 트랜잭션이 뒤늦게 탱글에 추가될 수 있습니다. <code>5</code>가 추가되기 전에는 <code>n</code>이 모든 팁으로부터 검증을 받은 상태였지만, <code>5</code>의 검증 경로에는 <code>n</code>이 포함되지 않으므로 <code>5</code>가 추가되면 <code>n</code>은 더이상 모든 팁으로부터 검증 받은 트랜잭션이 아닌 상태로 바뀝니다. 하지만 확정도는 80%로 여전히 매우 높습니다(그림에서는 5개의 팁만 있지만 실제로는 수천 개의 팁이 있을 것입니다).</p><p><code>5</code>가 추가된다고 해서 <code>n</code>의 상태가 확정에서 미확정으로 바뀌지는 않습니다. 단지 수학적으로 정확한 확정도 값이 변할 뿐입니다(예를 들어 99개의 팁 모두로부터 검증을 받은 상태였다가 새로 추가된 1개의 팁으로부터 검증을 받지 못하게 되었다면 확정도는 100%에서 99%로 변합니다). <code>5</code>가 추가된 후에 새로 추가된 팁이 <code>1</code>과 <code>5</code>를 참조한다면 <code>n</code>의 확정도는 다시 100%로 변합니다. 더 많은 트랜잭션이 탱글에 추가된다면 미미하나마 이런 확정도 변동이 생길 가능성도 작아집니다.</p><p>어쨌든 100%의 확정도는 획득하는 것은 어려운 일이라는 점을 알아둘 필요가 있습니다. 왜냐하면 비정상적인 트랜잭션을 참조하거나 정해진 프로토콜을 따르지 않는 악의적인 팁이 존재할 수 있기 때문입니다.</p><h2 id="이중-지불"><a href="#이중-지불" class="headerlink" title="이중 지불"></a>이중 지불</h2><p><img src="https://i.imgur.com/ikL18Ic.png" alt="Imgur"></p><p>사용자가 두 개의 충돌되는 트랜잭션 <code>w</code>와 <code>y</code>를 탱글의 서로 다른 영역에서 발생시켰다고 가정해봅시다. 그 이후에 추가되는 트랜잭션은 팁 선정이나 전파 지연 때문에, 충돌되는 트랜잭션인 <code>w</code>와 <code>y</code> 중 하나의 트랜잭션만 검증 경로에 포함할 가능성이 있습니다. </p><p>예를 들어 <code>1</code>을 탱글에 추가하는 사용자와 <code>2</code>를 탱글에 추가하는 사용자는 <code>w</code>와 <code>y</code>가 충돌된다는 사실을 알 수 없으며, 결과적으로 <code>w</code>와 <code>y</code>를 충돌 없는 유효한 트랜잭션으로 판별하게 됩니다. </p><p>하지만 그 충돌은 머지 않아 발견됩니다. 예를 들어 <code>1</code>과 <code>2</code>를 참조하는 <code>5</code>가 추가되면 <code>5</code>의 검증 경로에는 <code>w</code>와 <code>y</code>가 모두 포함되므로 <code>5</code>는 충돌을 발견할 수 있습니다. 그래서 <code>5</code>는 <code>1</code>과 <code>2</code>를 선택하지 않고 충돌이 없는 다른 두 개의 팁을 다시 선택할 겁니다. 그래야 <code>5</code> 자신이 나중에 추가되는 트랜잭션에 의해 유효한 트랜잭션으로서 검증 받을 수 있기 때문입니다.  </p><p>팁 선정 알고리듬과 탱글 프로세스에 따르면 충돌이 명백하게 발견되기 전에 <code>w</code>와 <code>y</code> 중 하나만 검증 경로에 포함한 많은 사용자는 <code>w</code>와 <code>y</code>의 충돌을 발견할 수 없으므로, <code>w</code>와 <code>y</code>를 유효한 트랜잭션으로 인정할 가능성이 있습니다. </p><p>하지만 결국에는 사용자들이 새로운 트랜잭션을 <code>w</code>를 검증 경로에 포함하는 팁과 <code>y</code>를 검증 경로에 포함하는 팁 중 어느 쪽에 더 많이 추가했느냐에 따라 <code>w</code>와 <code>y</code> 둘 중 하나만 확정되고 나머지 하나는 버려집니다. </p><p>버려진 쪽에 추가된 트랜잭션들은 충돌이 있었는지 몰랐지만 억울하게도 함께 버려집니다. 하지만 충돌을 모른채 버려진 트랜잭션들이 탱글에서 아예 사라지는 것은 아니고 다른 사용자(IOTA를 받는 수금자일 가능성이 높습니다)에 의해 선택되서 탱글에 다시 추가되고 검증 받을 수 있는 기회를 얻게 됩니다. </p><p>검증을 받으려면 작업 증명이 다시 실행되겠지만 송금자로부터 거래 승인 정보를 다시 받아와야 할 필요는 없습니다.</p><h2 id="이중-지불-문제-해결"><a href="#이중-지불-문제-해결" class="headerlink" title="이중 지불 문제 해결"></a>이중 지불 문제 해결</h2><p><img src="https://i.imgur.com/PvYUUpM.png" alt="Imgur"></p><p>앞의 이중 지불 그림에서 사용자는 <code>5</code>를 <code>1</code>과 <code>2</code>에 추가하려고 했지만, <code>w</code>와 <code>y</code>가 충돌된다는 걸 발견하고는 팁을 다시 선택해서 <code>1</code>과 <code>4</code>를 선택했고, <code>1</code>과 <code>4</code>에서는 충돌이 발견되지 않았으므로 <code>5</code>는 <code>1</code>과 <code>4</code>에 추가 되었습니다. 다른 사용자는(반드시 다른 사용자일 필요는 없습니다) <code>7</code>을 <code>2</code>와 <code>3</code>에 추가 했습니다.</p><p>이렇게 되면 <code>w</code>를 포함하는 경로와 <code>y</code>를 포함하는 두 가지 경로로 일종의 분기가 발생하지만, 앞의 이중 지불 단원에서 설명한대로 둘 중 하나는 버려지고 하나만 살아남게 됩니다. 트랜잭션의 누적 가중치를 감안한 무작위 팁 선택 로직에 의해, 분기된 두 경로 중 한 쪽 경로에 더 많은 자손 트랜잭션이 추가될 것 입니다.</p><p>그리고 시간이 지나면 누적 가중치를 감안한 팁 선택 알고리듬에 의해 한 쪽 경로에는 정상적인 방법으로 트랜잭션을 추가하는 것이 불가능해집니다. 앞의 그림에서 <code>5</code>, <code>6</code>, <code>8</code> 다음에는 새로운 트랜잭션이 계속 추가될 수 있지만, <code>7</code> 다음에는 트랜잭션을 추가할 수 없게 됩니다. 그래서 <code>y</code>, <code>2</code>, <code>3</code>, <code>7</code>은 더 이상 검증을 받지 못하게 되고 완전 확정 상태가 될 수 없습니다.</p><p>이중 지불 단원에서 설명한 것처럼 버려지는 경로에 있던 <code>y</code>, <code>2</code>, <code>3</code>, <code>7</code>은 일단 탱글에서 떨어져나간 후에 다른 새로운 트랜잭션들에 의해 검증되면 다시 탱글에 추가될 수 있습니다. <code>y</code>, <code>2</code>, <code>3</code>, <code>7</code> 각각이 유효한 트랜잭션이라면 다른 정상적인 트랜잭션과 마찬가지로 결국에는 확정될 수 있습니다. 그래서 <code>2</code>, <code>3</code>, <code>7</code>은 확정될 수 있지만 충돌 내용이 포함된 <code>y</code>는 끝내 확정될 수 없습니다.</p><h2 id="오프라인-탱글"><a href="#오프라인-탱글" class="headerlink" title="오프라인 탱글"></a>오프라인 탱글</h2><p><img src="https://i.imgur.com/60kh0yc.png" alt="Imgur"></p><p>탱글 사용자는 탱글 네트워크에 연결되어 있지 않은 오프라인 네트워크에서도 트랜잭션을 계속 붙여나갈 수 있습니다. 그러기 위해서는 트랜잭션이 프로토콜로 정해진 규약에 따라 생성되고 연결되어야 합니다. </p><p>오프라인 네트워크는 외부 인터넷 연결이 끊어져서 메인 탱글 네트워크에 연결할 수는 없지만, 인트라넷처럼 내부의 연결은 가능한 상태의 네트워크를 말합니다. </p><p>위의 예제 그림에서 <code>1</code>과 <code>2</code>는 처음으로 온라인 탱글 네트워크와 연결이 끊어져서 오프라인 상태가 된 트랜잭션 입니다. 그 둘은 온라인 탱글의 가장 끝에 있던 팁인 <code>r</code>과 <code>t</code>에 연결되어 있습니다. </p><p>노란색 영역으로 표시된 오프라인 네트워크에서 <code>1</code>과 <code>2</code> 이후에 발생하는 트랜잭션은 온라인 네트워크일 때와 마찬가지 방식으로 <code>1</code>과 <code>2</code>를 조상으로 해서 계속해서 추가됩니다.</p><p>다시 인터넷과 연결되어 오프라인 네트워크의 트랜잭션들을 다시 메인 탱글 네트워크에 연결할 수 있게 되면, 메인 탱글 네트워크와 방금 다시 온라인 네트워크가 된 노란색 영역 모두를 볼 수 있는 <code>8</code>이 메인 탱글 네트워크에 있는 <code>y</code>와 오프라인 네트워크에 있던 <code>7</code>을 선택해서 검증하면서 오프라인 네트워크와 메인 탱글 네트워크를 병합합니다. 나중에 <code>8</code>에 트랜잭션이 추가되면 오프라인 네트워크에 있던 <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>이 검증 경로에 포함되어 함께 검증됩니다.</p><p>오프라인 네트워크에 있던 트랜잭션이 완전 확정 상태가 되려면, 메인 탱글 네트워크에 있는 트랜잭션과 마찬가지로 충돌이 없어야 합니다. 만약 <code>1</code>~<code>7</code> 중에서 하나라도 메인 탱글 네트워크에 있는 트랜잭션과 충돌이 있다면, <code>1</code>~<code>8</code> 모두 확정되지 못합니다. 이중 지불 단원에서 설명한 것처럼 충돌이 메인 탱글에 있는 모든(또는 대다수의) 팁에 의해 발견되려면 어느 정도 후속 트랜잭션이 탱글 네트워크에 추가되어야 합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;IOTA Donations: QPLGOG9PMIMUAW9UDMUNZQHPXZPXDNGLBEIHILXHWHIOFHLIHPDDERXAJQKUQDEORMHSUWVZQE9JYSHIWADIIPAOJD&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="FinTech" scheme="http://homoefficio.github.io/tags/FinTech/"/>
    
      <category term="핀테크" scheme="http://homoefficio.github.io/tags/%ED%95%80%ED%85%8C%ED%81%AC/"/>
    
      <category term="Cryptocurrency" scheme="http://homoefficio.github.io/tags/Cryptocurrency/"/>
    
      <category term="IOTA" scheme="http://homoefficio.github.io/tags/IOTA/"/>
    
      <category term="아이오타" scheme="http://homoefficio.github.io/tags/%EC%95%84%EC%9D%B4%EC%98%A4%ED%83%80/"/>
    
      <category term="Tangle" scheme="http://homoefficio.github.io/tags/Tangle/"/>
    
      <category term="DAG" scheme="http://homoefficio.github.io/tags/DAG/"/>
    
      <category term="Directed Acyclic Graph" scheme="http://homoefficio.github.io/tags/Directed-Acyclic-Graph/"/>
    
      <category term="Consensus" scheme="http://homoefficio.github.io/tags/Consensus/"/>
    
      <category term="암호화폐" scheme="http://homoefficio.github.io/tags/%EC%95%94%ED%98%B8%ED%99%94%ED%8F%90/"/>
    
  </entry>
  
  <entry>
    <title>(번역) Ever wonder how Bitcoin (and other cryptocurrencies) actually work?</title>
    <link href="http://homoefficio.github.io/2017/07/18/Ever-wonder-how-Bitcoin-and-other-cryptocurrencies-actually-work/"/>
    <id>http://homoefficio.github.io/2017/07/18/Ever-wonder-how-Bitcoin-and-other-cryptocurrencies-actually-work/</id>
    <published>2017-07-18T12:32:22.000Z</published>
    <updated>2019-04-28T17:03:55.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="번역-Ever-wonder-how-Bitcoin-and-other-cryptocurrencies-actually-work"><a href="#번역-Ever-wonder-how-Bitcoin-and-other-cryptocurrencies-actually-work" class="headerlink" title="(번역) Ever wonder how Bitcoin (and other cryptocurrencies) actually work?"></a>(번역) Ever wonder how Bitcoin (and other cryptocurrencies) actually work?</h1><p>무쟈게 좋아라 하는 <a href="http://www.3blue1brown.com/" target="_blank" rel="noopener">3Blue1Brown</a>의 비디오 하나 번역했다.</p><p>화면 전개에 보조를 맞춰야 되고, 아무리 어순이 다른 영어라지만 내레이션과 너무 동떨어지면 귀에 거슬리고, 화면 내용을 가리지 않도록 양도 조절해야 되는 등, 그냥 책 번역에 비해 공들일 일이 더 많다.</p><p><a href="http://www.3blue1brown.com/" target="_blank" rel="noopener">3Blue1Brown</a> 정도의 초울트라 고퀄 컨텐츠를 받쳐주는 자막이라면 줄바꿈 하나하나까지 심혈을 기울여야.. ㅋ</p><p>처음 보면 쉽지 않게 느껴질 수도 있지만, 사실 비대칭 키, 디지털 서명, 해쉬 함수 정도만 알면 <strong>3Blue1Brown</strong> 특유의 깔끔한 시각화와 함께 어렵지 않게 이해할 수 있을 것이다.</p><p>한 번 보고, 두 번 보자! 원한다면 한국어 자막을 켜시고!</p><div class="video-container"><iframe src="//www.youtube.com/embed/bBC-nXj3Ng4" frameborder="0" allowfullscreen></iframe></div><p>자매품: <a href="http://homoefficio.github.io/2016/01/23/BlockChain-%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%85%90/">BlockChain 기초 개념</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;번역-Ever-wonder-how-Bitcoin-and-other-cryptocurrencies-actually-work&quot;&gt;&lt;a href=&quot;#번역-Ever-wonder-how-Bitcoin-and-other-cryptocurrencies
      
    
    </summary>
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="http://homoefficio.github.io/tags/BlockChain/"/>
    
      <category term="블록체인" scheme="http://homoefficio.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
      <category term="BitCoin" scheme="http://homoefficio.github.io/tags/BitCoin/"/>
    
      <category term="비트코인" scheme="http://homoefficio.github.io/tags/%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/"/>
    
      <category term="FinTech" scheme="http://homoefficio.github.io/tags/FinTech/"/>
    
      <category term="핀테크" scheme="http://homoefficio.github.io/tags/%ED%95%80%ED%85%8C%ED%81%AC/"/>
    
      <category term="Proof of Work" scheme="http://homoefficio.github.io/tags/Proof-of-Work/"/>
    
      <category term="작업증명" scheme="http://homoefficio.github.io/tags/%EC%9E%91%EC%97%85%EC%A6%9D%EB%AA%85/"/>
    
      <category term="3Blue1Brown" scheme="http://homoefficio.github.io/tags/3Blue1Brown/"/>
    
      <category term="Digital Signature" scheme="http://homoefficio.github.io/tags/Digital-Signature/"/>
    
      <category term="디지털 서명" scheme="http://homoefficio.github.io/tags/%EB%94%94%EC%A7%80%ED%84%B8-%EC%84%9C%EB%AA%85/"/>
    
      <category term="Cryptocurrency" scheme="http://homoefficio.github.io/tags/Cryptocurrency/"/>
    
      <category term="암호화 화폐" scheme="http://homoefficio.github.io/tags/%EC%95%94%ED%98%B8%ED%99%94-%ED%99%94%ED%8F%90/"/>
    
      <category term="SHA256" scheme="http://homoefficio.github.io/tags/SHA256/"/>
    
      <category term="Hash Function" scheme="http://homoefficio.github.io/tags/Hash-Function/"/>
    
      <category term="해쉬 함수" scheme="http://homoefficio.github.io/tags/%ED%95%B4%EC%89%AC-%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring - [ ]가 포함된 URL 파라미터 바인딩 하기</title>
    <link href="http://homoefficio.github.io/2017/04/25/Spring-%EA%B0%80-%ED%8F%AC%ED%95%A8%EB%90%9C-URL-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9-%ED%95%98%EA%B8%B0/"/>
    <id>http://homoefficio.github.io/2017/04/25/Spring-가-포함된-URL-파라미터-바인딩-하기/</id>
    <published>2017-04-25T14:42:02.000Z</published>
    <updated>2019-04-28T17:03:55.411Z</updated>
    
    <content type="html"><![CDATA[<p>스프링에서 Servlet Request에 포함된 parameter들의 모델 객체(또는 DTO 객체)로의 바인딩은 <code>ServletRequestDataBinder</code>에서 담당한다.</p><p>큰 흐름을 살펴보면 다음과 같다.</p><ol><li>parameterName을 key로, parameterValue를 value로 해서 request 내의 모든 parameter를 <code>MutablePropertyValues</code>에 넣은 후, </li><li><code>MutablePropertyValues</code>에 저장된 값을 <code>DataBinder</code>를 통해 모델 객체(또는 DTO 객체)로 바인딩힌다.</li></ol><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>parameterName이 특별한 점 없이 그냥 일반적이라면 모든 과정이 행복하게 끝나는데, parameterName이 아래와 같이 </p><blockquote><p>items[0][count]</p></blockquote><p>같은 형식으로 들어오면 다음과 같은 에러를 만나게 되는데, 더 안타까운 것은 이 에러는 <code>BindingResult</code>로는 잡히지도 않는다는 점이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.InvalidPropertyException: </span><br><span class="line">  Invalid property 'items[0][count]' of bean class [어쩌구DTO]: </span><br><span class="line">    Property referenced in indexed property path <span class="string">'items[0][count]'</span> is neither an array nor a List nor a Map</span><br><span class="line"></span><br><span class="line">`items[<span class="number">0</span>][count]`가 가리키는 값이 배열도, 리스트도, 맵도 아니라서 예외 발생</span><br></pre></td></tr></table></figure><p>참고로 위 예외가 발생하는 정확한 위치는 스프링의 <code>AbstractNestablePropertyAccessor</code> 클래스의 <code>setPropertyValue</code> 메서드다.</p><p>암튼, 저런 형식의 데이터가 들어올까?</p><p>들어온다. 브라우저에서 jQuery로 다음과 같이 데이터를 서버에 보내면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'어쩌구-서버-API'</span>,</span><br><span class="line">    contentType: <span class="string">'application/json'</span>,</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    crossDomain: <span class="literal">true</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        id: <span class="string">"321"</span>,</span><br><span class="line">        items: [</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="string">"abc987"</span>,</span><br><span class="line">                count: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        emails: [<span class="string">'abc@abc.com'</span>, <span class="string">'sdf@sdf.com'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 성공 시 처리 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>다음과 같은 URL로 서버에 요청이 전달된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /어쩌구-서버-API?id=321&amp;items%5B0%5D%5Bid%5D=abc987&amp;items%5B0%5D%5Bcount%5D=3&amp;emails%5B%5D=abc%40abc.com&amp;emails%5B%5D=sdf%40sdf.com</span><br></pre></td></tr></table></figure><p>눈으로 읽을 수 있도록 URL Decoding하면 다음과 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /어쩌구-서버-API?id=321&amp;items[0][id]=abc987&amp;items[0][count]=3&amp;emails[]=abc@abc.com&amp;emails[]=sdf@sdf.com</span><br></pre></td></tr></table></figure><p>물론 이런 경우라면 원론적으로는 GET 보다는 POST로 보내는 게 적절하다. </p><p>POST로 보냈다면(클라이언트에서도 <code>JSON.stringify()</code>를 이미 했을테고), <code>@RequestBody</code>로 읽어서 모델 객체에 문제 없이 바인딩 할 수 있다.</p><p>하지만 이미 클라이언트가 모두 GET 방식으로 보내고 있고, 클라이언트가 한 군데가 아니라 꽤 많다면, 현실적으로는 그냥 서버 쪽에서 해결하는 것이 좋다.</p><p>하지만 서버 쪽의 스프링은, 앞에서 얘기한 것처럼 이런 형식의 URL 파라미터를 자연스럽게 모델 객체로 바인딩 해 주지 못한다는..</p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>그래서 이를 보완할 수 있는 유틸 메서드를 만들어봤다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameterMap  request.getParameterMap()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto           바인딩 할 DTO의 클래스 리터럴</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;           바인딩 할 DTO의 타입</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getDTOFromParamMap</span><span class="params">(Map&lt;String, String[]&gt; parameterMap, Class&lt;T&gt; dto)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> MutablePropertyValues sourceProps = getPropsFrom(parameterMap);</span><br><span class="line"></span><br><span class="line">    T targetDTO = dto.newInstance();</span><br><span class="line">    DataBinder binder = <span class="keyword">new</span> DataBinder(targetDTO);</span><br><span class="line">    binder.bind(sourceProps);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> targetDTO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MutablePropertyValues <span class="title">getPropsFrom</span><span class="params">(Map&lt;String, String[]&gt; parameterMap)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> MutablePropertyValues mpvs = <span class="keyword">new</span> MutablePropertyValues();</span><br><span class="line"></span><br><span class="line">    parameterMap.forEach(</span><br><span class="line">            (k, v) -&gt; &#123;</span><br><span class="line">                String dotKey =</span><br><span class="line">                        k.replaceAll(<span class="string">"\\[]"</span>, <span class="string">""</span>)</span><br><span class="line">                         .replaceAll(<span class="string">"\\[(\\D+)"</span>, <span class="string">".$1"</span>)</span><br><span class="line">                         .replaceAll(<span class="string">"]\\[(\\D)"</span>, <span class="string">".$1"</span>)</span><br><span class="line">                         .replaceAll(<span class="string">"(\\.\\w+)]"</span>, <span class="string">"$1"</span>);</span><br><span class="line">                mpvs.addPropertyValue(dotKey, v);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mpvs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>핵심 로직은 private 메서드의 람다식 안의 정규표현식에 담겨 있는데, 테스트 코드를 보면 금방 이해할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> object인덱스형_key를_dot형으로_변환() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    String k = <span class="string">"items[0][options][1][a][12][b][abc][c][1234][c1][33][_1][___][99][a33][b3][aa3]"</span>;</span><br><span class="line"></span><br><span class="line">    String result =</span><br><span class="line">            k.replaceAll(<span class="string">"\\[]"</span>, <span class="string">""</span>)</span><br><span class="line">             .replaceAll(<span class="string">"\\[(\\D+)"</span>, <span class="string">".$1"</span>)</span><br><span class="line">             .replaceAll(<span class="string">"]\\[(\\D)"</span>, <span class="string">".$1"</span>)</span><br><span class="line">             .replaceAll(<span class="string">"(\\.\\w+)]"</span>, <span class="string">"$1"</span>);</span><br><span class="line"></span><br><span class="line">    assertThat(result, is(<span class="string">"items[0].options[1].a[12].b.abc.c[1234].c1[33]._1.___[99].a33.b3.aa3"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쉽게 말해 <code>[ ]</code>로 구성된 parameterName을 스프링이 이해할 수 있는 <code>.</code> 형식으로 적절하게 변환해서 <code>MutablePropertyValues</code>에 에러 없이 집어넣을 수 있게 하고, <code>DataBinder</code>를 통해 모델 객체로 바인딩 하게 해준다.</p><p>단, 한 가지 제약 조건이 있는데 <strong>[ ] 안에 들어가는 parameterName이 숫자로 시작하면 안된다</strong>는 점이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스프링에서 Servlet Request에 포함된 parameter들의 모델 객체(또는 DTO 객체)로의 바인딩은 &lt;code&gt;ServletRequestDataBinder&lt;/code&gt;에서 담당한다.&lt;/p&gt;
&lt;p&gt;큰 흐름을 살펴보면 다음과 같다.&lt;/p
      
    
    </summary>
    
      <category term="Technique" scheme="http://homoefficio.github.io/categories/Technique/"/>
    
    
      <category term="Spring" scheme="http://homoefficio.github.io/tags/Spring/"/>
    
      <category term="스프링" scheme="http://homoefficio.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81/"/>
    
      <category term="Data Binding" scheme="http://homoefficio.github.io/tags/Data-Binding/"/>
    
      <category term="URL" scheme="http://homoefficio.github.io/tags/URL/"/>
    
      <category term="데이터 바인딩" scheme="http://homoefficio.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9/"/>
    
  </entry>
  
</feed>
